{"prompt":"Is there a way to see all unique values even if there are more than 100?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use stringify to display all unique values\nawait table.logUniques('category', { stringify: true });\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior if no options are provided?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default behavior: random sampling without a fixed seed\nawait table.sample(100);\nawait sdb.done();\n```"}
{"prompt":"How do I load geospatial data from a URL into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadGeoData(\"https://some-website.com/some-data.geojson\");\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Automatically finds the geometry column and computes centroid\nawait table.centroid('centroidCol');\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that the joined data is stored in a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a left join and store results in a new table\nconst joinedTable = await tableA.join(tableB, {\n  outputTable: true,\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I use `keep` to filter based on values in multiple columns simultaneously?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Keep only rows where 'job' is 'accountant' or 'developer', AND 'city' is 'Montreal'\nawait table.keep({ job: [\"accountant\", \"developer\"], city: \"Montreal\" });\n\nawait sdb.done();\n```"}
{"prompt":"Can I clone multiple columns with different offsets?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('sales', 'sales_1_day_ago', { offset: 1 });\nawait table.cloneColumnWithOffset('expenses', 'expenses_2_days_ago', { offset: 2 });\n// Clone multiple columns with different offsets\nawait sdb.done();\n```"}
{"prompt":"How can I compute the length of line geometries in kilometers instead of meters?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute the length in kilometers and store in 'length_km'\nawait table.length('length_km', { unit: 'km' });\nawait sdb.done();\n```"}
{"prompt":"Can I rename a table to an empty string?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Renaming to an empty string is not recommended and may cause issues\nawait table.renameTable(''); // Avoid this\nawait sdb.done();\n```"}
{"prompt":"How do I set the data type of a column to 'string'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.setTypes({\n  myColumn: \"string\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I select a percentage of rows instead of a fixed number?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select 10% of the rows randomly\nawait table.sample('10%');\nawait sdb.done();\n```"}
{"prompt":"Can I round the standard deviation result to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate standard deviation of 'price' rounded to 2 decimals\nconst priceStdDev = await table.getStdDev('price', { decimals: 2 });\nconsole.log(priceStdDev);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to convert a column to uppercase that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// The documentation doesn't specify the behavior if the column doesn't exist.\n// It's likely an error will be thrown or the operation will be skipped.\nawait table.upper(\"nonExistentColumn\");\nawait sdb.done();\n```"}
{"prompt":"How do I make all small multiples share the same y-axis scale using `logDotChart`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n];\nawait table.loadArray(data);\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  fixedScales: true,\n});\nawait sdb.done();\n```"}
{"prompt":"Is there a way to specify the name of the database when loading?","completion":"Yes, you can specify the `name` property in the options object."}
{"prompt":"How can I convert a column from string to double precision float?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'value' column to double precision float\nawait table.convert({ value: 'double' });\n\nawait sdb.done();\n```"}
{"prompt":"Does `logNbRows` return any value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst result = await table.logNbRows(); // result is the table itself\nawait sdb.done();\n```"}
{"prompt":"How do I reproject geospatial data to WGS84 when loading a shapefile?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.shp.zip', { toWGS84: true });\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I get a description of the data types of each column in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logDescription();\nawait sdb.done();\n```"}
{"prompt":"What if I want to create bins without specifying any options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default behavior: start at min value of 'column'\nawait table.bins('column', 10, 'bins_column');\nawait sdb.done();\n```"}
{"prompt":"Can I use the `bins` method with a column containing string values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.bins(\"string_column\", 10, \"string_bins\"); // This will likely result in an error if the column is not numeric.\nawait sdb.done();\n```"}
{"prompt":"Can I compute the centroid without specifying any options?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.centroid(\"centroid_point\");\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table and filter the data based on a condition?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"path/to/your/data.csv\");\n\nconst tableB = await tableA.cloneTable({ conditions: `column1 > 10` });\n\nawait sdb.done();\n```"}
{"prompt":"How do I extract the last character from a column named 'code'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.right(\"code\", 1);\nawait sdb.done();\n```"}
{"prompt":"What is the purpose of the `test` option, and how should I implement it?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load some data\nawait table.loadArray([{ value: 10 }, { value: 20 }]);\n\n// Use aiRowByRow with a test function\nawait table.aiRowByRow(\n  \"value\",\n  \"category\",\n  \"Classify this number as 'high' or 'low'.\",\n  {\n    test: (dataPoint: unknown) => {\n      // Check if the dataPoint is a string and is either 'high' or 'low'\n      if (typeof dataPoint !== \"string\" || ![\"high\", \"low\"].includes(dataPoint)) {\n        throw new Error(`Invalid response: ${dataPoint}`);\n      }\n    },\n    retry: 2, // Retry the request if the test fails\n  },\n);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use `logExtent` on a column that is not numeric?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// This will likely result in an error or unexpected behavior\n// as logExtent is intended for numeric columns.\nawait table.logExtent(\"non_numeric_column\");\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve a row using both SQL and JavaScript conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row using both SQL and JS conditions\nconst combinedConditionRow = await table.getRow(`status === 'active' AND age > 30`);\nconsole.log(combinedConditionRow);\n\nawait sdb.done();\n```"}
{"prompt":"What columns should I specify for `columnsFrom` and `valuesFrom`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// 'Year' will become the new column headers\n// 'Employees' will be the values in the new columns\nawait table.wider(\"Year\", \"Employees\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I assign deciles to a dataset based on a specific column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign deciles (10 quantiles) to 'column1' and store in 'decileColumn'\nawait table.quantiles('column1', 10, 'decileColumn');\nawait sdb.done();\n```"}
{"prompt":"How do I compute a rolling sum with rounding to 2 decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling sum rounded to 2 decimal places\nawait table.rolling('amount', 'rollingSumAmount', 'sum', 3, 1, {\n  decimals: 2\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I use the `thinkingBudget` option with Ollama models?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load some data\nawait table.loadArray([{ text: \"Some complex text\" }]);\n\n// Use aiRowByRow with thinkingBudget\nawait table.aiRowByRow(\n  \"text\",\n  \"summary\",\n  \"Summarize this text.\",\n  {\n    ollama: true,\n    thinkingBudget: 100, // Enable reasoning with a budget of 100 tokens\n  },\n);\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle null or undefined values when generating a dot chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: null },\n  { date: new Date('2023-02-01'), value: 20 },\n];\nawait table.loadArray(data);\n// Filter out rows with null values before generating the chart\nawait table.filterRows((row) => row.value !== null);\nawait table.logDotChart('date', 'value');\nawait sdb.done();\n```"}
{"prompt":"How do I write the table data to a Google Sheet?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\");\nawait sdb.done();\n```"}
{"prompt":"Can I chain replaceNulls with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Replace NULL values and then summarize the data\nawait table.replaceNulls('column1', 0);\nawait table.summarize({ values: 'column1', categories: 'categoryColumn' });\nawait sdb.done();\n```"}
{"prompt":"How do I remove a table from the database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.removeTable();\nawait sdb.done();\n```"}
{"prompt":"Can I specify the number of decimal places for the calculated proportions?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsVertical(\"sales\", \"sales_proportion\", { decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table into a specific named table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clone the table into a specific named table\nconst clonedTable = await table.cloneTable('my_cloned_table');\nawait sdb.done();\n```"}
{"prompt":"Can I use logTypes() multiple times on the same table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// You can call logTypes() multiple times on the same table\nawait table.logTypes();\nconsole.log('First log completed');\nawait table.logTypes();\nconsole.log('Second log completed');\nawait sdb.done();\n```"}
{"prompt":"I'm getting rate limited when generating embeddings. How can I use the `rateLimitPerMinute` option to slow down the requests?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n// await table.loadData(\"your_data.csv\");\n\nawait table.aiEmbeddings(\"text_column\", \"embeddings\", { rateLimitPerMinute: 20 });\n\n// This will limit the requests to 20 per minute.\n\nawait sdb.done();\n```"}
{"prompt":"If a row doesn't have enough preceding or following rows, what value will be returned for the rolling aggregation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.rolling(\"value\", \"rollingAvgValue\", \"mean\", 1, 1);\nawait sdb.done();\n```\n// According to the documentation, NULL will be returned for rows without enough preceding or following rows to form a complete window."}
{"prompt":"Can I retrieve a table and then write its data to a file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Retrieve the table and write its data\nconst table = await sdb.getTable('yourTableName');\nawait table.writeData('./output.csv');\nawait sdb.done();\n```"}
{"prompt":"What does the logTypes() method return?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The logTypes() method returns the SimpleTable instance\nconst result = await table.logTypes();\nconsole.log(result); // This will be the SimpleTable instance\nawait sdb.done();\n```"}
{"prompt":"How do I set a Time-To-Live (TTL) for cached computations in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData('items.csv');\n  await table.summarize({\n    values: 'price',\n    categories: 'department',\n    summaries: ['min', 'max', 'mean'],\n  });\n}, { ttl: 60 });\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to log rows where two conditions are met?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable({ conditions: `status === 'active' && age > 25` });\nawait sdb.done();\n```"}
{"prompt":"Can I use the left method to shorten a product name column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Shorten 'productName' to first 5 characters\nawait table.left('productName', 5);\nawait sdb.done();\n```"}
{"prompt":"What data type does the `getTableNames` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(typeof tableNames); // Output: object\nawait sdb.done();\n```"}
{"prompt":"Can I reduce precision for multiple geometry columns in one call?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Currently, reducePrecision only supports reducing precision for one column at a time\nawait table.reducePrecision(3);\nawait sdb.done();\n```"}
{"prompt":"What if my geometry data is not in a column named 'geometry'? How do I specify the correct column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add vertex counts for geometries in a specific column named 'myGeom'\nawait table.nbVertices(\"myGeomVertices\", { column: \"myGeom\" });\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the median value of a numeric column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst median = await table.getMedian(\"numericColumn\");\nconsole.log(median);\nawait sdb.done();\n```"}
{"prompt":"How do I find the minimum and maximum values in a column named 'sales'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst salesExtent = await table.getExtent(\"sales\");\nconsole.log(salesExtent); // e.g., [10.5, 100.2]\nawait sdb.done();\n```"}
{"prompt":"Is there a way to filter rows based on the isClosedGeo result?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add the isClosed column\nawait table.isClosedGeo('isClosed');\n// Filter to only include closed geometries\nawait table.filter({ isClosed: true });\nawait sdb.done();\n```"}
{"prompt":"How do I remove a table using its SimpleTable instance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst employeesTable = sdb.newTable('employees');\n// ... load data ...\nawait sdb.removeTables(employeesTable);\nawait sdb.done();\n```"}
{"prompt":"What happens if I call logNbRows() without loading data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Calling logNbRows() on a table with no loaded data\nawait table.logNbRows(); // Logs 0 rows\nawait sdb.done();\n```"}
{"prompt":"How do I assign quartiles to a column named 'price' and store the results in a new column called 'priceQuartile'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.quantiles(\"price\", 4, \"priceQuartile\");\nawait sdb.done();\n```"}
{"prompt":"What happens if the column name doesn't exist?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Handle non-existent column\ntry {\n  const minNonExistent = await table.getMin('non_existent_column');\n  console.log(`Minimum value: ${minNonExistent}`);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();```"}
{"prompt":"How do I use the `AND` operator in the `getRow` condition?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Get a row where 'city' is 'London' AND 'country' is 'UK'\nconst londonUkRow = await table.getRow(`city = 'London' AND country = 'UK'`);\nconsole.log(londonUkRow);\nawait sdb.done();\n```"}
{"prompt":"How do I check the data types of columns in a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check data types by logging columns with types\nawait table.logColumns({ types: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if there are no geometries in the specified column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempting to get bounding box from a column with no geometries\ntry {\n  const bbox = await table.getBoundingBox('nonGeometryColumn');\n  console.log(bbox);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I assign ranks to rows based on a specific column in ascending order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign ranks based on 'score' in ascending order\nawait table.ranks('score', 'rank');\nawait sdb.done();\n```"}
{"prompt":"How can I compute linear regressions for multiple categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions within multiple categories\nawait table.linearRegressions({\n  categories: ['region', 'year']\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I format date columns to ISO 8601 strings in a GeoJSON file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", { formatDates: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if the column name doesn't exist in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempting to get values from a non-existent column will throw an error\ntry {\n  const invalidColumnValues = await table.getValues('nonExistentColumn');\n} catch (error) {\n  console.error('Error:', error); // e.g., 'Column not found: nonExistentColumn'\n}\n\nawait sdb.done();```"}
{"prompt":"How do I retrieve the top 2 rows where the 'price' is greater than 100?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst top2Expensive = await table.getTop(2, { conditions: `price > 100` });\nconsole.log(top2Expensive);\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that my random sampling produces the same results every time?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Use a seed to get repeatable sampling\nawait table.sample(\"10%\", { seed: 789 });\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column to a timestamp type with time zone in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'timestamp_tz' to timestamp with time zone\nawait table.convert({ timestamp_tz: \"timestamp with time zone\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I compute the centroid of geometries using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute centroid of geometries and store in 'centroidCol'\nawait table.centroid('centroidCol');\nawait sdb.done();\n```"}
{"prompt":"How do I clean column names in a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clean all column names in the table\nawait table.cleanColumnNames();\nawait sdb.done();\n```"}
{"prompt":"How do I write the table's data to a GeoJSON file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeGeoData(\"./output.geojson\");\nawait sdb.done();\n```"}
{"prompt":"What does the getColumns() method return?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all column names from the table\nconst columns = await table.getColumns();\nconsole.log(columns); // e.g., ['id', 'name', 'age']\n\nawait sdb.done();\n```"}
{"prompt":"How can I aggregate geometries by a specific category, such as 'country', and compute their union?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Aggregate geometries by 'country' and compute their union\nawait table.aggregateGeo(\"union\", { categories: \"country\" });\nawait sdb.done();\n```"}
{"prompt":"How can I customize the y-axis display with a percentage suffix?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-03-01'), value: 30 },\n  { date: new Date('2023-04-01'), value: 40 },\n];\n\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', {\n  formatY: (d) => `${d}%`,\n});\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass an empty array to capitalize?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Passing an empty array will result in no changes\nawait table.capitalize([]); // No columns are capitalized\nawait sdb.done();\n```"}
{"prompt":"Can I convert multiple columns to uppercase using a single string instead of an array?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// This is not supported. The method expects either a string or an array of strings.\n// await table.upper(\"column1,column2\"); // This will likely cause an error.\nawait sdb.done();\n```"}
{"prompt":"Can I overwrite an existing column with the result of removeIntersection?","completion":"```ts\n// Yes, you can use an existing column name as the newColumn parameter.\nawait table.removeIntersection('geomA', 'geomB', 'geomA');\n```"}
{"prompt":"How do I compute the length of line geometries in meters using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute the length of line geometries in meters and store in 'length_m'\nawait table.length('length_m');\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't call `done()` after caching computations in SimpleDB?","completion":"```ts\n// If you don't call done(), the cache might not be properly cleaned up,\n// leading to potential memory leaks or cache bloat.\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  // Your computations here\n});\n\n// Always call done() to clean up resources\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a specific sheet in an Excel file within a directory?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { fileType: 'excel', sheet: 'Sheet2' });\nawait sdb.done();\n```"}
{"prompt":"How can I format the labels displayed in the bar chart?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n];\nawait table.loadArray(data);\nawait table.logBarChart(\"category\", \"value\", { formatLabels: (d) => d.toUpperCase() });\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the proportion of each value in a single column relative to the total sum of that column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsVertical(\"myColumn\", \"myColumnProportion\");\nawait sdb.done();\n```"}
{"prompt":"Is it necessary to load data into the table before calling `logDescription`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.logDescription(); // This will likely log empty descriptions if no data is loaded.\nawait sdb.done();\n```"}
{"prompt":"What data type will the new column containing the intersection geometries have?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The new column will contain geometries, likely in a format compatible with geospatial operations.\n// The exact data type will depend on the underlying geospatial library used by SimpleDB.\n// You can inspect the column after the intersection operation to determine the data type.\n\n// Example:\nawait table.intersection(\"geometry1\", \"geometry2\", \"intersected_geometry\");\n// Then inspect the 'intersected_geometry' column.\n\nawait sdb.done();\n```"}
{"prompt":"How does the method handle the geometry column if not specified?","completion":"The method will automatically find a geometry column. Example:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Automatically finds the geometry column\nawait table.length('length_m');\nawait sdb.done();\n```"}
{"prompt":"How do I write data to a CSV file without compression?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./output.csv', { compression: false });\nawait sdb.done();\n```"}
{"prompt":"How can I visualize the extent of a column using getExtent?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get extent for visualization\nconst [min, max] = await table.getExtent('column_name');\nconsole.log(`Visualizing range from ${min} to ${max}`);\n\nawait sdb.done();"}
{"prompt":"How do I update a column by doubling its values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Double the values in 'price' column\nawait table.updateColumn('price', `price * 2`);\nawait sdb.done();\n```"}
{"prompt":"Can I select columns after loading data into the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.selectColumns(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the perimeter of polygons in meters and store it in a new column named 'perimeter_m'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.perimeter(\"perimeter_m\");\nawait sdb.done();\n```"}
{"prompt":"What happens if the string in a column is shorter than the `numberOfCharacters` I specify? Will it return an error or just return the entire string?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.left(\"shortString\", 5);\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use different columns for labels and values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Using 'country' as labels and 'population' as values\nawait table.logBarChart('country', 'population');\nawait sdb.done();\n```"}
{"prompt":"How do I summarize a single column, like 'sales', to get the total sum?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.summarize({\n  values: \"sales\",\n  summaries: \"sum\",\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I assign quantiles to multiple categories at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign quantiles within multiple categories\nawait table.quantiles('valueColumn', 10, 'quantileResult', { categories: ['category1', 'category2'] });\nawait sdb.done();\n```"}
{"prompt":"Can I choose any name for the new column that stores the validity results?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a column named 'geometry_valid' to indicate valid geometries.\nawait table.isValidGeo(\"geometry_valid\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I use `wider` on a table that has multiple grouping columns?","completion":"Yes, but you need to ensure that the combination of values in the `columnsFrom` column is unique for each row. For example:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Restructure the table by pivoting 'Year' into new columns with 'Employees' as values\nawait table.wider(['Department', 'Year'], 'Employees');\nawait sdb.done();\n```"}
{"prompt":"Can I use unnestGeo on a table without loading data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// You need to load data before calling unnestGeo\nawait table.loadData('path/to/your/data.csv');\nawait table.unnestGeo();\nawait sdb.done();\n```"}
{"prompt":"Does the writeDB method return a promise?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Yes, it returns a Promise<void>\nawait sdb.writeDB('./my_exported_database.db');\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the `decimals` option when calculating the distance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// According to the documentation, if the 'decimals' option is not specified,\n// the distance values will not be rounded.\nawait table.distance(\"geom1\", \"geom2\", \"distance_unrounded\");\nawait sdb.done();\n```"}
{"prompt":"What if one of the geometry columns is empty?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If 'geomB' is empty, the union will be the same as 'geomA'\nawait table.union('geomA', 'geomB', 'unionGeom');\nawait sdb.done();\n```"}
{"prompt":"How do I skip the header row in a CSV file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load data from a CSV file, skipping the header row\nawait table.loadData(\"./data.csv\", { header: true });\n\nawait sdb.done();\n```"}
{"prompt":"Can I clone a column and then modify the new column's data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clone the column first\nawait table.cloneColumn('original', 'cloned');\n// Then modify the cloned column\nawait table.addColumn('cloned', 10); // Example modification\nawait sdb.done();\n```"}
{"prompt":"Can I reduce the precision of geometries to zero decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Reduce the precision of geometries to 0 decimal places\nawait table.reducePrecision(0);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to calculate a quantile with a value outside the range of 0 to 1?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// The documentation does not specify the behavior if the quantile is outside the range of 0 to 1.\n// It's best to ensure the quantile value is within the valid range.\nconst invalidQuantile = await table.getQuantile(\"column1\", 1.5);\nconsole.log(invalidQuantile);\nawait sdb.done();\n```"}
{"prompt":"What data type will the new column created by `typeGeo` have?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column 'geometryType' with the type of each geometry\nawait table.typeGeo(\"geometryType\");\n\n// The new column will contain string values representing the geometry type (e.g., \"POINT\", \"LINESTRING\", \"POLYGON\").\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the standard deviation of a numeric column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the standard deviation of the 'age' column\nconst ageStdDev = await table.getStdDev('age');\nconsole.log(ageStdDev);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get the skewness of a non-numeric column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// This will likely throw an error if 'name' is not a numeric column.\n// You should handle potential errors with a try-catch block.\ntry {\n  const nameSkew = await table.getSkew(\"name\");\n  console.log(nameSkew);\n} catch (error) {\n  console.error(\"Error getting skew:\", error);\n}\nawait sdb.done();\n```"}
{"prompt":"Can I load multiple arrays into the same table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// First array of data\nconst data1 = [\n  { letter: 'a', number: 1 },\n];\nawait table.loadArray(data1);\n\n// Second array of data\nconst data2 = [\n  { letter: 'b', number: 2 },\n];\nawait table.loadArray(data2);\n\nawait sdb.done();"}
{"prompt":"How can I cache the generated embeddings locally to avoid making repeated API calls?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n// await table.loadData(\"your_data.csv\");\n\nawait table.aiEmbeddings(\"text_column\", \"embeddings\", { cache: true });\n\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table and filter the rows based on a condition using a WHERE clause?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"data/sample.csv\");\n// Clone tableA, including only rows where 'column1' is greater than 10\nconst tableB = await tableA.cloneTable({ conditions: `column1 > 10` });\nawait sdb.done();\n```"}
{"prompt":"Can I compute proportions within multiple categories at the same time?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute proportions within multiple categories\nawait table.proportionsVertical('sales', 'sales_proportion', {\n  categories: ['region', 'product_type']\n});\nawait sdb.done();\n```"}
{"prompt":"How do I compute the intersection of geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute the intersection of geometries\nawait table.aggregateGeo('intersection');\nawait sdb.done();\n```"}
{"prompt":"How do I filter the bottom 10 rows to only include rows where the 'category' column equals 'Electronics'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst bottom10Electronics = await table.getBottom(10, {\n  conditions: `category === 'Electronics'`\n});\nconsole.log(bottom10Electronics);\nawait sdb.done();\n```"}
{"prompt":"If I want to create a new table containing only the first 20 rows, how would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst newTable = await table.selectRows(20, { outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"How does the getGeoData method handle different projections?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// If the geometry column's projection is WGS84 or EPSG:4326, coordinates are flipped to [longitude, latitude]\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to check if a table exists before removing it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check if the table exists before removing\nif (table.exists()) {\n  await table.removeTable();\n}\nawait sdb.done();\n```"}
{"prompt":"What does the `toWGS84` option do when loading geospatial data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadGeoData(\"./some-data.shp.zip\", { toWGS84: true });\n// This will attempt to reproject the data to WGS84 with [latitude, longitude] axis order.\n\nawait sdb.done();\n```"}
{"prompt":"Is the `getTable` method asynchronous? What does that mean?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// The getTable method is asynchronous, meaning it returns a Promise.\n// This allows the operation to happen in the background without blocking\n// the main thread.\n\nconst myTable = await sdb.getTable(\"myTable\");\n\n// The 'await' keyword pauses execution until the Promise resolves.\n\nawait sdb.done();\n```"}
{"prompt":"Can I use the right method to get only the first character of a string?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract the first character by specifying 1 as the number of characters\nawait table.right('columnName', 1);\nawait sdb.done();\n```"}
{"prompt":"How do I combine multiple conditions to remove rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'price' is less than 100 AND 'quantity' is 0\nawait table.removeRows(`price < 100 && quantity === 0`);\nawait sdb.done();\n```"}
{"prompt":"How do I use the latLon method with a different column name?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract latitude and longitude from 'geometry' column into 'latitude' and 'longitude' columns\nawait table.latLon('geometry', 'latitude', 'longitude');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use regular expressions for replacements?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use regex to replace all digits with a hyphen\nawait table.replace('columnName', { '\\d+': '-' }, { regex: true });\n\nawait sdb.done();\n```"}
{"prompt":"How can I specify an output table for aiVectorSimilarity?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Specify an output table for the results\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    outputTable: 'similar_results'\n  }\n);\n\n// Log the results from the new table\nawait sdb.getTable('similar_results').logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I use getExtent to compare two different columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get extent for two different columns and compare\nconst extent1 = await table.getExtent('column1');\nconst extent2 = await table.getExtent('column2');\nconsole.log('Column 1:', extent1);\nconsole.log('Column 2:', extent2);\n\nawait sdb.done();"}
{"prompt":"How do I fix invalid geometries in my table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fix invalid geometries in the default geometry column\nawait table.fixGeo();\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the outputTable option?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a left join and overwrite the current table\nawait tableA.join(tableB);\n\nawait sdb.done();\n```"}
{"prompt":"Can I concatenate more than two columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Concatenate 'street', 'city', and 'country' into 'fullAddress'\nawait table.concatenate(['street', 'city', 'country'], 'fullAddress', { separator: ', ' });\n\nawait sdb.done();\n```"}
{"prompt":"What happens if the two geometry columns have different projections?","completion":"```ts\n// The operation will throw an error since both columns must have the same projection.\n// Ensure that 'geomA' and 'geomB' are in the same projection before calling intersection.\nawait table.intersection('geomA', 'geomB', 'intersectGeom');\n```"}
{"prompt":"How do I summarize 'sales' by 'region' with custom named summary operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.summarize({ values: 'sales', categories: 'region', summaries: { averageSales: 'mean', totalSales: 'sum' } });\nawait sdb.done();\n```"}
{"prompt":"How do I ensure the returned data types match my query?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst result = await sdb.customQuery(\n  'SELECT id, name FROM employees',\n  {\n    returnDataFrom: 'query',\n    types: {\n      id: 'number',\n      name: 'string'\n    }\n  }\n);\nconsole.log(result);\nawait sdb.done();\n```"}
{"prompt":"How do I compute the correlation between two specific columns in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute correlation between 'column1' and 'column2'\nawait table.correlations({ x: \"column1\", y: \"column2\" });\nawait sdb.done();\n```"}
{"prompt":"Can I capitalize multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Capitalize the first letter of each string in 'column1' and 'column2'\nawait table.capitalize(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"Is it possible to adjust the width of the histogram bars?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Set histogram bar width to 50 characters for 'price' column\nawait table.logHistogram('price', { width: 50 });\nawait sdb.done();\n```"}
{"prompt":"Can I insert rows from a SimpleTable instance directly, or do I need to provide the table name as a string?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst targetTable = sdb.newTable();\nconst sourceTable = sdb.newTable();\n\nawait targetTable.insertTables(sourceTable);\nawait sdb.done();\n```"}
{"prompt":"How can I log both the column names and their data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log column names along with their types\nawait table.logColumns({ types: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use logical operators like AND and OR in the conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use logical operators in conditions\nconst filteredData = await table.getData({ conditions: 'category === \"Book\" && price > 10' });\nconsole.log(filteredData);\n\nawait sdb.done();\n```"}
{"prompt":"What units are used for the buffer distance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.buffer(\"bufferedGeom\", 2); // The distance is in the units of the geometry's SRS.\nawait sdb.done();\n```"}
{"prompt":"Can I write compressed Parquet files?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./output.parquet', { compression: true });\nawait sdb.done();\n```"}
{"prompt":"How do I make the histogram display in a compact format?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Display histogram in compact format for 'salary' column\nawait table.logHistogram('salary', { compact: true });\nawait sdb.done();\n```"}
{"prompt":"Can I chain other methods after calling logNbRows()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Chain other methods after logNbRows()\nawait table.logNbRows().then(() => {\n  console.log('Row count logged successfully!');\n});\nawait sdb.done();\n```"}
{"prompt":"If I don't specify any options, what does `proportionsVertical` do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsVertical(\"myColumn\", \"myColumnProportion\");\nawait sdb.done();\n```\n// It calculates the proportion of each value in 'myColumn' relative to the total sum of 'myColumn', without rounding."}
{"prompt":"How do I summarize data in a SimpleTable to count occurrences and sum values by category?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.summarize({\n  values: \"valueColumn\",\n  categories: \"categoryColumn\",\n  summaries: [\"count\", \"sum\"],\n  decimals: 0,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the last 7 rows where the 'price' is greater than 100?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst bottom7Price = await table.getBottom(7, { conditions: \"price > 100\" });\nconsole.log(bottom7Price);\nawait sdb.done();\n```"}
{"prompt":"What data type will the `getMin` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst minValue = await table.getMin(\"someColumn\");\nconsole.log(typeof minValue); // Could be string, number, boolean, Date, or null\nawait sdb.done();\n```"}
{"prompt":"How do I write geospatial data to a GeoJSON file using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Write geospatial data to a GeoJSON file\nawait table.writeGeoData('./output.geojson');\nawait sdb.done();\n```"}
{"prompt":"Can I use getExtent to find the range of values in a numeric column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the range of a numeric column\nconst numericExtent = await table.getExtent('numeric_column');\nconsole.log(numericExtent); // Output: [min, max]\n\nawait sdb.done();"}
{"prompt":"Can I use getValues to retrieve boolean values from a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all boolean values from the 'isActive' column\nconst isActiveValues = await table.getValues('isActive');\nconsole.log(isActiveValues); // e.g., [true, false, true]\n\nawait sdb.done();```"}
{"prompt":"How can I convert a string column containing numbers with commas to a float type?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'amount' to float (commas will be removed automatically)\nawait table.convert({ amount: \"float\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I iterate over all tables and perform an operation on each?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Iterate over all tables and log their names\nconst tables = await sdb.getTables();\ntables.forEach(table => {\n  console.log('Processing table:', table.name);\n  // Add your operations here\n});\nawait sdb.done();\n```"}
{"prompt":"How do I create a basic dot chart using `logDotChart`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 },\n  { date: new Date(\"2023-03-01\"), value: 30 },\n  { date: new Date(\"2023-04-01\"), value: 40 },\n];\nawait table.loadArray(data);\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\nawait table.logDotChart(\"date\", \"value\");\nawait sdb.done();\n```"}
{"prompt":"How do I transform closed linestring geometries into polygon geometries using the linesToPolygons method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Transform closed linestrings in the default geometry column into polygons\nawait table.linesToPolygons();\nawait sdb.done();\n```"}
{"prompt":"How do I use `aiVectorSimilarity` with Ollama?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n\nconst similarResults = await table.aiVectorSimilarity(\n  \"your search query\",\n  \"your embeddings column\",\n  5, // Number of results\n  {\n    ollama: true, // Use Ollama\n  },\n);\n\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"What if I want to compute a rolling aggregation without any following or preceding rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling average with no preceding or following rows (only current row)\nawait table.rolling('value', 'currentValue', 'mean', 0, 0);\n\nawait sdb.done();\n```"}
{"prompt":"What if the geometry column doesn't exist?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempting to buffer a non-existent column will throw an error\ntry {\n  await table.buffer('nonExistentBuffer', 1, { column: 'nonExistentGeom' });\n} catch (error) {\n  console.error('Error:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"Can I dynamically check for column existence based on user input?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check for column existence based on user input\nconst userInputColumn = 'age'; // This could come from user input\nif (await table.hasColumn(userInputColumn)) {\n  console.log(`The column ${userInputColumn} exists`);\n} else {\n  console.log(`The column ${userInputColumn} does not exist`);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How does the sample method handle different data types for quantity?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Quantity can be a number or a percentage string\nawait table.sample(100); // Number of rows\nawait table.sample('10%'); // Percentage of rows\nawait sdb.done();\n```"}
{"prompt":"What data type should the `names` parameter be when using `renameColumns`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst columnRenames = {\n  \"oldName\": \"newName\",\n  \"anotherOld\": \"anotherNew\"\n};\nawait table.renameColumns(columnRenames);\nawait sdb.done();\n```\nThe `names` parameter should be an object (Record<string, string>) where the keys are the old column names and the values are the new column names."}
{"prompt":"Can I load an array of objects where some values are null or undefined?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Array with null and undefined values\nconst data = [\n  { id: 1, name: 'Alice', score: null },\n  { id: 2, name: undefined, score: 90.1 },\n];\nawait table.loadArray(data);\n\nawait sdb.done();"}
{"prompt":"What happens if I reproject to WGS84 (EPSG:4326) and the geometries are in a different axis order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Reproject geometries to WGS84 (EPSG:4326), resulting in [latitude, longitude] axis order\nawait table.reproject(\"WGS84\");\nawait sdb.done();\n```"}
{"prompt":"Is there a way to suppress the output of logTypes()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// You can suppress the output by not using console.log or similar functions\nconst result = await table.logTypes();\n// No output will be generated\nawait sdb.done();\n```"}
{"prompt":"Does `fixGeo` modify the original table data, or does it create a new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// fixGeo modifies the existing table in place.\nawait table.fixGeo();\nawait sdb.done();\n```"}
{"prompt":"What happens if I rename a table multiple times?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('oldName');\nawait table.loadData('path/to/your/data.csv');\n// First rename\nawait table.renameTable('newName');\n// Second rename\nawait table.renameTable('finalName');\nawait sdb.done();\n```"}
{"prompt":"Can I chain logBarChart with other methods?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.summarize({\n  categories: 'category',\n  values: 'value',\n  summaries: ['sum'],\n})\n  .then(() => table.logBarChart('category', 'sum'));\nawait sdb.done();\n```"}
{"prompt":"How can I set a time limit for how long the cached data is considered valid?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n}, { ttl: 60 });\n\nawait sdb.done();\n```"}
{"prompt":"How can I compute correlations for all numeric columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute correlations for all numeric columns\nawait table.correlations();\nawait sdb.done();\n```"}
{"prompt":"What data types should I expect in the new columns created by `longer`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.longer(['Year1', 'Year2'], 'Year', 'Value');\n\n// After calling longer, you can check the data types:\nawait table.logTable({ types: true });\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to add a row number column that already exists?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Adding a row number column that already exists will overwrite it\nawait table.addRowNumber('existingColumn');\nawait sdb.done();\n```"}
{"prompt":"What happens if multiple rows match the condition I provide to `getRow`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// This will throw an error if multiple rows match.\n// Assuming multiple rows have status = 'active'\n// const activeRows = await table.getRow(`status = 'active'`);\n// console.log(activeRows);\nawait sdb.done();\n```"}
{"prompt":"How can I join tables based on a specified distance using the `within` method?","completion":"When using the `within` method, you need to specify the distance. Here's an example with a distance of 10 units (SRS):"}
{"prompt":"Is there a limit to how many rows I can retrieve with getTop?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// You can specify any number, but it's limited by the table size\nconst topNRows = await table.getTop(100);\nconsole.log(topNRows);\nawait sdb.done();\n```"}
{"prompt":"What if the column name has special characters?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use the exact column name, including special characters if any\nconst variance = await table.getVar('column_name_with_special_chars');\nconsole.log(variance);\n\nawait sdb.done();\n```"}
{"prompt":"How do I replace strings in a specific column and log the changes?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Replace strings in 'columnName'\nawait table.replace('columnName', { 'oldString': 'newString' });\n\n// Log the updated table to verify changes\nawait table.logTable();\n\nawait sdb.done();\n```"}
{"prompt":"How do I log the column names and their data types?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logColumns({ types: true });\nawait sdb.done();\n```"}
{"prompt":"How do I use `writeChart` to create a simple scatter plot from my table data?","completion":"```ts\nimport { dot, plot } from '@observablehq/plot';\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [{ x: 1, y: 2 }, { x: 3, y: 4 }];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: 'x', y: 'y' }),\n    ],\n  });\n\nconst outputPath = 'output/scatter.png';\n\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"Can I chain getMin with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Chain getMin with other operations\nconst minPrice = await table.getMin('price');\nconsole.log(`Minimum price: ${minPrice}`);\n\nawait sdb.done();```"}
{"prompt":"How do I remove all rows where a specific column has a certain value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'status' is 'inactive'\nawait table.remove({ status: 'inactive' });\nawait sdb.done();\n```"}
{"prompt":"How do I load data into a table if the file is not in CSV format?","completion":"The `loadData` method can handle different file formats. Replace 'csv' with the appropriate extension.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait table.loadData('path/to/your/data.json');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to assign ranks without gaps (dense ranking)?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.ranks(\"salary\", \"salaryRank\", { categories: \"department\", noGaps: true });\nawait sdb.done();\n```"}
{"prompt":"If I specify a string for `outputTable`, what happens?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst regressionTable = await table.linearRegressions({ outputTable: \"myRegressionTable\" });\n\nawait sdb.done();\n```\n// A new table named \"myRegressionTable\" will be created with the results."}
{"prompt":"Can I use a variable to store the table name and then pass that variable to the `hasTable` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst tableName = \"orders\";\nconst exists = await sdb.hasTable(tableName);\nconsole.log(exists); // Output: true or false\nawait sdb.done();\n```"}
{"prompt":"How do I load data from an array of objects into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Define an array of objects representing rows\nconst data = [\n  { letter: \"a\", number: 1 },\n  { letter: \"b\", number: 2 },\n];\n\n// Load the data into the table\nawait table.loadArray(data);\n\nawait sdb.done();\n```"}
{"prompt":"How do I use the `capitalize` method with a table that already has data loaded?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.capitalize(\"myColumn\");\nawait sdb.done();\n```"}
{"prompt":"How do I write the data from a SimpleTable to a Parquet file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.writeData(\"output/data.parquet\");\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the geometry column, how does the method know which column contains the geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.isClosedGeo(\"isClosed\");\nawait sdb.done();\n```\n//The method automatically attempts to find a geometry column if the 'column' option is not provided."}
{"prompt":"How do I get the last row with multiple conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get last row with multiple conditions\nconst lastRowMultiple = await table.getLastRow({\n  conditions: `category === 'Book' && price > 10 && date < '2024-01-01'`,\n});\nconsole.log(lastRowMultiple);\n\nawait sdb.done();\n```"}
{"prompt":"Can I calculate Z-scores for multiple categories at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate Z-scores for 'sales' within each combination of 'region' and 'year'\nawait table.zScore('sales', 'salesZScore', { categories: ['region', 'year'] });\nawait sdb.done();\n```"}
{"prompt":"What is the difference between specifying a column and not specifying one in unnestGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Without a column, it uses the default geometry column\nawait table.unnestGeo();\n// With a column, it unnests geometries from that specific column\nawait table.unnestGeo('customGeometryColumn');\nawait sdb.done();\n```"}
{"prompt":"How do I get a list of all table names in the database using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log('Table names:', tableNames);\nawait sdb.done();\n```"}
{"prompt":"Does `removeTable()` return any value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst result = await table.removeTable(); // removeTable() returns a Promise<void>, so result will be undefined.\nconsole.log(result); // Output: undefined\nawait sdb.done();\n```"}
{"prompt":"Can I use getBoundingBox with a column that has mixed data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Using getBoundingBox with a column that may have mixed data types\ntry {\n  const bbox = await table.getBoundingBox('mixedDataColumn');\n  console.log('Bounding Box:', bbox);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How can I use Vertex AI with aiVectorSimilarity?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use Vertex AI for similarity search\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    vertex: true,\n    project: 'my-gcp-project',\n    location: 'us-central1'\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I prevent errors when inserting tables with different columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Insert rows from 'tableB' into 'tableA', unifying columns\nawait tableA.insertTables(tableB, { unifyColumns: true });\n\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL-like conditions with the `getLastRow` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst lastRow = await table.getLastRow({\n  conditions: \"category = 'Book'\",\n});\nconsole.log(lastRow);\nawait sdb.done();\n```"}
{"prompt":"How do I control the number of rows logged when displaying table data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"log_table\", undefined, undefined, { nbRowsToLog: 5 });\n// This creates a SimpleTable named 'log_table' and logs only the first 5 rows.\nawait sdb.done();\n```"}
{"prompt":"What data type is returned by the `getUniques` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst uniqueValues = await table.getUniques(\"columnName\");\nconsole.log(typeof uniqueValues);\nawait sdb.done();\n```"}
{"prompt":"How can I combine ranking options, like descending order and multiple categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rank 'sales' in descending order within each 'department'\nawait table.ranks('sales', 'descSalesRank', { \n  order: 'desc',\n  categories: 'department'\n});\nawait sdb.done();\n```"}
{"prompt":"What if I need to insert rows in batches?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Batch 1\nconst batch1 = [\n  { id: 6, name: 'Kate' },\n];\nawait table.insertRows(batch1);\n\n// Batch 2\nconst batch2 = [\n  { id: 7, name: 'Luke' },\n];\nawait table.insertRows(batch2);\n\nawait sdb.done();```"}
{"prompt":"What is the difference between passing a string or an array to removeColumns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Passing a single string removes one column\nawait table.removeColumns('singleColumn');\n// Passing an array removes multiple columns\nawait table.removeColumns(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometry columns I'm trying to intersect don't have the same projection?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation states that both columns must have the same projection.\n// If they don't, the behavior is undefined and may result in errors or incorrect results.\n// It's crucial to ensure the projections are consistent before using the intersect method.\n\n// Example of what NOT to do if projections are different:\n// await table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide any options when calling simplify?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Simplify geometries using default column and settings\nawait table.simplify(0.1);\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior when writing a database file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// By default, metadata files are included\nawait sdb.writeDB('./my_exported_database.db');\nawait sdb.done();\n```"}
{"prompt":"How can I log the descriptive statistics in a readable format?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get and log descriptive statistics in a readable format\nconst description = await table.getDescription();\nconsole.table(description);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if the latitude or longitude columns don't exist?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If 'lat' or 'lon' columns don't exist, this will throw an error\nawait table.points('invalid_lat', 'lon', 'geom');\n// Error: Column 'invalid_lat' not found in the table\nawait sdb.done();\n```"}
{"prompt":"How do I specify the context window size for Ollama models?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n\nconst similarResults = await table.aiVectorSimilarity(\n  \"your search query\",\n  \"your embeddings column\",\n  5, // Number of results\n  {\n    ollama: true, // Use Ollama\n    contextWindow: 2048, // Set the context window size\n  },\n);\n\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"Is there a default number of decimal places if I don't specify it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// No, you must specify the number of decimals. Here's an example with 3 decimals:\nawait table.reducePrecision(3);\nawait sdb.done();\n```"}
{"prompt":"What happens if I provide an invalid column name in the `columns` array?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// This will likely throw an error if 'InvalidColumn' doesn't exist.\n// The documentation doesn't specify the exact error, but it's reasonable to expect one.\ntry {\n  await table.longer(['InvalidColumn', 'Year'], 'Year', 'Value');\n} catch (error) {\n  console.error(error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve a list of all tables in the SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n\n// You can then iterate through the tables array\n// to access each SimpleTable instance.\n// for (const table of tables) {\n//   console.log(table.tableName);\n// }\n\nawait sdb.done();\n```"}
{"prompt":"How do I keep rows that match multiple conditions across different columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'job' is 'accountant' or 'developer', AND 'city' is 'Montreal'\nawait table.keep({ job: ['accountant', 'developer'], city: 'Montreal' });\nawait sdb.done();\n```"}
{"prompt":"What happens if my table doesn't have any geometry columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// If the table doesn't have any geometry columns, the nbVertices method will likely throw an error.\n// It's best to ensure a geometry column exists before calling nbVertices.\n// You might want to add error handling to catch this case.\n\ntry {\n  await table.nbVertices(\"vertexCount\");\n} catch (error) {\n  console.error(\"Error adding vertex counts:\", error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with a default name?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst dataTable = sdb.newTable(); // Creates a table with a default name like 'table1'\nawait sdb.done();\n```"}
{"prompt":"How do I insert an empty array of rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst emptyArray: Record<string, unknown>[] = [];\nawait table.insertRows(emptyArray);\nawait sdb.done();\n```"}
{"prompt":"After loading data, how can I verify the number of columns loaded correctly?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst columnCount = await table.getNbColumns();\nconsole.log(\"Number of columns:\", columnCount);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to check the data types without logging them?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// You can access the column types through the table's properties\nconsole.log(table.columnTypes); // This will show the data types of all columns\nawait sdb.done();\n```"}
{"prompt":"Can I compress the output GeoParquet file? How?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeGeoData(\"./output.geoparquet\", { compression: true });\nawait sdb.done();\n```"}
{"prompt":"How do I convert a date string in the format 'YYYY-MM-DD' to a datetime type in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'date_str' to datetime using format %Y-%m-%d\nawait table.convert({ date_str: \"datetime\" }, { datetimeFormat: \"%Y-%m-%d\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I sort multiple columns with different orders?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Sort 'column1' ascending and 'column2' descending\nawait table.sort({ column1: 'asc', column2: 'desc' });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to customize the IQR multiplier for outlier detection?","completion":"The current implementation uses a fixed 1.5 multiplier. There's no option to change this value in the method parameters."}
{"prompt":"What data type does the `getNbRows` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst nbRows = await table.getNbRows();\nconsole.log(typeof nbRows); // Output: number\nawait sdb.done();\n```"}
{"prompt":"How do I handle multiple categories in the rolling method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling average within multiple categories\nawait table.rolling('score', 'rollingAvgScore', 'mean', 3, 1, {\n  categories: ['categoryA', 'categoryB']\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I select 100 rows starting from row 50 and modify the current table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select 100 rows starting from row 50 (offset: 49)\nawait table.selectRows(100, { offset: 49 });\nawait sdb.done();\n```"}
{"prompt":"How can I get the last 3 rows of my table while preserving their original order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst bottom3OriginalOrder = await table.getBottom(3, { originalOrder: true });\nconsole.log(bottom3OriginalOrder);\nawait sdb.done();\n```"}
{"prompt":"How do I perform an inner join with specific geometry columns and store results in a new table?","completion":"To perform an inner join with custom geometry columns and create a new table, you can specify the `leftTableColumn`, `rightTableColumn`, `type`, and set `outputTable` to `true`:"}
{"prompt":"What format will the column data types be returned in?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst dataTypes = await table.getTypes();\nconsole.log(dataTypes);\n// The output will be an object like: { \"column1\": \"VARCHAR\", \"column2\": \"BIGINT\" }\nawait sdb.done();\n```"}
{"prompt":"Can I remove columns in a case-insensitive manner?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove columns case-insensitively (e.g., 'TEMPCOLUMN')\nawait table.removeColumns('tempColumn');\nawait sdb.done();\n```"}
{"prompt":"Does `flipCoordinates` modify the original table data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.flipCoordinates(); // Yes, the method directly manipulates the coordinate order in the specified column.\nawait sdb.done();\n```"}
{"prompt":"Can I use the `inside` method with different geometry types (e.g., lines inside polygons)?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation doesn't explicitly state supported geometry types.\n// However, it implies that the method checks for containment, so it should work\n// as long as the containment relationship is meaningful for the geometry types.\n// For example, lines inside polygons or points inside polygons.\n\n// Example: Check if lines in 'lineGeom' are inside 'polygonGeom'\nawait table.inside(\"lineGeom\", \"polygonGeom\", \"isLineInsidePolygon\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I use getMin on boolean columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get minimum value from a boolean column\nconst minBoolean = await table.getMin('boolean_column');\nconsole.log(`Minimum boolean value: ${minBoolean}`);\n\nawait sdb.done();```"}
{"prompt":"Is there a way to check if the inside method completed successfully?","completion":"```ts\n// The method returns a Promise, so wrapping it in a try-catch block can help handle errors\ntry {\n  await table.inside('pointGeom', 'polygonGeom', 'isInside');\n  console.log('Containment check completed successfully');\n} catch (error) {\n  console.error('Error during containment check:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"Can I compute proportions for columns with different data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Ensure columns are numeric before computing proportions\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary']);\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to replace NULL values in all columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get all column names and replace NULL values in each\nconst columns = await table.getColumnNames();\nawait table.replaceNulls(columns, 'N/A');\nawait sdb.done();\n```"}
{"prompt":"How do I summarize data in a SimpleTable by counting occurrences and summing values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myData');\nawait table.loadData('path/to/data.csv');\n// Summarize data by counting and summing specific columns\nawait table.summarize({\n  values: 'amount',\n  categories: 'category',\n  summaries: ['count', 'sum'],\n  decimals: 2\n});\nawait sdb.done();\n```"}
{"prompt":"How do I log the extent of a numeric column in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the extent of a numeric column\nawait table.logExtent('price');\nawait sdb.done();\n```"}
{"prompt":"How do I fill holes in the default geometry column of a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Fill holes in the default geometry column\nawait table.fillHoles();\nawait sdb.done();\n```"}
{"prompt":"How can I add a new column that is the sum of two numerical columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new column 'totalSales' as the sum of 'sales1' and 'sales2'\nawait table.addColumn('totalSales', 'float', 'sales1 + sales2');\nawait sdb.done();\n```"}
{"prompt":"How do I verify the existence of multiple tables in the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check existence of multiple tables\nconst table1Exists = await sdb.hasTable('table1');\nconst table2Exists = await sdb.hasTable('table2');\nconsole.log('table1 exists:', table1Exists);\nconsole.log('table2 exists:', table2Exists);\nawait sdb.done();\n```"}
{"prompt":"How can I set fixed scales for all small multiples?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A' },\n  { date: new Date('2023-03-01'), value: 30, category: 'A' },\n  { date: new Date('2023-04-01'), value: 40, category: 'A' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B' },\n  { date: new Date('2023-03-01'), value: 35, category: 'B' },\n  { date: new Date('2023-04-01'), value: 45, category: 'B' },\n];\n\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', {\n  smallMultiples: 'category',\n  fixedScales: true,\n});\n\nawait sdb.done();\n```"}
{"prompt":"What if I want to set a varchar type for a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  username: 'varchar'\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use getSkew on a column that has missing values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate skewness on a column with missing values\nconst skewnessWithMissing = await table.getSkew('columnWithMissingValues');\nconsole.log('Skewness with Missing Values:', skewnessWithMissing);\n\nawait sdb.done();\n```"}
{"prompt":"How do I specify the path where the map image will be saved?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./path/to/your/data.geojson\");\n\nconst mapFunction = (geoJsonData: { features: { properties: Record<string, unknown> }[] }) => {\n  // Your Observable Plot code here\n  return plot({});\n};\n\nconst outputPath = \"./output/map.png\";\nawait table.writeMap(mapFunction, outputPath);\n```\nThe `path` parameter in the `writeMap` method specifies the absolute path where the map image will be saved. For example, `./output/map.png`."}
{"prompt":"How do I create a buffer around geometries using the default geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create a buffer of 1 unit around geometries in the default column\nawait table.buffer('bufferedGeom', 1);\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the column is empty?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// This will throw an error if 'emptyColumn' is empty\ntry {\n  const medianValue = await table.getMedian('emptyColumn');\n  console.log('Median:', medianValue);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I use `splitExtract` with an empty string as the separator?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Using an empty string as a separator is not a valid use case for splitExtract.\n// It's designed to split based on a non-empty delimiter.\n// The behavior is undefined and likely won't produce the desired result.\nawait sdb.done();\n```"}
{"prompt":"Is there a way to specify multiple columns for `columnsTo` and `valuesTo`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// longer only accepts single column names for columnsTo and valuesTo\n// So you cannot specify multiple columns here\nawait table.longer(['2021', '2022', '2023'], 'year', 'employees');\n\nawait sdb.done();\n```"}
{"prompt":"How do I check if a column exists before attempting to rename it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check if 'oldColumn' exists before renaming\nif (await table.hasColumn('oldColumn')) {\n  await table.renameColumns({\n    oldColumn: 'newColumn',\n  });\n  console.log('Column renamed successfully');\n} else {\n  console.log('The column to rename does not exist');\n}\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide any options to the `cloneColumnWithOffset` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.cloneColumnWithOffset(\"value\", \"previous_value\");\nawait sdb.done();\n```\n// The offset will default to 1."}
{"prompt":"How do I convert a datetime string to a timestamp in milliseconds?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'datetimeColumn' to timestamp (milliseconds since epoch)\nawait table.convert({ datetimeColumn: 'timestamp' });\n\nawait sdb.done();\n```"}
{"prompt":"What file types are supported by the loadDB method?","completion":"The supported file types are `.db` (DuckDB) and `.sqlite` (SQLite)."}
{"prompt":"Can I chain renameColumns with other methods?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Chain renameColumns with other methods\nawait table.renameColumns({ 'oldColumn': 'newColumn' }).then(() => {\n  console.log('Columns renamed successfully');\n});\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows based on a date condition, such as keeping rows where a date column is after a specific date?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Keep rows where 'lastPurchaseDate' is on or after '2023-01-01'\nawait table.filter(\"lastPurchaseDate >= '2023-01-01'\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different file type to load if the extension isn't correct?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadDataFromDirectory(\"./my_data.txt\", { fileType: \"csv\" });\nawait sdb.done();\n```"}
{"prompt":"If I have a timestamp column, can I convert it to milliseconds before summarizing?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.summarize({\n  values: \"timestamp_column\",\n  toMs: true,\n  summaries: \"mean\",\n});\n\nawait sdb.done();\n```"}
{"prompt":"What if my data doesn't have a geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If there's no geometry column, this will throw an error\n// Make sure your data has a valid geometry column before calling unnestGeo\nawait table.unnestGeo();\nawait sdb.done();\n```"}
{"prompt":"Can I chain getMax with other operations, like filtering?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Filter the table first, then get max\nawait table.filter({ condition: 'column > 10' });\nconst maxValueAfterFilter = await table.getMax('filtered_column');\nconsole.log('Max after filter:', maxValueAfterFilter);\n\nawait sdb.done();```"}
{"prompt":"How can I load Excel files from a directory and specify a particular sheet to import?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { fileType: \"excel\", sheet: \"Sheet2\" });\nawait sdb.done();\n```"}
{"prompt":"How can I sort a column, 'productName', considering French collation rules?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sort({ productName: \"asc\" }, { lang: { productName: \"fr\" } });\nawait sdb.done();\n```"}
{"prompt":"Is getNbValues the same as multiplying the number of rows by columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues);\n// Yes, it's equivalent to rows * columns\nawait sdb.done();\n```"}
{"prompt":"How do I use customQuery to sort the results?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst sortedData = await sdb.customQuery(\n  'SELECT * FROM employees ORDER BY salary DESC',\n  { returnDataFrom: 'query' }\n);\nconsole.log(sortedData);\nawait sdb.done();\n```"}
{"prompt":"Does getUniques sort the unique values in ascending order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get sorted unique values from the 'date' column\nconst uniqueDates = await table.getUniques('date');\nconsole.log(uniqueDates);\n\nawait sdb.done();\n```"}
{"prompt":"Can I create multiple tables in the same database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable('table1');\nconst table2 = sdb.newTable('table2'); // Creates two tables in the same database\nawait sdb.done();\n```"}
{"prompt":"How can I filter the last row by a specific category using JavaScript syntax in the conditions?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst lastRowBooks = await table.getLastRow({\n  conditions: `category === 'Book'`,\n});\nconsole.log(lastRowBooks);\nawait sdb.done();\n```"}
{"prompt":"Can I format date columns to ISO 8601 strings when writing to GeoJSON?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", { formatDates: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL-like conditions to filter the data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst specificData = await table.getData({ conditions: \"columnName = 'someValue'\" });\nconsole.log(specificData);\nawait sdb.done();\n```"}
{"prompt":"How can I write the data as arrays in a JSON file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeData(\"./output.json\", { dataAsArrays: true });\nawait sdb.done();\n```"}
{"prompt":"How do I get a list of all table names in the SimpleDB database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\nawait sdb.done();\n```"}
{"prompt":"How does unnestGeo handle null or missing geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Null or missing geometries are skipped during unnesting\nawait table.unnestGeo();\nawait sdb.done();\n```"}
{"prompt":"What if I try to rename a column that doesn't exist in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempting to rename a non-existent column will result in no change\nawait table.renameColumns({ 'nonExistentColumn': 'newName' });\nawait sdb.done();\n```"}
{"prompt":"How do I fill NULL values in a single column using the fill method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill NULL values in 'sales' column with the previous non-NULL value\nawait table.fill('sales');\nawait sdb.done();\n```"}
{"prompt":"How can I specify the name of the new cloned table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"path/to/your/data.csv\");\n\nconst tableB = await tableA.cloneTable(\"my_cloned_table\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I convert a single column's string values to uppercase using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert 'columnName' to uppercase\nawait table.upper('columnName');\nawait sdb.done();\n```"}
{"prompt":"How do I determine the data type of a specific column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconst columnDataType = schema.find(col => col.name === 'columnName')?.dataType;\nconsole.log('Column data type:', columnDataType); // Log the data type of a specific column\n\nawait sdb.done();\n```"}
{"prompt":"If I don't call `selectTables`, will all tables remain in the database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// No call to selectTables\n// All tables will remain in the database.\nawait sdb.done();\n```"}
{"prompt":"How do I remove multiple tables from a SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable('table1');\nawait table1.loadData('path/to/data1.csv');\nconst table2 = sdb.newTable('table2');\nawait table2.loadData('path/to/data2.csv');\n// Remove both tables\nawait table1.removeTable();\nawait table2.removeTable();\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't sort the data before accumulating?","completion":"```ts\n// It's important to sort your data before accumulating.\n// Here's an example of what NOT to do:\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Do NOT accumulate without sorting first\n// await table.accumulate('sales', 'cumulativeSales'); // Bad practice\nawait sdb.done();\n```"}
{"prompt":"How do I check if a table has a column named 'id'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst hasIdColumn = await table.hasColumn(\"id\");\nconsole.log(hasIdColumn); // Output: true or false\nawait sdb.done();\n```"}
{"prompt":"Can I convert multiple columns to uppercase at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.upper([\"col1\", \"col2\", \"col3\"]);\\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the first 5 rows of my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst top5 = await table.getTop(5);\nconsole.log(top5);\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the table doesn't exist?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\ntry {\n  await sdb.selectTables('nonexistent'); // This will throw an error if 'nonexistent' doesn't exist\n} catch (error) {\n  console.error('Table not found:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I write data to a SQLite database file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./my_database.sqlite');\nawait sdb.done();\n```"}
{"prompt":"My geometry data is stored in a column named 'landParcelGeom'. How do I calculate the perimeter using this column and store the result in 'landParcelPerimeter'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.perimeter(\"landParcelPerimeter\", { column: \"landParcelGeom\" });\nawait sdb.done();\n```"}
{"prompt":"Can I insert rows with different data types in the same column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst mixedRows = [\n  { letter: \"f\", number: 6 },\n  { letter: \"g\", number: \"7\" }, // Number is a string\n];\n// The documentation doesn't specify how mixed data types are handled.\nawait table.insertRows(mixedRows);\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometries in column1 and column2 have different projections?","completion":"```ts\n// The method will throw an error since both columns must have the same projection.\n// Ensure that 'pointGeom' and 'polygonGeom' are in the same projection before calling inside()\nawait table.inside('pointGeom', 'polygonGeom', 'isInside');\n```"}
{"prompt":"How do I retrieve the very first row of the table without any filters?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide any options to logBarChart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Uses default width of 40 and default formatting\nawait table.logBarChart('category', 'value');\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where a specific column has a certain value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where the 'fruit' column is 'apple'\nawait table.removeRows(`fruit = 'apple'`);\nawait sdb.done();\n```"}
{"prompt":"Is it possible to round the summarized values to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.summarize({\n  values: [\"price\", \"cost\"],\n  decimals: 2,\n});\n\nawait sdb.done();\n```"}
{"prompt":"Is the `getTableNames` method synchronous or asynchronous?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Get all table names\nconst tableNames = await sdb.getTableNames(); // Using 'await' indicates it's asynchronous\nconsole.log(tableNames);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to check if the `lower` method has been applied correctly?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert 'columnName' to lowercase and log the result\nawait table.lower('columnName');\nawait table.logTable({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to compute the union of two columns with different projections?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will throw an error if 'geomA' and 'geomB' have different projections\nawait table.union('geomA', 'geomB', 'unionGeom');\n// Error message: Both columns must have the same projection\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a start value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Bins will start at the minimum value of 'value'\nawait table.bins('value', 20, 'value_bins');\nawait sdb.done();\n```"}
{"prompt":"How do I round the computed proportions to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute proportions of 'column1' rounded to 2 decimal places\nawait table.proportionsVertical(\"column1\", \"perc\", { decimals: 2 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I get the median of a column named 'age'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst medianAge = await table.getQuantile(\"age\", 0.5);\nconsole.log(medianAge);\nawait sdb.done();\n```"}
{"prompt":"What is the difference between getSum and summarize with 'sum' in SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// getSum returns the sum of a single column\nconst totalSum = await table.getSum('quantity');\nconsole.log(totalSum);\n\n// summarize with 'sum' can be used for multiple columns or grouped by categories\nawait table.summarize({\n  values: ['quantity', 'price'],\n  summaries: ['sum']\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I create an index on the embeddings column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Create an index on the embeddings column for faster searches\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    createIndex: true\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `decimals` option, how many decimal places will the result have?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst medianValue = await table.getMedian(\"age\");\nconsole.log(medianValue);\nawait sdb.done();\n```\n// The result will have the default number of decimal places for the number type in JavaScript.\n"}
{"prompt":"How can I add a new column using a SQL function?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new column 'formattedDate' using the TO_CHAR function\nawait table.addColumn('formattedDate', 'string', 'TO_CHAR(dateColumn, ''YYYY-MM-DD'')');\nawait sdb.done();\n```"}
{"prompt":"How do I apply the offset within specific categories of data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.cloneColumnWithOffset(\"temperature\", \"prev_temp_by_city\", {\n  offset: 1,\n  categories: \"city\",\n});\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that the union operation doesn't overwrite an existing column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check if 'unionGeom' exists before computing the union\nif (!(await table.columnExists('unionGeom'))) {\n  await table.union('geomA', 'geomB', 'unionGeom');\n}\nawait sdb.done();\n```"}
{"prompt":"How do I trim whitespace only from the right side of multiple columns, 'city' and 'state'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.trim([\"city\", \"state\"], { method: \"rightTrim\" });\nawait sdb.done();\n```"}
{"prompt":"How do I get the total number of values in a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues);\nawait sdb.done();\n```"}
{"prompt":"How does logNbRows() handle large datasets?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/large_dataset.csv');\n// Log row count for large datasets\nawait table.logNbRows(); // Logs the total number of rows, regardless of dataset size\nawait sdb.done();\n```"}
{"prompt":"How do I get the last row without any filtering?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last row without any filtering\nconst lastRow = await table.getLastRow();\nconsole.log(lastRow);\n\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a character, what does the `trim` method trim by default?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.trim(\"column1\"); // Trims whitespace by default\nawait sdb.done();\n```"}
{"prompt":"How do I load data from multiple JSON files into a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData([\n  './data1.json',\n  './data2.json'\n]);\nawait sdb.done();\n```"}
{"prompt":"Can I retrieve GeoJSON data if my table has multiple geometry columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Yes, specify the column name to retrieve data from a specific geometry column\nconst myGeomJson = await table.getGeoData('myGeometries');\nconsole.log(myGeomJson);\n\nawait sdb.done();\n```"}
{"prompt":"How do I overwrite the current table with regression results?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions and overwrite the current table\nawait table.linearRegressions({\n  outputTable: false\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I log the bottom 5 rows of a table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the last 5 rows (last row first)\nawait table.logBottom(5);\nawait sdb.done();\n```"}
{"prompt":"How do I use aiVectorSimilarity to find similar text content?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Generate embeddings for the 'description' column\nawait table.aiEmbeddings('description', 'embeddings');\n\n// Find 5 most similar entries to 'machine learning'\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    createIndex: true,\n    cache: true\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I get the last row of a table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last row of the table\nconst lastRow = await table.getLastRow();\nconsole.log(lastRow);\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the column might be empty?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check if column is empty before calculating mean\nif (table.isEmpty()) {\n  console.log('Column is empty, cannot calculate mean.');\n} else {\n  const meanValue = await table.getMean('numericColumn');\n  console.log('Mean:', meanValue);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where a specific column has a certain value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where 'status' is 'inactive'\nawait table.remove({ status: \"inactive\" });\n\nawait sdb.done();\n```"}
{"prompt":"How do I write the table data to a CSV file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeData(\"./output.csv\");\nawait sdb.done();\n```"}
{"prompt":"Can I remove rows using a mix of single and multiple values across different columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'age' is 25 and 'city' is either 'New York' or 'Los Angeles'\nawait table.remove({ age: 25, city: ['New York', 'Los Angeles'] });\nawait sdb.done();\n```"}
{"prompt":"How does left handle empty strings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Empty strings remain empty after left operation\nawait table.left('notes', 5);\nawait sdb.done();\n```"}
{"prompt":"How do I write the processed data to a file in Parquet format?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\nawait table.writeData(\"output/data.parquet\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I convert multiple columns to lowercase using a single call to `lower`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.lower(['col1', 'col2', 'col3']);\nawait sdb.done();\n```"}
{"prompt":"Can I use multiple columns to categorize when detecting outliers?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use multiple columns to categorize before detecting outliers in 'value'\nawait table.outliersIQR('value', 'isValueOutlier', { categories: ['region', 'year'] });\nawait sdb.done();\n```"}
{"prompt":"Can I compute a rolling aggregation without any preceding rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling maximum with no preceding rows and 4 following rows\nawait table.rolling('temperature', 'rollingMaxTemp', 'max', 0, 4);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide an outputTable option when performing a cross join?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// By default, the cross join will overwrite the current table (tableA)\nawait tableA.crossJoin(tableB);\n\nawait sdb.done();\n```"}
{"prompt":"Can I overwrite an existing column with the new geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Overwrite an existing column with the new geometries\nawait table.points('lat', 'lon', 'existing_col');\nawait sdb.done();\n```"}
{"prompt":"Can I use getSum to find the total of any numeric column in my dataset?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the sum of any numeric column, e.g., 'price'\nconst totalSum = await table.getSum('price');\nconsole.log(totalSum);\n\nawait sdb.done();\n```"}
{"prompt":"How can I select all rows from a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select all rows by using a large number as count\nawait table.selectRows(Number.MAX_SAFE_INTEGER);\nawait sdb.done();\n```"}
{"prompt":"How do I remove multiple tables at once, specifying their names?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Remove tables named 'users' and 'posts'\nawait sdb.removeTables([\"users\", \"posts\"]);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to fill NULL values with a specific value instead of the previous non-NULL?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Note: fill method only supports previous non-NULL values\n// To fill with a specific value, use replace instead\nawait table.replace({ column: 'value', from: null, to: 0 });\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the column name is incorrect when using getSum?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Handle incorrect column name with try-catch\ntry {\n  const totalSum = await table.getSum('incorrectColumnName');\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to calculate the variance of a non-numeric column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// This will likely throw an error, as the function expects a numeric column.\n// You should ensure the column you provide is numeric.\n// Example: await table.getVar(\"name\"); // This would likely cause an error.\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate geometries by category?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Aggregate geometries by 'country' category using union\nawait table.aggregateGeo('union', { categories: 'country' });\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that only entire cell values are replaced, and not substrings?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.replace(\"myColumn\", { \"oldValue\": \"newValue\" }, { entireString: true });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to dynamically select columns based on some condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Dynamically select columns based on a condition, e.g., column names containing 'price'\nconst columnsToSelect = Object.keys(table.schema).filter(col => col.includes('price'));\nawait table.selectColumns(columnsToSelect);\nawait sdb.done();\n```"}
{"prompt":"Can I filter the schema to only show certain columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconst filteredColumns = schema.filter(col => ['column1', 'column2'].includes(col.name));\nconsole.table(filteredColumns); // Log only specific columns\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column and the table doesn't have a geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Attempt to reduce precision without specifying a column.\n// This will likely result in an error if no geometry column is found.\n// The documentation doesn't specify the exact error message.\ntry {\n  await table.reducePrecision(5);\n} catch (error) {\n  console.error(\"Error reducing precision:\", error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I check the existence of a table created using a SimpleTable instance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Create a table instance\nconst myTableInstance = sdb.newTable('test_table');\n// Check if the table exists using the instance\nconst exists = await sdb.hasTable(myTableInstance);\nconsole.log('Does test_table exist?', exists); // Output: true\nawait sdb.done();\n```"}
{"prompt":"How do I set a column value based on a condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Set 'status' to 'active' where 'isActive' is true\nawait table.updateColumn(\n  'status',\n  `CASE WHEN isActive THEN 'active' ELSE 'inactive' END`\n);\nawait sdb.done();\n```"}
{"prompt":"How do I clone an existing column in a SimpleTable instance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clone the 'firstName' column as 'contactName'\nawait table.cloneColumn('firstName', 'contactName');\nawait sdb.done();\n```"}
{"prompt":"How do I handle the case where the column I'm trying to find the minimum of doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\ntry {\n  const minNonExistent = await table.getMin(\"nonExistentColumn\");\n  console.log(minNonExistent);\n} catch (error) {\n  console.error(\"Column not found or other error:\", error);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I skip the first few rows when loading a CSV file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv', { skip: 5 });\nawait sdb.done();\n```"}
{"prompt":"What does the getBoundingBox method return?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the bounding box and log its structure\nconst bbox = await table.getBoundingBox();\nconsole.log('Bounding Box:', bbox); // Output: [minLat, minLon, maxLat, maxLon]\n\nawait sdb.done();\n```"}
{"prompt":"How can I save the database without creating metadata files?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Save the database without metadata\nawait sdb.writeDB(\"./my_database.sqlite\", { noMetaData: true });\nawait sdb.done();\n```"}
{"prompt":"Can I retrieve multiple tables using getTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Retrieve multiple tables by calling getTable for each\nconst table1 = await sdb.getTable('table1');\nconst table2 = await sdb.getTable('table2');\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where getFirstRow returns null?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempt to get the first row with a condition that has no matches\nconst noMatchRow = await table.getFirstRow({\n  conditions: `category === 'NonExistentCategory'`\n});\nif (noMatchRow === null) {\n  console.log('No rows match the condition');\n} else {\n  console.log(noMatchRow);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I accumulate data across multiple files?","completion":"```ts\n// Accumulate works on the current table's data.\n// To combine data from multiple files, load them into the same table first.\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/file1.csv');\nawait table.loadData('path/to/file2.csv');\nawait table.sort({ date: 'asc' });\nawait table.accumulate('sales', 'cumulativeSales');\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `originalOrder` option, what is the default order of the returned rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst bottom3 = await table.getBottom(3);\nconsole.log(bottom3); // The last row will be the first in the returned array.\nawait sdb.done();\n```"}
{"prompt":"If I clone a column, will the new column be automatically updated when the original column changes?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Clone the 'score' column as 'backupScore'\nawait table.cloneColumn(\"score\", \"backupScore\");\n\n// The 'backupScore' column will not be automatically updated if 'score' changes.\n// You would need to manually update it if needed.\n\nawait sdb.done();\n```"}
{"prompt":"How do I perform a simple linear regression between two specific columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Perform linear regression with 'advertising' as x and 'sales' as y\nawait table.linearRegressions({\n  x: 'advertising',\n  y: 'sales'\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I add a row number column and then sort the table by it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add row number column and sort by it in descending order\nawait table.addRowNumber('rowNumber');\nawait table.sort({ rowNumber: 'desc' });\nawait sdb.done();\n```"}
{"prompt":"Can I use `getMin` on a boolean column? What would the result be?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst minBoolean = await table.getMin(\"booleanColumn\");\nconsole.log(minBoolean); // Will likely return false\nawait sdb.done();\n```"}
{"prompt":"How do I summarize all columns with all available summary operations, overwriting the current table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst columns = await table.getColumns();\nawait table.summarize({ values: columns });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the originalOrder option?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Default behavior: last row first\nconst bottom10Default = await table.getBottom(10);\nconsole.log(bottom10Default);\n\nawait sdb.done();\n```"}
{"prompt":"Can I use `getTypes` to check if a column is numeric?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the data types of all columns\nconst dataTypes = await table.getTypes();\n\n// Check if a column is numeric\nconst isNumeric = (columnName: string) => {\n  const type = dataTypes[columnName];\n  return ['BIGINT', 'DOUBLE'].includes(type);\n};\n\nconsole.log('Is the column numeric?', isNumeric('yourColumn')); // Replace 'yourColumn' with your actual column name\n\nawait sdb.done();\n```"}
{"prompt":"How do I insert a single row into the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst singleRow = [{ letter: \"a\", number: 1 }];\nawait table.insertRows(singleRow);\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the list of installed DuckDB extensions using the `getExtensions` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst extensions = await sdb.getExtensions();\nconsole.log(extensions); // Output: [{ extension_name: \"spatial\", loaded: true, ... }] \nawait sdb.done();\n```"}
{"prompt":"Can I clean column names without loading data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// No data loaded, but you can still call cleanColumnNames()\nawait table.cleanColumnNames(); // This will do nothing since there are no columns\nawait sdb.done();\n```"}
{"prompt":"Can I chain getExtent with other operations in SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Chain getExtent with other operations\nconst extent = await table.getExtent('column_name');\nconsole.log('Extent:', extent);\n\nawait sdb.done();"}
{"prompt":"How do I filter rows that meet conditions in multiple columns simultaneously?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Keep only rows where 'job' is 'accountant' or 'developer', AND 'city' is 'Montreal'\nawait table.keep({ job: [\"accountant\", \"developer\"], city: \"Montreal\" });\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join and store the result in a new table with a generated name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\n\nconst tableC = await tableA.crossJoin(tableB, { outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use logical operators in the conditions for getLastRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Using logical operators in conditions\nconst lastRowBooks = await table.getLastRow({\n  conditions: `category === 'Book' || price < 5`,\n});\nconsole.log(lastRowBooks);\n\nawait sdb.done();\n```"}
{"prompt":"Does fixGeo remove any vertices when fixing geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fix invalid geometries without removing any vertices\nawait table.fixGeo(); // No vertices are removed during the fix\nawait sdb.done();\n```"}
{"prompt":"What is the difference between using right and left methods?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Right extracts characters from the end, left from the beginning\nawait table.right('productCode', 2); // e.g., 'ABC-123' becomes '23'\nawait table.left('productCode', 3); // e.g., 'ABC-123' becomes 'ABC'\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join between two tables and overwrite the current table with the result?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\nawait tableA.loadData(\"data/tableA.csv\");\nawait tableB.loadData(\"data/tableB.csv\");\nawait tableA.crossJoin(tableB);\nawait tableA.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I handle multiple categories when accumulating data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Sort by multiple categories and relevant column first\nawait table.sort({ region: 'asc', product_category: 'asc', date: 'asc' });\nawait table.accumulate('revenue', 'cumulativeRevenue', {\n  categories: ['region', 'product_category']\n});\nawait sdb.done();\n```"}
{"prompt":"How can I aggregate geometries by a specific category column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.aggregateGeo(\"union\", { categories: \"category_column\" });\nawait sdb.done();\n```"}
{"prompt":"How do I insert multiple rows into a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Define the rows to insert\nconst newRows = [\n  { name: 'Alice', age: 30 },\n  { name: 'Bob', age: 25 },\n];\n\n// Insert the rows into the table\nawait table.insertRows(newRows);\n\nawait sdb.done();```"}
{"prompt":"How do I retrieve a row where a specific column equals a certain value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Get a row where 'city' is 'New York'\nconst newYorkRow = await table.getRow(`city = 'New York'`);\nconsole.log(newYorkRow);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to undo the removeColumns operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Once columns are removed, they cannot be undone directly\n// You would need to reload the data or revert from a backup\nawait table.removeColumns('tempColumn');\nawait sdb.done();\n```"}
{"prompt":"Can I remove tables while data is being loaded into them?","completion":"The documentation does not specify, but it is generally safe to assume that removing a table will stop any ongoing operations on it."}
{"prompt":"Is fillHoles an asynchronous operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Yes, it returns a Promise<void>\nawait table.fillHoles();\nawait sdb.done();\n```"}
{"prompt":"How do I use the `wider` method to transform my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Assuming your table has columns 'Category' and 'Value'\nawait table.wider(\"Category\", \"Value\");\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to insert rows and immediately perform an operation on the updated table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Insert rows and then sort the table\nconst newRows = [\n  { score: 95, student: 'Ivy' },\n];\nawait table.insertRows(newRows);\n\n// Sort the table by score in descending order\nawait table.sort({ score: 'desc' });\n\nawait sdb.done();```"}
{"prompt":"How do I perform an inner join and store the result in a new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nconst table2 = sdb.newTable();\n\n// Assuming table1 and table2 are loaded with data\n\nconst tableC = await table1.join(table2, { commonColumn: \"id\", type: \"inner\", outputTable: \"tableC\" });\n```"}
{"prompt":"How do I summarize multiple columns ('sales' and 'profit') with all available summary operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.summarize({ values: ['sales', 'profit'] });\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging in aiVectorSimilarity?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Enable verbose logging for debugging\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    verbose: true\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I customize the projection in my map?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    projection: {\n      type: 'albers',\n      domain: geoJsonData\n    },\n    marks: [geo(geoJsonData, { fill: 'lightgreen' })]\n  });\n};\n\nawait table.writeMap(mapFunction, './output/projection_map.png');\nawait sdb.done();\n```"}
{"prompt":"How do I list all the table names in my SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.logTableNames();\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations within specific categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute correlations within 'categoryColumn'\nawait table.correlations({ categories: 'categoryColumn' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide an options object when loading a database?","completion":"The database will be loaded with default settings: the name will be the file name without extension, and it will be detached after loading."}
{"prompt":"How can I ensure that my sampling results are repeatable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select random rows with a specific seed for repeatable results\nawait table.sample('10%', { seed: 123 });\nawait sdb.done();\n```"}
{"prompt":"How do I write the data to a Parquet file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeData(\"./output.parquet\");\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the list of installed DuckDB extensions using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\nconsole.log(extensions); // Output: [{ extension_name: 'spatial', loaded: true, ... }]\nawait sdb.done();\n```"}
{"prompt":"What is the expected order of the coordinates in the geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// The documentation states that the expected order is [latitude, longitude].\n// This code snippet doesn't demonstrate the functionality, but clarifies the coordinate order.\n\n// Example: A geometry point would be represented as [45.5, -73.6]\n\nawait sdb.done();\n```"}
{"prompt":"How do I round correlation values to a specific number of decimals?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Round correlations to 2 decimal places\nawait table.correlations({ decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"Can I select a single column using the selectColumns method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select a single column, e.g., 'productName'\nawait table.selectColumns('productName');\nawait sdb.done();\n```"}
{"prompt":"Can I use getColumns() to dynamically access data from my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Dynamically access data using column names\nconst columns = await table.getColumns();\nfor (const col of columns) {\n  console.log(`Data in ${col} column:`);\n  const data = await table.getColumn(col);\n  console.log(data);\n}\n\nawait sdb.done();\n```"}
{"prompt":"What is the difference between removing a table and deleting its data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove the table (metadata and data)\nawait table.removeTable();\n// If you only want to delete data, use clearData\n// await table.clearData();\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column named 'date_string' to a date type?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.convert({\n  date_string: \"date\"\n}, {\n  datetimeFormat: \"%Y-%m-%d\"\n});\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that a cross join does not modify the original table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a cross join and store the result in a new table without modifying tableA\nconst joinedTable = await tableA.crossJoin(tableB, { outputTable: true });\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to remove all columns except specific ones?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove all columns except 'keepColumn1' and 'keepColumn2'\nconst allColumns = await table.getColumnNames();\nconst columnsToRemove = allColumns.filter(col => !['keepColumn1', 'keepColumn2'].includes(col));\nawait table.removeColumns(columnsToRemove);\nawait sdb.done();\n```"}
{"prompt":"How do I calculate Z-scores for a column grouped by multiple categories?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.zScore(\"value\", \"valueZScore\", { categories: [\"category1\", \"category2\"] });\nawait sdb.done();\n```"}
{"prompt":"How do I log the table data along with the column types?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logTable({ types: true });\nawait sdb.done();\n```"}
{"prompt":"How can I round the correlation values to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute correlations rounded to 2 decimal places\nawait table.correlations({ decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"Does logProjections() work with all types of geospatial data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log projections assuming geospatial data is present\nawait table.logProjections();\nawait sdb.done();\n```"}
{"prompt":"How do I handle asynchronous operations when using logTypes()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use async/await to handle asynchronous operations\nasync function logDataTypes() {\n  await table.logTypes();\n  console.log('Data types have been logged.');\n}\nlogDataTypes();\nawait sdb.done();\n```"}
{"prompt":"How do I convert multiple columns at once using `convert`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert multiple columns to different types\nawait table.convert({\n  columnA: 'integer',\n  columnB: 'string',\n  columnC: 'datetime'\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate Z-scores for a column, grouped by values in another column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.zScore(\"salary\", \"salaryZScore\", { categories: \"department\" });\nawait sdb.done();\n```"}
{"prompt":"Can I specify the compression type for CSV files when loading from a directory?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { compression: 'gzip' });\nawait sdb.done();\n```"}
{"prompt":"How can I use getColumns() to validate the integrity of my dataset?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Validate column integrity\nconst expectedColumns = ['id', 'name', 'age'];\nconst actualColumns = await table.getColumns();\n\nif (actualColumns.length !== expectedColumns.length) {\n  console.error('Mismatch in number of columns!');\n}\n\nexpectedColumns.forEach(col => {\n  if (!actualColumns.includes(col)) {\n    console.error(`Missing column: ${col}`);\n  }\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I adjust the size of the chart image?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { year: 2024, value: 10 },\n  { year: 2025, value: 15 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      line(plotData, { x: 'year', y: 'value' }),\n    ],\n    width: 800,\n    height: 600,\n  });\n\nconst outputPath = './output/largeChart.png';\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"How can I store the result of a cross join in a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a cross join and store the result in a new table with a generated name\nconst joinedTable = await tableA.crossJoin(tableB, { outputTable: true });\n\nawait sdb.done();\n```"}
{"prompt":"What happens if the 'newColumn' already exists in the table?","completion":"The existing column will be overwritten with the new boolean results."}
{"prompt":"How do I get the very last row of the table without any filters?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst lastRow = await table.getLastRow();\nconsole.log(lastRow);\nawait sdb.done();\n```"}
{"prompt":"If I load data from a file, can I immediately check the number of rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\nconst nbRows = await table.getNbRows();\nconsole.log(nbRows);\nawait sdb.done();\n```"}
{"prompt":"How do I select a specific number of random rows from my table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select 100 random rows from the table\nawait table.sample(100);\nawait sdb.done();\n```"}
{"prompt":"Can I specify a separator when concatenating columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Concatenate 'city' and 'country' into 'location', separated by a comma and space\nawait table.concatenate(['city', 'country'], 'location', { separator: ', ' });\n\nawait sdb.done();\n```"}
{"prompt":"Does the `writeDB` method overwrite existing files?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// The documentation does not explicitly state if it overwrites. \n// It's best to ensure the file doesn't exist or is backed up before writing.\nawait sdb.writeDB(\"./my_database.db\");\nawait sdb.done();\n```"}
{"prompt":"How can I specify the context window for Ollama models?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Specify context window for Ollama models\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  ollama: true, // Use Ollama\n  model: 'llama2', // Specify the Ollama model\n  contextWindow: 4096 // Set context window size\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific extension, like 'spatial', is installed?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst extensions = await sdb.getExtensions();\nconst spatialExtension = extensions.find(ext => ext.extension_name === 'spatial');\n\nif (spatialExtension) {\n  console.log('Spatial extension is installed.');\n} else {\n  console.log('Spatial extension is not installed.');\n}\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows with missing values only in specific columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows with missing values only in 'firstName' or 'lastName' columns\nawait table.removeMissing({ columns: ['firstName', 'lastName'] });\nawait sdb.done();\n```"}
{"prompt":"How can I display the data types of the columns when logging the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"type_table\", undefined, undefined, { types: true });\n// This will include the data types of each column when logging the table.\nawait sdb.done();\n```"}
{"prompt":"How do I get the maximum value from a column named 'age' in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst maxAge = await table.getMax(\"age\");\nconsole.log(maxAge);\nawait sdb.done();\n```"}
{"prompt":"Can I load an empty array into the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data: Record<string, unknown>[] = [];\n\nawait table.loadArray(data);\nawait sdb.done();\n```"}
{"prompt":"Can I specify a particular geometry column when computing centroids?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute centroid using 'geomCol' and store in 'centroidCol'\nawait table.centroid('centroidCol', { column: 'geomCol' });\nawait sdb.done();\n```"}
{"prompt":"How do I execute a query that returns no data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.customQuery(\n  'DELETE FROM employees WHERE age > 60',\n  { returnDataFrom: 'none' }\n);\nawait sdb.done();\n```"}
{"prompt":"How can I store the results of linear regression in a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions and store results in a new table\nconst regressionTable = await table.linearRegressions({\n  outputTable: true\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific column exists in my table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check if the column 'age' exists in the table\nconst hasAgeColumn = await table.hasColumn('age');\nconsole.log('Does the table have an age column?', hasAgeColumn);\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the count of installed DuckDB extensions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\n// Count the number of installed extensions\nconsole.log('Number of installed extensions:', extensions.length);\nawait sdb.done();\n```"}
{"prompt":"If I want to remove rows where a column is null, how would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where 'columnName' is null\nawait table.remove({ columnName: null });\n\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a column name in the `centroid` method, what column does it use to find the geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// The method will automatically attempt to find a geometry column.\nawait table.centroid(\"center\");\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the variance of a column named 'score' in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst scoreVariance = await table.getVar(\"score\");\nconsole.log(scoreVariance);\nawait sdb.done();\n```"}
{"prompt":"How do I load an array of objects with nested properties?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Array with nested object properties\nconst data = [\n  { person: { name: 'Alice', age: 30 }, city: 'New York' },\n  { person: { name: 'Bob', age: 25 }, city: 'Los Angeles' },\n];\nawait table.loadArray(data);\n\nawait sdb.done();"}
{"prompt":"How can I format the labels in the bar chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logBarChart('category', 'value', {\n  formatLabels: (d) => `Label: ${d}`,\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use getExtent to validate data ranges in my dataset?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Validate data range using getExtent\nconst extent = await table.getExtent('data_column');\nif (extent[0] < expectedMin || extent[1] > expectedMax) {\n  console.error('Data out of expected range!');\n}\n\nawait sdb.done();"}
{"prompt":"Can I use the outliersIQR method to detect outliers in a column with multiple categories?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Identify outliers in 'price' within each 'category' and 'subCategory' group\nawait table.outliersIQR(\"price\", \"priceOutlier\", { categories: [\"category\", \"subCategory\"] });\nawait sdb.done();\n```"}
{"prompt":"How can I perform outlier detection separately for each category in a column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Identify outliers in 'salary' within each 'gender' category\nawait table.outliersIQR(\"salary\", \"salaryOutlier\", { categories: \"gender\" });\nawait sdb.done();\n```"}
{"prompt":"What does the `newColumn` parameter do in the `points` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.points(\"lat\", \"lon\", \"myPoints\");\n// The 'myPoints' column will now contain the point geometries.\nawait sdb.done();\n```"}
{"prompt":"What does the `getExtent` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst priceExtent = await table.getExtent(\"price\");\nconsole.log(priceExtent); // e.g., [2.5, 50.0]\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different name for the new column that will store the unioned geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Compute the union of geometries in 'shape1' and 'shape2', storing the result in 'merged_shape'.\nawait table.union(\"shape1\", \"shape2\", \"merged_shape\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I write geospatial data to a GeoJSON file with coordinate precision set to 6 decimal places and include metadata?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", {\n  precision: 6,\n  metadata: { source: \"SimpleDataAnalysis\" },\n});\nawait sdb.done();\n```"}
{"prompt":"How can I verify the number of values in my table after loading data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst nbValues = await table.getNbValues();\nconsole.log(`Total values: ${nbValues}`);\nawait sdb.done();\n```"}
{"prompt":"How do I specify a different geometry column when creating a buffer?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create a buffer of 10 units around geometries in the 'pointsGeom' column\nawait table.buffer('pointsBuffer', 10, { column: 'pointsGeom' });\nawait sdb.done();\n```"}
{"prompt":"Can I accumulate on a column that's not numerical?","completion":"```ts\n// Accumulate only works on numerical columns.\n// Attempting to accumulate on non-numerical data will result in an error.\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will fail if 'nonNumericColumn' is not numerical\n// await table.accumulate('nonNumericColumn', 'cumulativeData'); // Error\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging for cache operations?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({ cacheVerbose: true });\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\nawait sdb.done();\n```"}
{"prompt":"What happens if no rows match the conditions in getFirstRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempt to get the first row with a condition that has no matches\nconst noMatchRow = await table.getFirstRow({\n  conditions: `category === 'NonExistentCategory'`\n});\nconsole.log(noMatchRow); // Output will be null\nawait sdb.done();\n```"}
{"prompt":"How can I check if there are any NULL values left after replacement?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Replace NULL values and then check for any remaining NULLs\nawait table.replaceNulls('column1', 0);\nconst hasNulls = await table.hasNulls('column1');\nconsole.log('Are there any NULLs left?', hasNulls);\nawait sdb.done();\n```"}
{"prompt":"How do I specify a different column for the geometry when computing the perimeter?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute perimeter using a specific geometry column 'landParcelGeom'\nawait table.perimeter('landParcelPerimeter', { column: 'landParcelGeom' });\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that getTop returns an empty array if no rows match the condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If no rows match, it will return an empty array\nconst noMatches = await table.getTop(5, { conditions: `category === 'NonExistent'` });\nconsole.log(noMatches); // Will log [] if no matches\nawait sdb.done();\n```"}
{"prompt":"What is the return type of removeIntersection?","completion":"```ts\n// The method returns a Promise<void>, meaning it resolves when processing is complete.\nawait table.removeIntersection('geomA', 'geomB', 'geomResult');\n```"}
{"prompt":"How does replaceNulls handle different data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Replace NULL values in 'numberColumn' with 0 and 'stringColumn' with \"N/A\"\nawait table.replaceNulls('numberColumn', 0);\nawait table.replaceNulls('stringColumn', 'N/A');\nawait sdb.done();\n```"}
{"prompt":"What does logDescription() display for each column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log descriptive information including data types, null values, and distinct values\nawait table.logDescription();\nawait sdb.done();\n```"}
{"prompt":"What information is included in each object within the array returned by `getExtensions`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst extensions = await sdb.getExtensions();\n\nif (extensions.length > 0) {\n  console.log(extensions[0]); // Output: { extension_name: \"spatial\", loaded: true, ... }\n}\nawait sdb.done();\n```"}
{"prompt":"How can I check the number of tables in the SimpleDB instance after calling `getTables()`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n\n// Get the number of tables\nconst numberOfTables = tables.length;\n\n// Log the number of tables\nconsole.log(\"Number of tables:\", numberOfTables);\n\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the column names of my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst schema = await table.getSchema();\nconst columnNames = schema.map(column => column.name);\nconsole.log(columnNames);\nawait sdb.done();\n```"}
{"prompt":"Can I calculate the variance of multiple columns in one operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate variance for multiple columns by calling getVar for each column\nconst variance1 = await table.getVar('column1');\nconst variance2 = await table.getVar('column2');\nconsole.log(variance1, variance2);\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the standard deviation of a numeric column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nconst stdDev = await table.getStdDev(\"numericColumn\");\nconsole.log(stdDev);\nawait sdb.done();\n```"}
{"prompt":"If I want to calculate the distance between 'point_a' and 'point_b' and store it in 'distance_srs', what does the documentation say about the coordinate system of the input geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// The documentation states that if using 'haversine' or 'spheroid' methods,\n// the input geometries must be in the EPSG:4326 coordinate system (WGS84),\n// with [latitude, longitude] axis order.\nawait table.distance(\"point_a\", \"point_b\", \"distance_srs\", { method: \"haversine\" });\nawait sdb.done();\n```"}
{"prompt":"How do I remove a single column from a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Remove a single column named 'tempColumn'\nawait table.removeColumns(\"tempColumn\");\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging for cache-related messages?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ cacheVerbose: true });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that my geometries are valid after using fixGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fix invalid geometries and ensure validity\nawait table.fixGeo(); // This method attempts to make all geometries valid\nawait sdb.done();\n```"}
{"prompt":"Can I rank values across multiple categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rank 'sales' within each combination of 'department' and 'city'\nawait table.ranks('sales', 'salesRank', { categories: ['department', 'city'] });\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript comparison operators within the `getRow` condition?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Get a row where 'age' is greater than 30 using JS syntax\nconst olderThan30 = await table.getRow(`age > 30`);\nconsole.log(olderThan30);\nawait sdb.done();\n```"}
{"prompt":"How can I specify a specific column containing the geometries to simplify?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.simplify(0.05, { column: \"myGeom\" });\nawait sdb.done();\n```"}
{"prompt":"How do I change the number of rows displayed when logging a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ nbRowsToLog: 20 });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"Can I verify multiple columns exist in a table by checking each one individually?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check if multiple columns exist\nconst hasNameColumn = await table.hasColumn('name');\nconst hasAgeColumn = await table.hasColumn('age');\nconsole.log('Does the table have name and age columns?', hasNameColumn && hasAgeColumn);\n\nawait sdb.done();\n```"}
{"prompt":"Is hasTable case-sensitive when checking table names?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check if 'MyTable' exists\nconst exists1 = await sdb.hasTable('mytable');\nconsole.log('Does mytable exist?', exists1);\n// Check if 'MyTable' exists with exact casing\nconst exists2 = await sdb.hasTable('MyTable');\nconsole.log('Does MyTable exist?', exists2);\nawait sdb.done();\n```"}
{"prompt":"How do I assign ranks to a column in ascending order using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.ranks(\"score\", \"rank\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I replace NULL values in a single column with a numeric value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Replace NULL values in 'sales' column with 0\nawait table.replaceNulls(\"sales\", 0);\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleTable from a SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\"); // Creates a SimpleTable instance\n```"}
{"prompt":"How do I perform an inner join on a specific column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform an inner join on the 'id' column\nconst joinedTable = await tableA.join(tableB, {\n  commonColumn: 'id',\n  type: 'inner',\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I configure the maximum number of characters to display for text-based cells when logging?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ nbCharactersToLog: 100 });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all the values from a column named 'age'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst ages = await table.getValues(\"age\");\nconsole.log(ages);\nawait sdb.done();\n```"}
{"prompt":"How can I remove duplicates in a specific column using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove duplicates based on the 'email' column\nawait table.removeDuplicates({ on: 'email' });\nawait sdb.done();\n```"}
{"prompt":"How do I prevent a database from being detached after loading?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.loadDB('./my_database.db', { detach: false });\nawait sdb.done();\n```"}
{"prompt":"Can I remove rows using a numerical condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'quantity' is less than 5\nawait table.removeRows(`quantity < 5`);\nawait sdb.done();\n```"}
{"prompt":"How do I compute the Haversine distance in kilometers and round to 2 decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute Haversine distance in kilometers, rounded to 2 decimal places\nawait table.distance('point1', 'point2', 'distance_km', {\n  method: 'haversine',\n  unit: 'km',\n  decimals: 2,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I create bins for a column with an interval of 5 and store them in a new column called 'age_bins'?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create bins for the 'age' column with an interval of 5\nawait table.bins('age', 5, 'age_bins');\nawait sdb.done();\n```"}
{"prompt":"What is the difference between getColumns() and other methods like getColumnTypes()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get column names and types\nconst columns = await table.getColumns();\nconsole.log('Column names:', columns);\n\nconst columnTypes = await table.getColumnTypes();\nconsole.log('Column types:', columnTypes);\n\nawait sdb.done();\n```"}
{"prompt":"How do I generate embeddings for a text column using Google Gemini?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Generate embeddings using Google Gemini\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  model: 'gemini-pro', // Specify the Gemini model\n  apiKey: process.env.AI_KEY, // Use API key from environment\n  cache: true, // Cache results locally\n  createIndex: true // Create index for faster similarity searches\n});\n\nawait sdb.done();\n```"}
{"prompt":"What data types can I use for the values I want to remove?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where 'age' is 30\nawait table.remove({ age: 30 });\n\n// Remove rows where 'name' is 'Alice'\nawait table.remove({ name: \"Alice\" });\n\n// Remove rows where 'date' is a specific date\nawait table.remove({ date: new Date(\"2024-01-01\") });\n\nawait sdb.done();\n```"}
{"prompt":"Does the `reducePrecision` method modify the original table data, or does it create a new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Reduce the precision of geometries to 4 decimal places\nawait table.reducePrecision(4);\n\n// The original table data is modified in place.\n// You can verify this by logging the table after calling reducePrecision.\nawait table.logTable();\n\nawait sdb.done();\n```"}
{"prompt":"How do I filter a table to keep only rows where a specific column is not equal to a certain value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Keep only rows where the 'fruit' column is not 'apple'\nawait table.filter(\"fruit != 'apple'\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I prevent an error from being thrown if no rows match the condition in `getRow`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Get a row where 'nonExistentColumn' is 'someValue' without throwing an error\nconst noMatchRow = await table.getRow(`nonExistentColumn = 'someValue'`, { noCheck: true });\nconsole.log(noMatchRow); // Will log undefined if no match\nawait sdb.done();\n```"}
{"prompt":"How do I access the data type of a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst dataTypes = await table.getTypes();\nconst columnType = dataTypes[\"column_name\"]; // Replace \"column_name\" with the actual column name\nconsole.log(columnType);\nawait sdb.done();\n```"}
{"prompt":"Can I chain `logColumns` with other table methods?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logColumns({ types: true }) // Logs columns with types\n  .then(() => console.log(\"Columns logged!\"));\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a projection for a geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// This will throw an error because projection is required for geometry columns\n// await table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"country\")`);\n// Uncommenting the line above would cause an error.\nawait sdb.done();\n```"}
{"prompt":"Can I create geometries without specifying a new column name?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// You must specify a new column name; this will throw an error\nawait table.points('lat', 'lon', '');\n// Error: New column name cannot be empty\nawait sdb.done();\n```"}
{"prompt":"Can I compute proportions for all numeric columns in the table at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Assuming 'Men', 'Women', and 'NonBinary' are the numeric columns\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary']);\nawait sdb.done();\n```"}
{"prompt":"What if I want to calculate Z-scores without any categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate Z-scores without any categorization\nawait table.zScore('height', 'heightZScore');\nawait sdb.done();\n```"}
{"prompt":"What file extensions are supported for writing the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Supported extensions: .db (DuckDB) and .sqlite (SQLite)\nawait sdb.writeDB('./my_exported_database.db'); // DuckDB\nawait sdb.writeDB('./my_exported_database.sqlite'); // SQLite\nawait sdb.done();\n```"}
{"prompt":"Is there a way to suppress the output of logDescription()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Unfortunately, there's no built-in way to suppress the output of logDescription()\nawait table.logDescription(); // Output cannot be suppressed\nawait sdb.done();\n```"}
{"prompt":"How do I create a new column that contains the previous row's value of an existing column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Clone 'value' as 'previous_value', offsetting by 1 row (value of row N-1 goes to row N)\nawait table.cloneColumnWithOffset(\"value\", \"previous_value\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I load a database from an absolute path?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.loadDB('/absolute/path/to/database.db');\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a `commonColumn`? Will the join still work?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nconst table2 = sdb.newTable();\n\n// Assuming table1 and table2 are loaded with data\n\nawait table1.join(table2);\n// The method will automatically search for a column name that exists in both tables.\n```"}
{"prompt":"How do I log the column names of my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Log all column names\nconst columns = await table.getColumns();\nconsole.log('Column names:', columns);\n\nawait sdb.done();\n```"}
{"prompt":"Does `logColumns` return anything, and if so, what?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst result = await table.logColumns(); // Returns the SimpleTable instance\nconsole.log(result === table); // This will print true\nawait sdb.done();\n```"}
{"prompt":"Can I chain logExtent with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Chain logExtent with other operations\nawait table.logExtent('price').then(() => {\n  console.log('Extent logged successfully');\n});\nawait sdb.done();\n```"}
{"prompt":"How can I normalize values within specific categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Normalize 'score' within each 'category'\nawait table.normalize('score', 'normalizedScore', { categories: 'category' });\nawait sdb.done();\n```"}
{"prompt":"How do I round a column to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.round(\"myColumn\", { decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"How do I capitalize the first letter of each string in a single column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Capitalize the first letter of each string in 'columnName'\nawait table.capitalize('columnName');\nawait sdb.done();\n```"}
{"prompt":"Can I reproject to WGS84 using its EPSG code instead of the string 'WGS84'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.reproject(\"EPSG:4326\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a name when creating a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst defaultTable = sdb.newTable(); // Creates a table with a default name like 'table1'\nawait sdb.done();\n```"}
{"prompt":"Is it possible to chain selectColumns with other methods?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Chain selectColumns with other methods\nawait table.selectColumns(['col1', 'col2']).then(() => {\n  // Perform additional operations here\n});\nawait sdb.done();\n```"}
{"prompt":"What should I do if my x-axis values are not dates but numbers?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Use numeric x-axis values directly\nawait table.logDotChart(\"xValue\", \"yValue\");\nawait sdb.done();\n```"}
{"prompt":"How can I set the width and height of the line chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-03-01'), value: 30 },\n  { date: new Date('2023-04-01'), value: 40 },\n];\n\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', {\n  width: 80,\n  height: 20,\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I round a column down to the nearest integer?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Round 'column1' down to the nearest integer\nawait table.round('column1', { method: 'floor' });\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleDB instance and load data into a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait sdb.done();\n```"}
{"prompt":"What if the numberOfCharacters is zero?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Specifying 0 will result in empty strings\nawait table.left('id', 0);\nawait sdb.done();\n```"}
{"prompt":"What is the expected format of the objects in the `rows` array?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst validRow = [{ letter: \"h\", number: 8 }];\n// Each object should have properties that correspond to column names.\nawait table.insertRows(validRow);\nawait sdb.done();\n```"}
{"prompt":"How do I get the standard deviation of a column named 'sales' and display the result with one decimal place?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst salesStdDev = await table.getStdDev(\"sales\", { decimals: 1 });\nconsole.log(salesStdDev);\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate geometries by multiple category columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.aggregateGeo(\"union\", { categories: [\"category1\", \"category2\"] });\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations between one column and all other numeric columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute correlations between 'column1' and all other numeric columns\nawait table.correlations({ x: \"column1\" });\nawait sdb.done();\n```"}
{"prompt":"If I'm adding a geometry column, what is the purpose of the `projection` option?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// The projection option specifies the geospatial projection of the new geometry column.\n// It's required when adding a geometry column and ensures correct spatial calculations.\nawait table.addColumn(\"newGeometry\", \"geometry\", \"ST_Point(0, 0)\", {\n  projection: \"EPSG:4326\",\n});\nawait sdb.done();\n```"}
{"prompt":"How can I select a subset of rows and work with the new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select 25 rows and store them in a new table\nconst subsetTable = await table.selectRows(25, { outputTable: true });\n// Perform operations on the subset table\nawait subsetTable.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I create an index on the new embeddings column to speed up similarity searches?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n// await table.loadData(\"your_data.csv\");\n\nawait table.aiEmbeddings(\"text_column\", \"embeddings\", { createIndex: true });\n\n// This will create an index on the \"embeddings\" column.\n\nawait sdb.done();\n```"}
{"prompt":"What data types can I use when adding a new column with addColumn?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Example of using different data types\nawait table.addColumn(\"id\", \"integer\", \"id\");\nawait table.addColumn(\"name\", \"string\", \"name\");\nawait table.addColumn(\"price\", \"float\", \"price\");\nawait table.addColumn(\"is_active\", \"boolean\", \"is_active\");\nawait sdb.done();\n```"}
{"prompt":"How do I rename a column in a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.renameColumns({ \"old_column_name\": \"new_column_name\" });\nawait sdb.done();\n```"}
{"prompt":"How do I identify outliers in a single column without any categorization?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Identify outliers in the 'age' column and store results in 'isOutlier'\nawait table.outliersIQR('age', 'isOutlier');\nawait sdb.done();\n```"}
{"prompt":"Can I compute perimeters without specifying a geometry column?","completion":"Yes, SimpleTable will automatically find the geometry column:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Automatically finds the geometry column\nawait table.perimeter('perimeter_m');\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate geometries without overwriting the current table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Aggregate geometries and store results in a new table without overwriting\nconst aggregatedTable = await table.aggregateGeo('union', { outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"What does `done()` return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// The done() method returns a promise that resolves to the SimpleDB instance\n// after cleanup.\nconst result = await sdb.done();\nconsole.log(result);\n```"}
{"prompt":"What happens if I load an empty array using `loadArray`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load an empty array into the table\nawait table.loadArray([]);\n\nawait sdb.done();"}
{"prompt":"How can I use getQuantile to find the interquartile range (IQR) of a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the first and third quartiles to find IQR\nconst q1 = await table.getQuantile('column', 0.25);\nconst q3 = await table.getQuantile('column', 0.75);\nconst iqr = q3 - q1;\nconsole.log('Interquartile Range:', iqr);\n\nawait sdb.done();\n```"}
{"prompt":"Can I customize the format of the x-axis values in `logDotChart`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 },\n];\nawait table.loadArray(data);\nawait table.logDotChart(\"date\", \"value\", {\n  formatX: (d) => d.toISOString().slice(0, 10), // Example: Format date as YYYY-MM-DD\n});\nawait sdb.done();\n```"}
{"prompt":"What if I want to convert a column named 'id' to an integer (bigint)?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.convert({\n  id: \"bigint\"\n});\nawait sdb.done();\n```"}
{"prompt":"How does getSum handle decimal numbers?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// getSum accurately handles decimal numbers\nconst totalSum = await table.getSum('decimalColumn');\nconsole.log(totalSum);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I call logTypes() on an empty table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Calling logTypes() on an empty table will log that there are no columns\nawait table.logTypes();\nawait sdb.done();\n```"}
{"prompt":"How can I specify the number of bins when creating a histogram?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create a histogram with 20 bins for the 'age' column\nawait table.logHistogram('age', { bins: 20 });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a new column name for storing outlier results?","completion":"The method requires specifying both the input and output columns. You must provide a unique name for the new boolean column."}
{"prompt":"What happens if I provide a column name that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// The documentation doesn't specify the behavior if the column doesn't exist.\n// It's likely an error will be thrown or the operation will be skipped.\nawait table.capitalize(\"nonExistentColumn\");\nawait sdb.done();\n```"}
{"prompt":"What is the data type returned by getValues?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get values and check their type\nconst values = await table.getValues('column');\nconsole.log(values); // Returns an array of string | number | boolean | Date | null\n\nawait sdb.done();```"}
{"prompt":"How can I add a legend to my chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { year: 2024, category: 'A', value: 10 },\n  { year: 2025, category: 'B', value: 15 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      line(plotData, {\n        x: 'year',\n        y: 'value',\n        stroke: 'category',\n      }),\n    ],\n    legend: true,\n  });\n\nconst outputPath = './output/chartWithLegend.png';\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"Do I need to load data into the table before adding the row number column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Add a new column named 'rowNumber' before loading data\nawait table.addRowNumber(\"rowNumber\");\n\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the method in the distance function?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default method is 'srs'\nawait table.distance('geomA', 'geomB', 'distance_srs');\nawait sdb.done();\n```"}
{"prompt":"What is the difference between passing a string and a SimpleTable instance to selectTables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Passing a string selects by name\nawait sdb.selectTables('employees');\n// Passing an instance selects the specific table object\nconst employeesTable = sdb.newTable('employees');\nawait sdb.selectTables(employeesTable);\nawait sdb.done();\n```"}
{"prompt":"Can I extract latitude and longitude into existing columns?","completion":"No, the latLon method creates new columns for latitude and longitude. You cannot overwrite existing columns with this method."}
{"prompt":"How can I remove rows using JavaScript syntax for conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Using JS syntax to remove rows where 'price' is less than 100 AND 'quantity' is 0\nawait table.removeRows(`price < 100 && quantity === 0`);\nawait sdb.done();\n```"}
{"prompt":"How can I extract only the first character from a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract first character of 'initials' column\nawait table.left('initials', 1);\nawait sdb.done();\n```"}
{"prompt":"How do I compute a rolling average of a column with a window size of 5 rows (2 preceding, current, and 2 following)?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute a 7-day rolling average of 'sales' with 3 preceding and 3 following rows\n// (total window size of 7: 3 preceding + current + 3 following)\nawait table.rolling(\"sales\", \"rollingAvgSales\", \"mean\", 2, 2);\nawait sdb.done();\n```"}
{"prompt":"How do I perform a 'within' join using the Haversine distance method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\nawait tableA.joinGeo(tableB, \"within\", {\n  distance: 10,\n  distanceMethod: \"haversine\",\n});\nawait sdb.done();\n```"}
{"prompt":"How do I round a single column to the nearest integer using the default rounding method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Round 'area' column to nearest integer\nawait table.round(\"area\");\nawait sdb.done();\n```"}
{"prompt":"How do I perform a right join instead of the default left join?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a right join on the common column (auto-detected)\nawait tableA.join(tableB, {\n  type: 'right',\n});\n\nawait sdb.done();\n```"}
{"prompt":"What does the `newColumn` parameter represent?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.outliersIQR(\"age\", \"isOutlier\");\nawait sdb.done();\n```\n// The 'isOutlier' column will contain boolean values (TRUE/FALSE) indicating whether each row in the 'age' column is considered an outlier."}
{"prompt":"How do I log only the column names of a table without their data types?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logColumns();\nawait sdb.done();\n```"}
{"prompt":"How do I load a DuckDB database file into SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.loadDB(\"./my_database.db\");\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the cumulative sum of a single column named 'value' and store it in a new column called 'cumulative_value'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.accumulate(\"value\", \"cumulative_value\");\nawait sdb.done();\n```"}
{"prompt":"How do I handle asynchronous errors when using hasTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check table existence with error handling\ntry {\n  const exists = await sdb.hasTable('error_table');\n  console.log('Does error_table exist?', exists);\n} catch (error) {\n  console.error('Error checking table:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"Can I specify the number of decimal places when calculating variance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate variance with 2 decimal places\nconst variance = await table.getVar('numericColumn', { decimals: 2 });\nconsole.log(variance);\n\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior of getBoundingBox when no column is specified?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Default behavior: automatically finds the geometry column\nconst bbox = await table.getBoundingBox();\nconsole.log('Default Bounding Box:', bbox);\n\nawait sdb.done();\n```"}
{"prompt":"How can I generate a line chart with multiple small multiples and fixed scales?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A', subgroup: 'X' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A', subgroup: 'X' },\n  { date: new Date('2023-03-01'), value: 30, category: 'A', subgroup: 'Y' },\n  { date: new Date('2023-04-01'), value: 40, category: 'A', subgroup: 'Y' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B', subgroup: 'X' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B', subgroup: 'X' },\n  { date: new Date('2023-03-01'), value: 35, category: 'B', subgroup: 'Y' },\n  { date: new Date('2023-04-01'), value: 45, category: 'B', subgroup: 'Y' },\n];\n\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', {\n  smallMultiples: ['category', 'subgroup'],\n  fixedScales: true,\n  smallMultiplesPerRow: 2,\n});\n\nawait sdb.done();\n```"}
{"prompt":"Does the `skip` method modify the original data source, or does it create a new table with the skipped rows removed?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.skip(2);\nawait sdb.done();\n```\n// The `skip` method modifies the table in place. It removes the specified number of rows from the current table."}
{"prompt":"How do I split a string column by a comma and extract the second part into a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Split 'address' by comma and extract the second part (index 1) into a new 'city' column\nawait table.splitExtract(\"address\", \",\", 1, \"city\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"My geometry data is stored in a column named 'routeGeom'. How do I compute the length of these geometries and store the result in a column named 'routeLength'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.length(\"routeLength\", { column: \"routeGeom\" });\nawait sdb.done();\n```"}
{"prompt":"How can I use aiQuery to execute a query and cache it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Execute a query and cache it for future use\nawait table.aiQuery(\n  'Calculate the total revenue per month',\n  { cache: true }\n);\n\nawait sdb.done();\n```"}
{"prompt":"What does `cleanColumnNames` do to column names like 'First Name'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Assuming a column named 'First Name', it will be transformed to 'firstName'\nawait table.cleanColumnNames();\nawait sdb.done();\n```"}
{"prompt":"How can I extract the first 3 characters of a column named 'code' and store them in a new column also named 'code'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.updateColumn(\"code\", `LEFT(code, 3)`);\nawait sdb.done();\n```"}
{"prompt":"How can I handle missing values after using `wider`?","completion":"After restructuring, you can use the `fillna` method to replace missing values. For example:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Restructure the table by pivoting 'Year' into new columns with 'Employees' as values\nawait table.wider('Year', 'Employees');\n// Replace missing values with 0\nawait table.fillna(0);\nawait sdb.done();\n```"}
{"prompt":"How do I ensure getMin works correctly with different data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Ensure getMin works with different data types\ntry {\n  const minNumber = await table.getMin('number_column');\n  console.log(`Minimum number: ${minNumber}`);\n\n  const minDate = await table.getMin('date_column');\n  console.log(`Earliest date: ${minDate}`);\n\n  const minBoolean = await table.getMin('boolean_column');\n  console.log(`Minimum boolean: ${minBoolean}`);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();```"}
{"prompt":"Can I control the width of the histogram bars? How would I set the bar width to 20 characters for the 'score' column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logHistogram(\"score\", { width: 20 });\nawait sdb.done();\n```"}
{"prompt":"How can I use Ollama with aiQuery?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use Ollama for query generation\nawait table.aiQuery(\n  'Calculate the average order value',\n  { ollama: true }\n);\n\nawait sdb.done();\n```"}
{"prompt":"Does the order of rows matter when calculating the cumulative sum?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// The documentation states that the data should be sorted first.\n// Example: Sort by date before accumulating.\n// await table.sort({ date: \"asc\" });\nawait table.accumulate(\"value\", \"cumulative_value\");\nawait sdb.done();\n```"}
{"prompt":"If I don't specify `x` or `y`, what does `linearRegressions` do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.linearRegressions();\n\nawait sdb.done();\n```\n// It computes linear regressions for all numeric column permutations."}
{"prompt":"How do I handle files with different encodings when loading from a directory?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { encoding: 'latin-1' });\nawait sdb.done();\n```"}
{"prompt":"How do I perform a union of all geometries in a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.aggregateGeo(\"union\");\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve a table named 'customers' using the `getTable` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Retrieve the \"customers\" table\nconst customers = await sdb.getTable(\"customers\");\n\n// Now you can work with the 'customers' table\n// For example, you can log it:\n// await customers.logTable();\n\nawait sdb.done();\n```"}
{"prompt":"How often is the descriptive information updated when using logDescription()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log description after loading data to get updated information\nawait table.logDescription();\nawait sdb.done();\n```"}
{"prompt":"How do I ignore errors while loading data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv', { ignoreErrors: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript comparison operators within the `removeRows` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where 'quantity' is less than 5\nawait table.removeRows(`quantity < 5`);\nawait sdb.done();\n```"}
{"prompt":"How do I clone a column with a negative offset?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('value', 'next_value', { offset: -1 });\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I log the unique values of a specific column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log unique values for the 'category' column\nawait table.logUniques('category');\nawait sdb.done();\n```"}
{"prompt":"If I want to assign 100 quantiles to a column named 'age', what would the code look like?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.quantiles(\"age\", 100, \"ageQuantile\");\nawait sdb.done();\n```"}
{"prompt":"How do I install the Simple Data Analysis library using Deno?","completion":"```ts\ndeno add jsr:@nshiab/simple-data-analysis\n```"}
{"prompt":"Can I set the data type of multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.setTypes({\n  name: \"string\",\n  age: \"integer\",\n  salary: \"float\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I log the extent of a column after filtering the data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Filter data first, then log extent\nawait table.filter({ price: { $gt: 100 } });\nawait table.logExtent('price');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to automate checking the data types of all columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get and log all data types\nconst dataTypes = await table.getTypes();\nconsole.log('All column data types:', dataTypes);\n\nawait sdb.done();\n```"}
{"prompt":"How do I enable the display of data types when logging a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ types: true });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"What is the expected format of the condition string passed to `removeRows`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The condition string should be a SQL WHERE clause (e.g., \"fruit = 'apple'\")\n// or a JavaScript expression using &&, ||, ===, !==.\nawait table.removeRows(\"fruit = 'apple'\");\nawait sdb.done();\n```"}
{"prompt":"How do I generate a basic histogram for a numeric column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Generate a basic histogram for the 'temperature' column\nawait table.logHistogram('temperature');\nawait sdb.done();\n```"}
{"prompt":"How do I use the `union` method to combine geometries from two columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Compute the union of geometries in 'geometry_column_1' and 'geometry_column_2',\n// storing the results in 'combined_geometry'.\nawait table.union(\"geometry_column_1\", \"geometry_column_2\", \"combined_geometry\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I include the last update timestamp in the Google Sheet?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  lastUpdate: true\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL `AND` and `OR` operators in the `conditions` string?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst firstRow = await table.getFirstRow({\n  conditions: `category === 'Book' && price > 10`,\n});\nconsole.log(firstRow);\nawait sdb.done();\n```"}
{"prompt":"Can I write the data to a SQLite database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeData(\"./my_database.sqlite\");\nawait sdb.done();\n```"}
{"prompt":"How can I extract the filename without the extension from a 'fileName' column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Split 'fileName' by dot and extract the first part (index 0), overwriting 'fileName'\nawait table.splitExtract(\"fileName\", \".\", 0, \"fileName\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that only exact matches are replaced in a column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Replace only if the entire string in 'column1' is \"kilograms\"\nawait table.replace(\"column1\", { \"kilograms\": \"kg\" }, { entireString: true });\nawait sdb.done();\n```"}
{"prompt":"How can I increase concurrency for embedding generation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Allow 10 concurrent requests\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  concurrent: 10 // Set number of concurrent requests\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate a rolling median of a column named 'data_points'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.rolling(\"data_points\", \"rollingMedianDataPoints\", \"median\", 2, 2);\nawait sdb.done();\n```"}
{"prompt":"Can I overwrite an existing column using the concatenate method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If 'existingCol' already exists, it will be overwritten with the concatenated values\nawait table.concatenate(['a', 'b'], 'existingCol');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to suppress the output of logProjections()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Currently, there's no built-in way to suppress the output\nawait table.logProjections();\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I enable caching for embeddings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Enable local caching for embeddings\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  cache: true // Cache results locally\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I compute proportions for multiple groups of columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute proportions for one group of columns\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary']);\n\n// Compute proportions for another group\nawait table.proportionsHorizontal(['ColumnA', 'ColumnB'], {\n  suffix: 'Prop2'\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I assign ranks to a column that has duplicate values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rank 'points' with possible duplicate ranks\nawait table.ranks('points', 'rank');\nawait sdb.done();\n```"}
{"prompt":"How do I round a single column to the nearest integer?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.round(\"myColumn\");\nawait sdb.done();\n```"}
{"prompt":"How can I process multiple rows in a single batch using aiRowByRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Process multiple rows in a single batch using aiRowByRow\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    batchSize: 5 // Adjust this value based on your needs\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How do I set specific data types for columns when creating a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  name: 'string',\n  salary: 'integer',\n  raise: 'float'\n});\nawait sdb.done();\n```"}
{"prompt":"How can I use Vertex AI instead of other providers?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use Vertex AI for query generation\nawait table.aiQuery(\n  'Show the monthly trend of website visits',\n  { vertex: true }\n);\n\nawait sdb.done();\n```"}
{"prompt":"Can I specify a custom name for the new table created during aggregation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst newTable = await table.aggregateGeo(\"union\", { outputTable: \"my_new_table\" });\nawait sdb.done();\n```"}
{"prompt":"How can I switch the map to dark mode?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./path/to/your/data.geojson\");\n\nconst mapFunction = (geoJsonData: { features: { properties: Record<string, unknown> }[] }) => {\n  // Your Observable Plot code here\n  return plot({});\n};\n\nconst options = {\n  dark: true,\n};\n\nawait table.writeMap(mapFunction, \"./output/map.png\", options);\n```\nSet the `dark` option to `true` in the `writeMap` method to switch the map to dark mode."}
{"prompt":"If I don't provide a name, what is the default name that will be assigned to the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst unnamedTable = sdb.newTable();\n// The table will be named something like 'table1', 'table2', etc.\nawait sdb.done();\n```"}
{"prompt":"What happens if a row has fewer columns than expected?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load data and pad missing columns with NULL values\nawait table.loadData(\"./data.csv\", { nullPadding: true });\n\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different name for the new column that will store the intersection geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Yes, the third parameter of the intersection method is the name of the new column.\n// For example, to store the intersection in a column named 'overlap_area':\nawait table.intersection(\"geometry1\", \"geometry2\", \"overlap_area\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I filter rows in a table to keep only specific values in a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Keep only rows where 'status' is 'active'\nawait table.keep({ status: \"active\" });\nawait sdb.done();\n```"}
{"prompt":"How do I replace specific substrings in a single column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Replace 'oldString' with 'newString' in 'columnName'\nawait table.replace('columnName', { 'oldString': 'newString' });\n\nawait sdb.done();\n```"}
{"prompt":"If I don't specify any options, what happens when calculating the Z-score?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.zScore(\"height\", \"heightZScore\");\nawait sdb.done();\n```\n// The Z-score will be calculated for the 'height' column without any grouping or rounding."}
{"prompt":"How can I specify the precision of the coordinates in a GeoJSON file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", { precision: 6 });\nawait sdb.done();\n```"}
{"prompt":"What is the difference between getVar and other statistical functions like getMean?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// getVar calculates the variance, while getMean calculates the average\nconst variance = await table.getVar('numericColumn');\nconst mean = await table.getMean('numericColumn');\nconsole.log('Variance:', variance);\nconsole.log('Mean:', mean);\n\nawait sdb.done();\n```"}
{"prompt":"How can I load data from a directory while skipping the first 5 lines of each file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { skip: 5 });\nawait sdb.done();\n```"}
{"prompt":"How do I calculate a custom quantile, like the 10th percentile?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the 10th percentile of 'rating' column\nconst tenthPercentile = await table.getQuantile('rating', 0.1);\nconsole.log('10th Percentile Rating:', tenthPercentile);\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the area of geometries in square kilometers and store it in a new column named 'area_km2'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.area(\"area_km2\", { unit: \"km2\" });\nawait sdb.done();\n```"}
{"prompt":"Can I use getNbRows to check if my data has loaded correctly?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Verify the number of rows after loading data\nconst nbRowsAfterLoad = await table.getNbRows();\nconsole.log(`Rows after loading: ${nbRowsAfterLoad}`);\nawait sdb.done();\n```"}
{"prompt":"If there are no tables in the database, what will `getTableNames` return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: [] (an empty array)\nawait sdb.done();\n```"}
{"prompt":"How can I enable dark mode for a chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { year: 2024, value: 10 },\n  { year: 2025, value: 15 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      area(plotData, { x: 'year', y: 'value' }),\n    ],\n  });\n\nconst outputPath = './output/darkChart.png';\nawait table.writeChart(chartFunction, outputPath, {\n  dark: true,\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the geometry column when calling isClosedGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method will automatically find the geometry column and add 'isClosed'\nawait table.isClosedGeo('isClosed');\nawait sdb.done();\n```"}
{"prompt":"What happens if there are not enough rows to form a complete window for a rolling aggregation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// For rows without enough preceding or following rows to form a complete window, NULL will be returned.\n// Example: Compute a rolling average with 3 preceding and 3 following rows\nawait table.rolling(\"sales\", \"rollingAvgSales\", \"mean\", 3, 3);\nawait sdb.done();\n```"}
{"prompt":"How do I set the width and height of a dot chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n];\nawait table.loadArray(data);\nawait table.logDotChart('date', 'value', {\n  width: 80,\n  height: 20\n});\nawait sdb.done();\n```"}
{"prompt":"Does `removeDuplicates` modify the original table in place, or does it return a new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeDuplicates(); // Modifies the table in place.\nawait sdb.done();\n```"}
{"prompt":"Can I compress the output file when writing data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./output.json', { compression: true });\nawait sdb.done();\n```"}
{"prompt":"If I have two columns with geometry data, how do I specify which one is used to calculate the intersection?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The second argument to removeIntersection ('geomB') specifies the geometries used to compute the intersection.\n// The intersection of 'geomB' will be removed from 'geomA'.\nawait table.removeIntersection(\"geomA\", \"geomB\", \"geomA_minus_geomB\");\n\nawait sdb.done();\n```"}
{"prompt":"What does the `wider` method actually do to the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Before wider:\n// Department | Year | Employees\n// Accounting | 2021 | 10\n// ...\n\nawait table.wider(\"Year\", \"Employees\");\n\n// After wider:\n// Department | 2021 | 2022 | 2023 |\n// Accounting | 10 | 9 | 15 |\n// ...\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't call `done()` after finishing with SimpleDB?","completion":"It's important to call `done()` to release resources. Here's how to do it properly.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// ... perform operations ...\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the first row of a table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row of the table\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\nawait sdb.done();\n```"}
{"prompt":"How do I check for the existence of a column before performing operations on it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check if 'price' column exists before summarizing\nif (await table.hasColumn('price')) {\n  await table.summarize({\n    values: 'price',\n    summaries: ['sum'],\n  });\n} else {\n  console.log('Price column does not exist');\n}\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass a mix of table names and instances?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst employeesTable = sdb.newTable('employees');\nawait sdb.selectTables(['customers', employeesTable]); // Mix of name and instance is allowed\nawait sdb.done();\n```"}
{"prompt":"How can I compute correlations for all numeric columns in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute correlations for all numeric columns\nawait table.correlations();\nawait sdb.done();\n```"}
{"prompt":"How can I specify the original projection of the data when loading a shapefile?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadGeoData(\"./some-data.shp.zip\", { toWGS84: true, from: \"EPSG:4326\" });\n// This loads the shapefile, attempts to reproject to WGS84, and specifies the original projection as EPSG:4326.\n\nawait sdb.done();\n```"}
{"prompt":"What type of data does the `chart` function in `writeChart` expect as input?","completion":"```ts\nimport { dot, plot } from '@observablehq/plot';\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) => {\n  // plotData is an array of objects, where each object represents a row from the table.\n  console.log(plotData);\n  return plot({\n    marks: [\n      dot(plotData, { x: 'year', y: 'value' }),\n    ],\n  });\n};\n\nconst outputPath = 'output/chart.png';\n\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where some strings in the column are empty?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Handle empty strings by leaving them as is or providing a default\nawait table.right('description', 3);\n// If 'description' is empty, it remains empty\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the `decimals` option when calling `getMean`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst meanValue = await table.getMean(\"value\"); // No decimals option\nconsole.log(meanValue);\nawait sdb.done();\n```"}
{"prompt":"How can I configure SimpleDB to display a progress bar for long-running operations?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({ progressBar: true });\nawait sdb.done();\n```"}
{"prompt":"How can I enable verbose logging for cache operations in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({ cacheVerbose: true });\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData('items.csv');\n  await table.summarize({\n    values: 'price',\n    categories: 'department',\n    summaries: ['min', 'max', 'mean'],\n  });\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I unify columns across multiple files with different structures?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { unifyColumns: true });\nawait sdb.done();\n```"}
{"prompt":"Can I remove a table without loading data into it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('emptyTable');\n// Remove the table even if no data is loaded\nawait table.removeTable();\nawait sdb.done();\n```"}
{"prompt":"Can I use `longer` on a table that has already been modified by other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Modify the table first\nawait table.filter({ column: 'Department', value: 'Accounting' });\n\n// Then use longer on the filtered data\nawait table.longer(['2021', '2022', '2023'], 'year', 'employees');\n\nawait sdb.done();\n```"}
{"prompt":"How can I load data from a CSV file into a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I remove rows based on multiple conditions in different columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'job' is 'accountant' or 'developer', AND 'city' is 'Montreal'\nawait table.remove({ job: ['accountant', 'developer'], city: 'Montreal' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use the table after calling `removeTable()`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.removeTable();\n\n// Attempting to use the table after removeTable() will result in an error.\n// For example:\n// await table.logTable(); // This will throw an error.\nawait sdb.done();\n```"}
{"prompt":"How do I store the result of an intersection in a new column?","completion":"```ts\n// The third parameter specifies the name of the new column.\nawait table.intersection('geomA', 'geomB', 'intersectResult');\n```"}
{"prompt":"Can I perform a join without specifying the common column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a left join with auto-detected common column\nawait tableA.join(tableB);\n\nawait sdb.done();\n```"}
{"prompt":"Can I categorize by multiple columns when calculating ranks?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.ranks(\"sales\", \"salesRank\", { categories: [\"department\", \"city\"] });\nawait sdb.done();\n```"}
{"prompt":"Can I load data from multiple files at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load data from multiple local JSON files\nawait table.loadData([\n  \"./data1.json\",\n  \"./data2.json\",\n  \"./data3.json\",\n]);\n\nawait sdb.done();\n```"}
{"prompt":"How do I convert a single column to lowercase using the `lower` method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert 'columnName' to lowercase\nawait table.lower('columnName');\nawait sdb.done();\n```"}
{"prompt":"Can I insert data from multiple tables into one target table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\nconst tableC = sdb.newTable();\nawait tableC.loadData('data/tableC.csv');\n\n// Insert rows from 'tableB' and 'tableC' into 'tableA'\nawait tableA.insertTables([tableB, tableC]);\n\nawait sdb.done();\n```"}
{"prompt":"How do I write data to a JSON file with dates formatted as ISO strings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./output.json', { formatDates: true });\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging for embedding generation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Enable verbose logging\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  verbose: true // Log detailed information\n});\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to compute vertical proportions without specifying categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute without categories\nawait table.proportionsVertical('column1', 'perc');\nawait sdb.done();\n```"}
{"prompt":"Can I use `getValues` to retrieve values from a column containing dates?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst dates = await table.getValues(\"dateColumn\");\nconsole.log(dates);\n// The values will be an array of Date objects.\nawait sdb.done();\n```"}
{"prompt":"What data types are supported for the geometry columns in the union operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The columns must contain geometry data types (e.g., GeoJSON, WKT)\nawait table.union('geomA', 'geomB', 'unionGeom');\nawait sdb.done();\n```"}
{"prompt":"How do I store the buffered geometries in a new column named 'myBuffers'?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Store the buffered geometries in 'myBuffers' column with a distance of 3 units\nawait table.buffer('myBuffers', 3);\nawait sdb.done();\n```"}
{"prompt":"How do I limit the number of characters displayed for text-based cells?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 30\n});\n// Text cells will be truncated to 30 characters.\nawait sdb.done();\n```"}
{"prompt":"How do I log the columns of a table without including data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log only the column names\nawait table.logColumns();\nawait sdb.done();\n```"}
{"prompt":"How do I create a basic dot chart using SimpleTable with date values on the x-axis and numeric values on the y-axis?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert date column to string format if needed\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Generate and log the dot chart\nawait table.logDotChart(\"date\", \"value\");\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows with missing values only in specific columns, like 'city' and 'state'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeMissing({ columns: [\"city\", \"state\"] });\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the column name is incorrect when using getSkew?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check if the column exists before calculating skewness\ntry {\n  const skewness = await table.getSkew('existingColumn');\n  console.log('Skewness:', skewness);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I check the validity of geometries in my table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check if geometries are valid and store results in a new 'isValid' column\nawait table.isValidGeo('isValid');\nawait sdb.done();\n```"}
{"prompt":"Is there a synchronous version of logNbRows()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method is asynchronous and must be awaited\nawait table.logNbRows(); // No synchronous version available\nawait sdb.done();\n```"}
{"prompt":"What does getMin return if all values in the column are null?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Handle all null values in a column\ntry {\n  const minNullColumn = await table.getMin('null_column');\n  console.log(`Minimum value: ${minNullColumn}`);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();```"}
{"prompt":"How do I retrieve all the data from the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst allData = await table.getData();\nconsole.log(allData);\nawait sdb.done();\n```"}
{"prompt":"How do I compute the perimeter of polygon geometries in meters using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute perimeter in meters and store in 'perimeter_m'\nawait table.perimeter('perimeter_m');\nawait sdb.done();\n```"}
{"prompt":"What data type does the `hasTable` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(typeof exists); // Output: boolean\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows with missing values in multiple specific columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows with missing values in 'column1' or 'column2'\nawait table.removeMissing({ columns: ['column1', 'column2'] });\nawait sdb.done();\n```"}
{"prompt":"How do I keep only the rows that have missing values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows with missing values in any column\nawait table.removeMissing({ invert: true });\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a column name in the options, how does the method know which column contains the geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The method automatically attempts to find a geometry column.\nawait table.isValidGeo(\"isValid\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I extract the last three characters from a string column using the right method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract last three characters from the 'productCode' column\nawait table.right('productCode', 3);\nawait sdb.done();\n```"}
{"prompt":"How do I sort the table using the default ascending order for all columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sort();\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL syntax for conditions in getTop?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Using SQL WHERE clause syntax\nconst top5BooksSql = await table.getTop(5, { conditions: `category = 'Books'` });\nconsole.log(top5BooksSql);\nawait sdb.done();\n```"}
{"prompt":"Can I compute proportions for only some columns in a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute proportions only for 'Men' and 'Women'\nawait table.proportionsHorizontal(['Men', 'Women']);\n\nawait sdb.done();\n```"}
{"prompt":"How do I load data from multiple Parquet files and unify columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData([\n  'https://example.com/data1.parquet',\n  'https://example.com/data2.parquet'\n], { unifyColumns: true });\nawait sdb.done();\n```"}
{"prompt":"How can I use Vertex AI with aiRowByRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use Vertex AI with aiRowByRow\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    vertex: true,\n    project: 'your-project-id',\n    location: 'us-central1'\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How do I compute a rolling maximum for a column with a window size of 3 (1 preceding, current, and 1 following)?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute a rolling maximum with 1 preceding and 1 following row\nawait table.rolling(\"temperature\", \"rollingMaxTemp\", \"max\", 1, 1);\nawait sdb.done();\n```"}
{"prompt":"Can I load a GeoJSON file and specify the projection it's coming from?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson', { from: 'EPSG:4326' });\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I close the SimpleDB instance after finishing data operations?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows based on multiple conditions using 'AND'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where 'price' is less than 100 AND 'quantity' is 0\nawait table.removeRows(`price < 100 && quantity === 0`);\nawait sdb.done();\n```"}
{"prompt":"Is the output of `logTableNames` sorted in any particular order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.logTableNames(); // The table names are sorted alphabetically.\nawait sdb.done();\n```"}
{"prompt":"How do I remove a single table by name using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"employees\");\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that the proportions are calculated within each category separately?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate proportions within each category\nawait table.proportionsVertical('column1', 'perc', {\n  categories: ['category1', 'category2']\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if I call `getFirstRow` with a condition that doesn't match any rows in the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst firstRow = await table.getFirstRow({\n  conditions: `category === 'NonExistentCategory'`,\n});\nconsole.log(firstRow); // This will log null\nawait sdb.done();\n```"}
{"prompt":"If I have no tables, what will `logTableNames` output?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Assuming no tables have been created:\nawait sdb.logTableNames(); // This will output: SimpleDB - Tables:  []\nawait sdb.done();\n```"}
{"prompt":"How do I set the number of rows to display when logging a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to chain `longer` with other methods like `summarize` or `renameColumns`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Chain longer with other methods\nawait table.longer(['2021', '2022', '2023'], 'year', 'employees')\n  .then(() => table.renameColumns({ year: 'Year' }));\n\nawait sdb.done();\n```"}
{"prompt":"How do I add a new boolean column indicating whether geometries are closed?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new column 'isClosed' to check if geometries are closed\nawait table.isClosedGeo('isClosed');\nawait sdb.done();\n```"}
{"prompt":"If I only want to summarize a single column and remove the default 'value' column in the output, how do I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.summarize({\n  values: \"value_column\",\n  noColumnValue: true,\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I specify a name for the new table when selecting rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst topProducts = await table.selectRows(10, { outputTable: \"top_products\" });\nawait sdb.done();\n```"}
{"prompt":"How do I compute the Haversine distance between two points in meters?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute Haversine distance in meters between 'point1' and 'point2', store in 'distance_m'\nawait table.distance('point1', 'point2', 'distance_m', { method: 'haversine' });\nawait sdb.done();\n```"}
{"prompt":"How do I reproject the geometries in my table to WGS84?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.reproject(\"WGS84\");\nawait sdb.done();\n```"}
{"prompt":"Is the `renameColumns` method case-sensitive when matching column names?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.renameColumns({\n  \"OldColumnName\": \"newColumnName\"\n});\n// The method is likely case-sensitive, so ensure the column names match exactly.\nawait sdb.done();\n```\nThe documentation doesn't explicitly state whether it's case-sensitive, but it's best practice to ensure the column names match exactly to avoid unexpected behavior."}
{"prompt":"How do I compute the distance between two geometry columns using their default SRS units?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute distance between 'geomA' and 'geomB' in SRS units, store in 'distance_srs'\nawait table.distance('geomA', 'geomB', 'distance_srs');\nawait sdb.done();\n```"}
{"prompt":"How do I skip zero rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.skip(0);\nawait sdb.done();\n```\n// Calling `table.skip(0)` will not skip any rows, leaving the table unchanged."}
{"prompt":"How do I identify outliers in a column grouped by multiple categories?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.outliersIQR(\"sales\", \"salesOutlier\", { categories: [\"region\", \"product\"] });\nawait sdb.done();\n```"}
{"prompt":"How do I check the data types of the columns in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logTypes();\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the `order` option? What is the default behavior?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.ranks(\"score\", \"rank\"); // The default order is ascending.\nawait sdb.done();\n```"}
{"prompt":"How do I load data into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\"); // Replace with your file path\nawait sdb.done();\n```"}
{"prompt":"Can I change the width of the bar chart?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n];\nawait table.loadArray(data);\nawait table.logBarChart(\"category\", \"value\", { width: 60 });\nawait sdb.done();\n```"}
{"prompt":"If I want to accumulate the values in a column named 'score', and store the result in a column named 'cumulative_score', what would the code look like?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.accumulate(\"score\", \"cumulative_score\");\nawait sdb.done();\n```"}
{"prompt":"How do I enable DuckDB's external file cache?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  duckDbCache: true\n});\n// DuckDB's external file cache will be used.\nawait sdb.done();\n```"}
{"prompt":"How do I load an array of objects with different data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Array with various data types\nconst data = [\n  { id: 1, name: 'Alice', active: true, score: 85.5 },\n  { id: 2, name: 'Bob', active: false, score: 90.1 },\n];\nawait table.loadArray(data);\n\nawait sdb.done();"}
{"prompt":"What happens if I try to calculate the standard deviation of a non-numeric column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// This will likely throw an error, as standard deviation is only defined for numeric columns.\n// You should ensure the column you're using is numeric before calling getStdDev.\n// const textStdDev = await table.getStdDev(\"text\");\n// console.log(textStdDev);\nawait sdb.done();\n```\n// The function will likely throw an error if the column is not numeric."}
{"prompt":"How do I select all rows after skipping the first 100 rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.selectRows(Number.MAX_SAFE_INTEGER, { offset: 100 });\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to remove a column that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Attempt to remove a non-existent column\nawait table.removeColumns(\"nonExistentColumn\");\n\n// The method will likely not throw an error, but the column won't be removed.\n\nawait sdb.done();\n```"}
{"prompt":"If my table has only 3 rows, what happens if I try to skip 5 rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.skip(5);\nawait sdb.done();\n```\n// The method will likely skip all rows, resulting in an empty table. The documentation doesn't specify error handling, so it won't throw an error."}
{"prompt":"How do I retrieve the schema of a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconsole.table(schema); // Log the schema in a readable table format\n\nawait sdb.done();\n```"}
{"prompt":"If files have different columns, can I fill missing values with NULL?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadDataFromDirectory(\"./my_data_directory\", { unifyColumns: true });\nawait sdb.done();\n```"}
{"prompt":"How do I insert multiple rows into a SimpleTable using an array of objects?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\n// Insert new rows into the table\nconst newRows = [\n  { letter: \"c\", number: 3 },\n  { letter: \"d\", number: 4 },\n];\nawait table.insertRows(newRows);\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to log the extent without modifying the original data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// logExtent only logs the data and does not modify it\nawait table.logExtent('price');\nawait sdb.done();\n```"}
{"prompt":"How can I remove columns dynamically based on certain conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove columns that start with 'temp'\nconst columnsToRemove = await table.getColumnNames().filter(col => col.startsWith('temp'));\nawait table.removeColumns(columnsToRemove);\nawait sdb.done();\n```"}
{"prompt":"Can I filter the list of extensions to only show those that are loaded?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\n// Filter to show only loaded extensions\nconst loadedExtensions = extensions.filter(ext => ext.loaded === true);\nconsole.log('Loaded extensions:', loadedExtensions);\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `outputTable` option, what happens to the original table after the cross join?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\n\nawait tableA.crossJoin(tableB); // tableA will be overwritten with the cross-joined data\nawait sdb.done();\n```"}
{"prompt":"How do I compute the cumulative sum of a column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Ensure the data is sorted before accumulating\nawait table.sort({ date: 'asc' });\nawait table.accumulate('sales', 'cumulativeSales');\nawait sdb.done();\n```"}
{"prompt":"How do I extract the first 3 characters from a column named 'id'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.left(\"id\", 3);\nawait sdb.done();\n```"}
{"prompt":"If I don't specify any options, what is the default suffix for the new columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsHorizontal(['Men', 'Women']);\nawait sdb.done();\n```\n// The default suffix is \"Perc\"."}
{"prompt":"How can I force the returned data to match the types of the columns in the query?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst results = await sdb.customQuery(\n  \"SELECT column1, column2 FROM my_table\",\n  { \n    returnDataFrom: \"query\",\n    types: { \n      column1: \"INTEGER\",\n      column2: \"VARCHAR\"\n    }\n  }\n);\nconsole.log(results);\nawait sdb.done();\n```"}
{"prompt":"What happens if no rows match the specified conditions in `getLastRow`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst lastRow = await table.getLastRow({\n  conditions: \"nonexistent_column = 'some_value'\",\n});\nconsole.log(lastRow); // This will log null\nawait sdb.done();\n```"}
{"prompt":"If my column is named 'city', how would I get all the city names?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst cities = await table.getValues(\"city\");\nconsole.log(cities);\nawait sdb.done();\n```"}
{"prompt":"How do I create a basic map using writeMap with default settings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [geo(geoJsonData, { fill: 'blue', stroke: 'black' })]\n  });\n};\n\nawait table.writeMap(mapFunction, './output/basic_map.png');\nawait sdb.done();\n```"}
{"prompt":"Do I need to load data into the table before calling `logProjections`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Load data first\nawait table.logProjections();\nawait sdb.done();\n```"}
{"prompt":"How do I sort a table in ascending order for all columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Sort all columns in ascending order\nawait table.sort();\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `unit` option, what unit will the computed length be in?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// The default unit is meters.\nawait table.length(\"length_m\");\nawait sdb.done();\n```"}
{"prompt":"How do I compute distances using the Haversine method without specifying units?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default unit is 'm' if not specified\nawait table.distance('point1', 'point2', 'distance_haversine_m', {\n  method: 'haversine'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I compute the length of line geometries in meters and store it in a new column named 'length_m'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.length(\"length_m\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I call `longer` on a table that is already in long format?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calling longer on a long format table will stack the specified columns again\n// This may not be useful and could lead to unintended results\nawait table.longer(['year'], 'originalYear', 'value'); // Not recommended unless intended\n\nawait sdb.done();\n```"}
{"prompt":"How do I log all rows of the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logTable(\"all\");\nawait sdb.done();\n```"}
{"prompt":"How do I log all rows of a table in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable('all');\nawait sdb.done();\n```"}
{"prompt":"Can I set multiple data types at once using setTypes?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  id: 'integer',\n  name: 'string',\n  price: 'float',\n  created_at: 'datetime'\n});\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the skewness without rounding?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get skewness without rounding\nconst rawSkewness = await table.getSkew('numericColumn');\nconsole.log('Raw Skewness:', rawSkewness);\n\nawait sdb.done();\n```"}
{"prompt":"How do I compute the Spheroid distance in kilometers?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute Spheroid distance in kilometers\nawait table.distance('area1', 'area2', 'distance_spheroid_km', {\n  method: 'spheroid',\n  unit: 'km',\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass a non-existent table name to hasTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check for a non-existent table\nconst exists = await sdb.hasTable('nonexistent_table');\nconsole.log('Does nonexistent_table exist?', exists); // Output: false\nawait sdb.done();\n```"}
{"prompt":"If I don't specify any options, what is the default sorting behavior?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sort(); // Sorts all columns in ascending order.\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify any options when using ranks?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default ranking: ascending order, no categories, with gaps\nawait table.ranks('points', 'defaultRank');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to keep only the rows that *have* missing values instead of removing them?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeMissing({ invert: true });\nawait sdb.done();\n```"}
{"prompt":"How can I enable debug mode for a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable({\n  debug: true,\n});\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that the data is sorted before generating a dot chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-01-01'), value: 10 },\n];\nawait table.loadArray(data);\nawait table.sort({ date: 'asc' });\nawait table.logDotChart('date', 'value');\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations within different categories and store the results in a new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute correlations within 'categoryColumn' and store in a new table\nconst correlationTable = await table.correlations({\n  categories: \"categoryColumn\",\n  outputTable: true,\n});\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table and only include specific columns in the new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"path/to/your/data.csv\");\n\nconst tableB = await tableA.cloneTable({ columns: [\"name\", \"age\", \"city\"] });\n\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column using a JavaScript type instead of a SQL type?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Using JavaScript type 'number' for a new column 'total'\nawait table.addColumn(\"total\", \"number\", \"column1 + column2\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass a non-string column to the `lower` method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempting to convert a non-string column will have no effect\nawait table.lower('nonStringColumn');\nawait sdb.done();\n```"}
{"prompt":"Does the `capitalize` method modify the original table data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.capitalize(\"myColumn\");\n// The documentation doesn't explicitly state if the table is modified in place.\n// It's best to assume it modifies the table in place.\nawait sdb.done();\n```"}
{"prompt":"What kind of data does the `writeMap` method expect as input for the `map` function?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./path/to/your/data.geojson\");\n\nconst mapFunction = (geoJsonData: { features: { properties: Record<string, unknown> }[] }) => {\n  // Your Observable Plot code here using geoJsonData\n  return plot({\n    // ...\n  });\n};\n\nawait table.writeMap(mapFunction, \"./output/map.png\");\n```\nThe `map` function expects an object with a `features` array, where each feature is an object with a `properties` field (which is a record of key-value pairs)."}
{"prompt":"How can I perform linear regressions separately for each category in a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.linearRegressions({ categories: \"categoryColumn\" });\n\nawait sdb.done();\n```"}
{"prompt":"How do I generate embeddings using Ollama?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Generate embeddings using Ollama\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  ollama: true, // Use Ollama\n  model: 'llama2' // Specify the Ollama model\n  cache: true, // Cache results locally\n  createIndex: true // Create index for faster similarity searches\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I use getFirstRow to retrieve the first row based on a date condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row where 'date' is after '2023-01-01'\nconst firstRowDate = await table.getFirstRow({\n  conditions: `date > new Date('2023-01-01')`\n});\nconsole.log(firstRowDate);\nawait sdb.done();\n```"}
{"prompt":"How do I round the regression results to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions with results rounded to 3 decimal places\nawait table.linearRegressions({\n  decimals: 3\n});\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to insert data from tables with different schemas?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Insert rows from 'tableB' into 'tableA', unifying columns\nawait tableA.insertTables(tableB, { unifyColumns: true });\n\nawait sdb.done();\n```"}
{"prompt":"How can I verify the cumulative sum after accumulation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.sort({ date: 'asc' });\nawait table.accumulate('sales', 'cumulativeSales');\n// Log the table to verify results\nawait table.logTable({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"How do I select multiple specific columns from a table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select specific columns, e.g., 'firstName' and 'lastName'\nawait table.selectColumns(['firstName', 'lastName']);\nawait sdb.done();\n```"}
{"prompt":"How can I use getMax in a real-world scenario, like finding the highest temperature recorded?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('weather_data.csv');\n\n// Find the highest temperature recorded\nconst maxTemperature = await table.getMax('temperature');\nconsole.log('Highest temperature:', maxTemperature);\n\nawait sdb.done();```"}
{"prompt":"Can I use logColumns without any parameters?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Yes, you can use it without parameters\nawait table.logColumns();\nawait sdb.done();\n```"}
{"prompt":"Can I identify outliers separately for different groups within my data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.outliersIQR(\"salary\", \"salaryOutlier\", { categories: \"gender\" });\nawait sdb.done();\n```"}
{"prompt":"How can I log the contents of a SimpleTable with specific options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myData');\nawait table.loadData('path/to/data.csv');\n// Log the first 10 rows with data types\nawait table.logTable({ nbRowsToLog: 10, types: true });\nawait sdb.done();\n```"}
{"prompt":"Can I prepend a message before the data when writing to a Google Sheet?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Prepend message to Google Sheet\nawait table.toSheet('https://docs.google.com/spreadsheets/d/.../edit#gid=0', {\n  prepend: 'Data exported on:',\n});\nawait sdb.done();\n```"}
{"prompt":"How do I select all rows from a table starting from row 10?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select all rows starting from row 10 (offset: 9)\nawait table.selectRows(Number.MAX_SAFE_INTEGER, { offset: 9 });\nawait sdb.done();\n```"}
{"prompt":"How can I write the data from a SimpleTable to a CSV file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.writeData(\"./output.csv\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide any conditions when using getTop?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Returns the first n rows without any filtering\nconst top5Rows = await table.getTop(5);\nconsole.log(top5Rows);\nawait sdb.done();\n```"}
{"prompt":"How do I log the last 3 rows of my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logBottom(3);\nawait sdb.done();\n```"}
{"prompt":"What does the `detach` option do when loading a database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.loadDB(\"./my_database.db\", { detach: false }); // Keeps the database attached\nawait sdb.done();\n```"}
{"prompt":"Can I compute lengths for multiple geometry columns in one operation?","completion":"No, each call to `length()` processes a single geometry column. You need to call it separately for each column.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute lengths for two different geometry columns\nawait table.length('length1', { column: 'geom1' });\nawait table.length('length2', { column: 'geom2' });\nawait sdb.done();\n```"}
{"prompt":"What does the `getSchema` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst schema = await table.getSchema();\nconsole.log(typeof schema);\nconsole.log(schema[0]);\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that logProjections() only runs if the table has geospatial data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check if the table has geospatial data before logging projections\nif (table.hasGeospatialData()) {\n  await table.logProjections();\n}\nawait sdb.done();\n```"}
{"prompt":"Can I use multiple conditions in getFirstRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row where 'category' is 'Book' and 'year' is 2023\nconst firstRowBooks2023 = await table.getFirstRow({\n  conditions: `category === 'Book' && year === 2023`\n});\nconsole.log(firstRowBooks2023);\nawait sdb.done();\n```"}
{"prompt":"How do I use the `aiEmbeddings` method to generate embeddings for a column named 'description' and store the results in a new column called 'description_embeddings'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n// await table.loadData(\"your_data.csv\");\n\nawait table.aiEmbeddings(\"description\", \"description_embeddings\", {});\n\n// You can add options as needed, for example:\n// await table.aiEmbeddings(\"description\", \"description_embeddings\", { cache: true, rateLimitPerMinute: 10 });\n\nawait sdb.done();\n```"}
{"prompt":"Can I load multiple databases into a single SimpleDB instance?","completion":"Yes, you can load multiple databases by calling `loadDB` multiple times with different files."}
{"prompt":"How do I log the last 10 rows of a table in reverse order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Log the last 10 rows, with the last row first\nawait table.logBottom(10);\nawait sdb.done();\n```"}
{"prompt":"How do I use Ollama as the AI provider?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { ollama: true },\n);\nawait sdb.done();\n```"}
{"prompt":"Can I specify multiple columns to determine if a row is a duplicate?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeDuplicates({ on: [\"firstName\", \"lastName\"] });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method will automatically find the geometry column\nawait table.typeGeo('geometryType');\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column to my table that contains the geometry type for each geometry?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column 'geometryType' with the type of each geometry\nawait table.typeGeo(\"geometryType\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I assign a specific number of quantiles to a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign 5 quantiles to 'dataColumn' and store in 'quantileResult'\nawait table.quantiles('dataColumn', 5, 'quantileResult');\nawait sdb.done();\n```"}
{"prompt":"How do I enable caching for the generated SQL queries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { cache: true },\n);\n// Remember to add .journalism-cache to your .gitignore file!\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the stringify option in logUniques?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// By default, stringify is false\nawait table.logUniques('category');\nawait sdb.done();\n```"}
{"prompt":"If my column is named 'age', how would I get the unique ages?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst uniqueAges = await table.getUniques(\"age\");\nconsole.log(uniqueAges);\nawait sdb.done();\n```"}
{"prompt":"How do I load all CSV files from a directory into a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\");\nawait sdb.done();\n```"}
{"prompt":"How do I load geospatial data into a table before creating a map?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./path/to/your/data.geojson\");\n```"}
{"prompt":"Can I combine multiple conditions using logical operators like '&&' (AND) or '||' (OR)?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst combinedData = await table.getData({ conditions: \"condition1 && condition2\" });\nconsole.log(combinedData);\nawait sdb.done();\n```"}
{"prompt":"What if my geometry column isn't named 'geometry'? How do I specify a different column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fixGeo(\"myGeomColumn\");\nawait sdb.done();\n```"}
{"prompt":"How can I convert a datetime column to a string in the format 'YYYY-MM-DD HH:MM:SS'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'timestamp' to string using format %Y-%m-%d %H:%M:%S\nawait table.convert({ timestamp: \"string\" }, { datetimeFormat: \"%Y-%m-%d %H:%M:%S\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I generate a basic line chart using `logLineChart`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-03-01'), value: 30 },\n  { date: new Date('2023-04-01'), value: 40 },\n];\n\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value');\n\nawait sdb.done();\n```"}
{"prompt":"How can I use getValues to retrieve a specific data type from a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get values and filter by specific type (e.g., number)\nconst numericValues = await table.getValues('price').filter(value => typeof value === 'number');\nconsole.log(numericValues); // e.g., [499.99, 29.99, 19.99]\n\nawait sdb.done();```"}
{"prompt":"What is the default behavior when inserting tables with different schemas?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Insert rows from 'tableB' into 'tableA'\nawait tableA.insertTables(tableB);\n\n// This will throw an error if schemas differ\n\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join and store the result in a new table with a specific name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\n\nconst tableC = await tableA.crossJoin(tableB, { outputTable: \"tableC\" });\nawait sdb.done();\n```"}
{"prompt":"Can I specify a custom start value when creating bins?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create bins starting at 10 with an interval of 5\nawait table.bins('age', 5, 'age_bins', { startValue: 10 });\nawait sdb.done();\n```"}
{"prompt":"How do I flip the coordinates of a geometry column using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Flip coordinates in the default geometry column\nawait table.flipCoordinates();\nawait sdb.done();\n```"}
{"prompt":"How can I cache computations in SimpleDB to avoid re-running them every time?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData('items.csv');\n  await table.summarize({\n    values: 'price',\n    categories: 'department',\n    summaries: ['min', 'max', 'mean'],\n  });\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I round a column to 2 decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Round 'column1' to 2 decimal places\nawait table.round('column1', { decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"If I don't provide any options, how does the `outliersIQR` method behave?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.outliersIQR(\"score\", \"isOutlier\");\nawait sdb.done();\n```\n// Without options, the method calculates outliers for the entire column without considering any categories."}
{"prompt":"Can I specify a time zone when adding the last update timestamp?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  lastUpdate: true,\n  timeZone: \"Canada/Eastern\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I write data to a JSON file with both date formatting and compression?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./output.json', { compression: true, formatDates: true });\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `decimals` option, how will the standard deviation be displayed?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst valueStdDev = await table.getStdDev(\"value\"); // No decimals specified\nconsole.log(valueStdDev);\nawait sdb.done();\n```\n// The standard deviation will be displayed with its full precision, without rounding."}
{"prompt":"How do I filter the last 5 rows where a specific column equals a certain value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last 5 rows where 'category' is 'Books'\nconst bottom5Books = await table.getBottom(5, {\n  conditions: `category === 'Books'`,\n});\nconsole.log(bottom5Books);\n\nawait sdb.done();\n```"}
{"prompt":"If I don't specify `outputTable`, will the original table be modified?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.selectRows(10);\n// The original 'table' is now modified to contain only the first 10 rows.\nawait sdb.done();\n```"}
{"prompt":"Does `cleanColumnNames` modify the table in place, or does it return a new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// cleanColumnNames modifies the table in place.\nawait table.cleanColumnNames();\n// The table object itself is modified.\nawait sdb.done();\n```"}
{"prompt":"How does `getNbValues()` calculate the total number of values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues); // Output: number of rows * number of columns\nawait sdb.done();\n```"}
{"prompt":"How can I select 5 rows starting from row 3 and store them in a new table named 'selected_rows'?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst selectedRowsTable = await table.selectRows(5, { offset: 2, outputTable: 'selected_rows' });\nawait sdb.done();\n```"}
{"prompt":"How do I filter rows based on multiple possible values for a column using the OR operator?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Keep rows where 'category' is 'Electronics' OR 'Appliances'\nawait table.filter(\"category === 'Electronics' || category === 'Appliances'\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column to count the number of vertices in each geometry?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new column 'vertexCount' to count vertices in each geometry\nawait table.nbVertices('vertexCount');\nawait sdb.done();\n```"}
{"prompt":"How do I select multiple columns from my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.selectColumns(['column1', 'column2', 'column3']);\nawait sdb.done();\n```"}
{"prompt":"Can I replace strings in multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.replace([\"column1\", \"column2\"], {\n  \"oldValue1\": \"newValue1\",\n  \"oldValue2\": \"newValue2\"\n});\nawait sdb.done();\n```"}
{"prompt":"How can I check if any DuckDB extensions are not loaded?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\n// Check if any extensions are not loaded\nconst hasUnloadedExtensions = extensions.some(ext => ext.loaded === false);\nconsole.log('Are there unloaded extensions?', hasUnloadedExtensions);\nawait sdb.done();\n```"}
{"prompt":"How can I sample 200 rows from a table and then write the result to a file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Sample 200 rows\nawait table.sample(200);\n// Write the sampled data to a file\nawait table.writeData(\"sampled_data.csv\");\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the first row without any filtering?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row without any filtering\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\nawait sdb.done();\n```"}
{"prompt":"How can I sort the data in a SimpleTable based on a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.sort({ \"column_name\": \"asc\" }); // Use \"desc\" for descending order\nawait sdb.done();\n```"}
{"prompt":"How do I specify the file path when writing the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Specify the desired file path\nawait sdb.writeDB('./exports/my_database.db');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to suppress the console output of logNbRows()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method logs by default, but you can't suppress it directly\nawait table.logNbRows(); // This will always log the row count\nawait sdb.done();\n```"}
{"prompt":"How do I handle non-numeric y-axis values in a dot chart?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Ensure y-axis values are numeric before plotting\n// This example assumes the data is already numeric\nawait table.logDotChart(\"xValue\", \"yValue\");\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use `getRow` with complex conditions involving multiple columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row with complex conditions involving multiple columns\nconst complexConditionRow = await table.getRow(`age > 30 AND (status === 'active' OR role === 'admin')`);\nconsole.log(complexConditionRow);\n\nawait sdb.done();\n```"}
{"prompt":"Does loadGeoData support loading data from a GeoJSON file without reprojecting?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I write geospatial data to a GeoJSON file with default settings?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.writeGeoData(\"./output.geojson\");\nawait sdb.done();\n```"}
{"prompt":"What data type will the new row number column have?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column named 'rowNumber' with the row number for each row\nawait table.addRowNumber(\"rowNumber\");\n\n// You can check the data types after adding the column\n// For example, using table.getColumnsTypes()\n\nawait sdb.done();\n```"}
{"prompt":"How do I display the schema of the table in a readable format?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst schema = await table.getSchema();\nconsole.table(schema);\nawait sdb.done();\n```"}
{"prompt":"How do I know which column to use with getMedian?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Log the schema to see available columns\nawait table.logSchema();\n\n// Use a numeric column from the schema\nconst medianValue = await table.getMedian('numericColumn');\nconsole.log('Median:', medianValue);\n\nawait sdb.done();\n```"}
{"prompt":"How do I enable debugging information logging?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ debug: true });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to clone a column that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Attempt to clone a non-existent column 'missingColumn'\n// This will likely result in an error, as the method expects the original column to exist.\n// You should check if the column exists before attempting to clone it.\n\n// await table.cloneColumn(\"missingColumn\", \"newColumn\"); // This line would likely cause an error.\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to rename the table to a name that's already taken?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// This will likely throw an error if a table with the name 'existing_table' already exists.\n// The documentation doesn't specify the exact error, but it's reasonable to expect one.\ntry {\n  await table.renameTable(\"existing_table\");\n} catch (error) {\n  console.error(\"Error renaming table:\", error);\n}\nawait sdb.done();\n```"}
{"prompt":"Is it possible to display the histogram in a more compact format? How would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logHistogram(\"height\", { compact: true });\nawait sdb.done();\n```"}
{"prompt":"How do I find the number of null values in each column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the number of null values per column\nconst description = await table.getDescription();\nconsole.log('Null Values:', description.map(col => ({\n  columnName: col.name,\n  nullCount: col.nulls\n}));\n\nawait sdb.done();\n```"}
{"prompt":"If my latitude and longitude columns have different names, how do I specify them in the `points` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.points(\"myLatColumn\", \"myLonColumn\", \"geometry\");\nawait sdb.done();\n```"}
{"prompt":"If I don't provide any options to `logUniques`, what happens?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logUniques(\"your_column\");\n// Logs up to 100 unique values for the specified column.\nawait sdb.done();\n```"}
{"prompt":"Is there a way to handle missing values when using getExtent?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Handle missing values by filtering them out before getting extent\nawait table.filterRows({ column: 'target_column', condition: 'not_null' });\nconst extent = await table.getExtent('target_column');\nconsole.log(extent);\n\nawait sdb.done();"}
{"prompt":"How do I keep rows based on multiple values in a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Keep only rows where 'job' is 'accountant' or 'developer'\nawait table.keep({ job: [\"accountant\", \"developer\"] });\n\nawait sdb.done();\n```"}
{"prompt":"What does the `linesToPolygons` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst result = await table.linesToPolygons(); // result will be undefined\nawait sdb.done();\n```\n// The method returns a Promise that resolves when the transformation is complete, but it doesn't return any value."}
{"prompt":"How can I compute distances without specifying any options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute distance with default settings\nawait table.distance('geomA', 'geomB', 'distance_default');\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to skip more rows than are present in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If the table has fewer than 10 rows, this will skip all available rows\nawait table.skip(10);\nawait sdb.done();\n```"}
{"prompt":"How can I skip the first 50 rows and select the next 100 rows from a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Skip first 50 rows and select next 100\nawait table.selectRows(100, { offset: 50 });\nawait sdb.done();\n```"}
{"prompt":"What does the rewind option do in getGeoData?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// The rewind option ensures polygon coordinates follow spherical winding order for D3.js compatibility\nconst rewoundGeojson = await table.getGeoData(undefined, { rewind: true });\nconsole.log(rewoundGeojson);\n\nawait sdb.done();\n```"}
{"prompt":"How do I create a basic line chart using `logLineChart`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-03-01'), value: 30 },\n  { date: new Date('2023-04-01'), value: 40 },\n];\nawait table.loadArray(data);\nawait table.convert({ date: 'string' }, { datetimeFormat: '%x' });\nawait table.logLineChart('date', 'value');\nawait sdb.done();\n```"}
{"prompt":"Can I use a different name for the new column that stores the boolean results?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.isClosedGeo(\"geometryClosed\");\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the first row where a specific column has a certain value? For example, how do I get the first row where the 'category' column is equal to 'Book'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst firstRowBooks = await table.getFirstRow({\n  conditions: `category === 'Book'`,\n});\nconsole.log(firstRowBooks);\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax to filter data in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Filter data using JavaScript syntax\nconst filteredData = await table.getData({ conditions: 'category === \"Book\"' });\nconsole.log(filteredData);\n\nawait sdb.done();\n```"}
{"prompt":"Can I specify which geometry column to use for the isClosedGeo method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check geometries in 'boundaryGeom' column and store results in 'isClosed'\nawait table.isClosedGeo('isClosed', { column: 'boundaryGeom' });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to update a column using values from another column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Update 'column1' with the value of 'column2'\nawait table.updateColumn('column1', `column2`);\nawait sdb.done();\n```"}
{"prompt":"How do I load a shapefile without reprojecting it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.shp.zip');\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior when loading a database?","completion":"The default behavior is to detach the database after loading its contents into memory."}
{"prompt":"How do I perform a simple left join between two tables, overwriting the current table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nconst table2 = sdb.newTable();\n\n// Assuming table1 and table2 are loaded with data\n\nawait table1.join(table2);\n```"}
{"prompt":"How can I check if filling was successful?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill NULLs in 'amount' column and log the result\nawait table.fill('amount');\nawait table.logTable({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"What if I want to get all rows from a certain category using getTop?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get all rows where category is 'Electronics'\nconst allElectronics = await table.getTop(Infinity, { conditions: `category === 'Electronics'` });\nconsole.log(allElectronics);\nawait sdb.done();\n```"}
{"prompt":"How can I set verbose mode to see the full prompt sent to the AI?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Enable verbose mode to see the full prompt\nawait table.aiQuery(\n  'List all customers with their total purchases',\n  { verbose: true }\n);\n\nawait sdb.done();\n```"}
{"prompt":"Is there any way to customize the output of logProjections()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Currently, logProjections() doesn't support customization\nawait table.logProjections();\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"Is there a way to compute intersection without modifying the table?","completion":"```ts\n// The method modifies the table in place. To keep the original data,\n// create a copy of the table before performing the operation.\nconst newTable = sdb.newTable();\nawait newTable.loadData('path/to/data.csv');\nawait newTable.intersection('geomA', 'geomB', 'intersect');\n```"}
{"prompt":"How do I calculate the mean of a numeric column in SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\n// Calculate the mean of the 'age' column\nconst meanAge = await table.getMean(\"age\");\nconsole.log(meanAge); // Outputs the mean value of the 'age' column\n\nawait sdb.done();\n```"}
{"prompt":"How can I assign quantiles to a column named 'score' based on categories defined in another column called 'category'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.quantiles(\"score\", 10, \"scoreQuantile\", { categories: \"category\" });\nawait sdb.done();\n```"}
{"prompt":"How do I set a column's data type to a floating-point number?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.setTypes({\n  myColumn: \"float\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I rename a single column using the renameColumns method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rename a single column using renameColumns method\nawait table.renameColumns({\n  'oldColumnName': 'newColumnName'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I see the order of tables in the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Tables are logged alphabetically\nawait sdb.logTableNames();\nawait sdb.done();\n```"}
{"prompt":"How do I enable logging of the total execution duration?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ logDuration: true });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"My geometry column is named 'shape'. How do I reproject this specific column to EPSG:3347, knowing the original projection is EPSG:4326?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.reproject(\"EPSG:3347\", { column: \"shape\", from: \"EPSG:4326\" });\nawait sdb.done();\n```"}
{"prompt":"Is the `left` method case-sensitive? If I have a column with mixed-case strings, will it affect the extraction?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.left(\"mixedCaseString\", 3);\nawait sdb.done();\n```"}
{"prompt":"Where is the cache stored in SimpleDB?","completion":"```ts\n// Cache is stored in `./.sda-cache` by default.\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  // Your computations here\n});\n\n// Add `./.sda-cache` to your `.gitignore` file\nawait sdb.done();\n```"}
{"prompt":"What data type is returned when I call `getColumns()`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst columns = await table.getColumns();\nconsole.log(typeof columns); // This will print 'object' because it returns an array\nawait sdb.done();\n```"}
{"prompt":"What if I want to replace NULL values with a calculated value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate the average and replace NULL values with it\nconst avg = await table.getAverage('numericColumn');\nawait table.replaceNulls('numericColumn', avg);\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve an existing table from SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Replace 'yourTableName' with the actual name of your table\nconst table = await sdb.getTable('yourTableName');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to confirm that the tables have been successfully removed?","completion":"The method returns a promise that resolves when the tables are removed, but no confirmation is provided. You can check the table list afterward."}
{"prompt":"How do I trim whitespace from a single column using the `trim` method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Trim whitespace from 'column1'\nawait table.trim('column1');\nawait sdb.done();\n```"}
{"prompt":"Can I use the `intersect` method with more than two geometry columns at a time?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation only describes the intersection of two columns.\n// It does not provide functionality for intersecting more than two columns at once.\n// To intersect multiple columns, you would need to perform multiple intersect operations.\n\n// Example (intersecting shape1 and shape2, then shape2 and shape3):\nawait table.intersect(\"shape1\", \"shape2\", \"intersect12\");\nawait table.intersect(\"shape2\", \"shape3\", \"intersect23\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I specify custom API credentials when writing to a Google Sheet?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use custom API credentials\nawait table.toSheet('https://docs.google.com/spreadsheets/d/.../edit#gid=0', {\n  apiEmail: 'my-api-email@serviceaccount.com',\n  apiKey: process.env.CUSTOM_GOOGLE_API_KEY,\n});\nawait sdb.done();\n```"}
{"prompt":"How can I perform a full outer join between two tables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a full outer join on the common column (auto-detected)\nawait tableA.join(tableB, {\n  type: 'full',\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\n```"}
{"prompt":"How can I use a custom cleaning function for AI responses in aiRowByRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use a custom cleaning function for AI responses in aiRowByRow\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    clean: (response) => {\n      // Clean and process the response here\n      return response.trim();\n    }\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"Can I compute the union of more than two geometry columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute the union of 'geomA' and 'geomB', then use the result to compute with 'geomC'\nawait table.union('geomA', 'geomB', 'unionAB');\nawait table.union('unionAB', 'geomC', 'finalUnion');\nawait sdb.done();\n```"}
{"prompt":"If my table has a column named 'score', how would I find the minimum score?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst minScore = await table.getMin(\"score\");\nconsole.log(minScore);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to check if the upper method has successfully converted the strings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert and check\nawait table.upper('columnName');\nawait table.logTable(); // Inspect the changes\nawait sdb.done();\n```"}
{"prompt":"How can I log only the data types of specific columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the data types of all columns\nconst dataTypes = await table.getTypes();\n\n// Log specific column types\nconsole.log('Data types for specific columns:', {\n  id: dataTypes.id,\n  name: dataTypes.name\n}); // Replace 'id' and 'name' with your actual column names\n\nawait sdb.done();\n```"}
{"prompt":"What happens if a row contains zeros in all specified columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// If a row has zeros in all specified columns, proportions will be NaN or zero\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary']);\n\nawait sdb.done();\n```"}
{"prompt":"How do I log the contents of a SimpleTable to the console?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.logTable({ nbRowsToLog: 10 }); // Logs the first 10 rows by default\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column to store the geometry types of my data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new column 'geometryType' to store the geometry types\nawait table.typeGeo('geometryType');\nawait sdb.done();\n```"}
{"prompt":"Does cleanColumnNames() affect the data in the columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clean column names without altering the data\nawait table.cleanColumnNames(); // Only column names are modified\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table to a new table with a specific name using a string parameter?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"data/sample.csv\");\n// Clone tableA to a new table named 'my_cloned_table' using a string parameter\nconst tableB = await tableA.cloneTable(\"my_cloned_table\");\nawait sdb.done();\n```"}
{"prompt":"How do I select a random sample of 50 rows from a table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Select 50 random rows from the table\nawait table.sample(50);\nawait sdb.done();\n```"}
{"prompt":"How do I select the first 100 rows from a table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Select the first 100 rows\nawait table.selectRows(100);\nawait sdb.done();\n```"}
{"prompt":"Can I use logNbRows() to check if my data was loaded correctly?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check if data was loaded by logging row count\nawait table.logNbRows(); // Should log the number of rows in your CSV file\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific value exists in the unique values returned by `getUniques`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst uniqueValues = await table.getUniques(\"columnName\");\nconst valueToCheck = \"specificValue\";\nconst exists = uniqueValues.includes(valueToCheck);\nconsole.log(exists);\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the union operation might fail?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\ntry {\n  await table.union('geomA', 'geomB', 'unionGeom');\n} catch (error) {\n  console.error('Union operation failed:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"Can I write the database to a file without any additional options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// No options needed, defaults are used\nawait sdb.writeDB('./my_exported_database.db');\nawait sdb.done();\n```"}
{"prompt":"How do I summarize all columns and store the results in a new table with a generated name?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst columns = await table.getColumns();\nconst summaryTable = await table.summarize({ values: columns, outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to visualize the buffered geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create a buffer and then write the data to visualize it\nawait table.buffer('buffered', 1);\nawait table.writeData('bufferedOutput.geojson');\nawait sdb.done();\n```"}
{"prompt":"How can I change the appearance of the map using custom CSS?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./path/to/your/data.geojson\");\n\nconst mapFunction = (geoJsonData: { features: { properties: Record<string, unknown> }[] }) => {\n  // Your Observable Plot code here\n  return plot({});\n};\n\nconst options = {\n  style: \"#chart {\n    background-color: #f0f0f0;\n    border: 1px solid black;\n  }\",\n};\n\nawait table.writeMap(mapFunction, \"./output/map.png\", options);\n```\nUse the `style` option in the `writeMap` method to provide a CSS string that will be applied to a `<div>` element wrapping the Plot map (which has the ID `chart`)."}
{"prompt":"How do I perform a join using multiple columns as join keys?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nconst table2 = sdb.newTable();\n\n// Assuming table1 and table2 are loaded with data\n\nawait table1.join(table2, { commonColumn: [\"name\", \"category\"] });\n```"}
{"prompt":"How do I check if points from one column are inside polygons from another column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check if points in 'pointColumn' are inside polygons in 'polygonColumn', store results in 'isInside'\nawait table.inside('pointColumn', 'polygonColumn', 'isInside');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to log the schema in a formatted table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconsole.table(schema); // Log the schema in a readable table format\n\nawait sdb.done();\n```"}
{"prompt":"How can I verify if a column named 'score' exists in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst hasScoreColumn = await table.hasColumn(\"score\");\nconsole.log(hasScoreColumn); // Output: true or false\nawait sdb.done();\n```"}
{"prompt":"If I select columns, does that modify the original table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.selectColumns(['columnA', 'columnB']);\n// The table now only contains columnA and columnB.\nawait sdb.done();\n```"}
{"prompt":"How do I log unique values for a column named 'id'?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log unique values for the 'id' column\nawait table.logUniques('id');\nawait sdb.done();\n```"}
{"prompt":"If I don't specify any options, what name will be assigned to the loaded database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.loadDB(\"./my_database.db\"); // The database will be named 'my_database'\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column that is the average of three numerical columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new column 'averageScore' as the average of 'score1', 'score2', and 'score3'\nawait table.addColumn('averageScore', 'float', '(score1 + score2 + score3) / 3');\nawait sdb.done();\n```"}
{"prompt":"If I don't provide any values for a column in `columnsAndValues`, will all rows be kept for that column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// This will keep rows where 'status' is 'active', but all rows will be kept for other columns.\nawait table.keep({ status: \"active\" });\n\nawait sdb.done();\n```"}
{"prompt":"How can I log the last 5 rows of a table while preserving the original order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Log the last 5 rows in their original order\nawait table.logBottom(5, { originalOrder: true });\nawait sdb.done();\n```"}
{"prompt":"How can I use hasColumn to validate the structure of my data before analysis?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Validate required columns exist before analysis\nconst requiredColumns = ['date', 'value'];\nlet isValidStructure = true;\n\nfor (const col of requiredColumns) {\n  if (!(await table.hasColumn(col))) {\n    isValidStructure = false;\n    break;\n  }\n}\n\nif (isValidStructure) {\n  console.log('Data structure is valid. Proceeding with analysis...');\n} else {\n  console.log('Invalid data structure. Required columns are missing.');\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I include a timestamp of the last update when writing to a Google Sheet?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Include last update timestamp\nawait table.toSheet('https://docs.google.com/spreadsheets/d/.../edit#gid=0', {\n  lastUpdate: true,\n  timeZone: 'Canada/Eastern',\n});\nawait sdb.done();\n```"}
{"prompt":"How do I compute a rolling average of a column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a 7-day rolling average of 'sales' with 3 preceding and 3 following rows\nawait table.rolling('sales', 'rollingAvgSales', 'mean', 3, 3);\n\nawait sdb.done();\n```"}
{"prompt":"How can I get the skewness of a column named 'price' and display it with one decimal place?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst priceSkew = await table.getSkew(\"price\", { decimals: 1 });\nconsole.log(priceSkew);\nawait sdb.done();\n```"}
{"prompt":"How do I create small multiples (faceted charts) with `logLineChart`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A' },\n  { date: new Date('2023-03-01'), value: 30, category: 'A' },\n  { date: new Date('2023-04-01'), value: 40, category: 'A' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B' },\n  { date: new Date('2023-03-01'), value: 35, category: 'B' },\n  { date: new Date('2023-04-01'), value: 45, category: 'B' },\n];\n\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', {\n  smallMultiples: 'category',\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I visualize the result of a union operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute the union and write the result to a GeoJSON file for visualization\nawait table.union('geomA', 'geomB', 'unionGeom');\nawait table.writeData('unionResult.geojson');\nawait sdb.done();\n```"}
{"prompt":"What happens if the tables I'm inserting from have different columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\nconst tableC = sdb.newTable();\nawait tableB.loadData(\"data/tableB.csv\");\nawait tableC.loadData(\"data/tableC.csv\");\n// Insert from tables with different columns, unifying columns\nawait tableA.insertTables([\"tableB\", \"tableC\"], { unifyColumns: true });\nawait sdb.done();\n```"}
{"prompt":"How do I round multiple columns using the ceiling method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Round 'columnA' and 'columnB' using ceiling method\nawait table.round(['columnA', 'columnB'], { method: 'ceiling' });\nawait sdb.done();\n```"}
{"prompt":"Can I add a message before the data in the Google Sheet?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  prepend: \"Report generated on:\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I fill NULL values in multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill NULL values in both 'revenue' and 'expenses' columns\nawait table.fill(['revenue', 'expenses']);\nawait sdb.done();\n```"}
{"prompt":"How do I concatenate two columns into a new column without any separator?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Concatenate 'column1' and 'column2' into 'combinedColumn'\nawait table.concatenate(['column1', 'column2'], 'combinedColumn');\nawait sdb.done();\n```"}
{"prompt":"Can I retrieve GeoJSON data without specifying any parameters?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Yes, you can retrieve GeoJSON data without specifying any parameters\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\n\nawait sdb.done();\n```"}
{"prompt":"If I don't specify an output table name, what will the new table be named?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"path/to/your/data.csv\");\n\nconst tableB = await tableA.cloneTable();\n// The new table will be named something like 'table1' or 'table2'\n\nawait sdb.done();\n```"}
{"prompt":"Can I remove columns and then add them back later?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove a column\nawait table.removeColumns('tempColumn');\n// To add it back, you would need to reload the data or modify the table structure\nawait sdb.done();\n```"}
{"prompt":"Can I chain the inside method with other operations?","completion":"```ts\n// Yes, you can chain methods as needed\nawait table.inside('pointGeom', 'polygon_geom', 'isContained')\n  .filter({ isContained: true })\n  .summarize({ values: 'area', categories: 'region' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to remove a table that doesn't exist in the database?","completion":"The documentation does not specify behavior for removing non-existent tables. It is assumed that no error is thrown, and the method proceeds without changes."}
{"prompt":"Is logTableNames() an asynchronous operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Yes, it returns a Promise\nawait sdb.logTableNames();\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use `getSum` on a column that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\ntry {\n  const invalidSum = await table.getSum(\"nonexistent_column\");\n  console.log(invalidSum);\n} catch (error) {\n  console.error(\"Error calculating sum:\", error);\n} // This will likely throw an error, so we wrap it in a try/catch block.\nawait sdb.done();\n```"}
{"prompt":"How do I select rows and store them in a new table with a specific name?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select 15 rows and store in a new table named 'selected_data'\nconst selectedData = await table.selectRows(15, { outputTable: 'selected_data' });\nawait sdb.done();\n```"}
{"prompt":"How can I filter data in a table using a SQL WHERE clause?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nconst filteredData = await table.getData({ conditions: \"category = 'Book'\" });\nconsole.log(filteredData);\nawait sdb.done();```"}
{"prompt":"How can I round the standard deviation result to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nconst stdDev = await table.getStdDev(\"numericColumn\", { decimals: 2 });\nconsole.log(stdDev);\nawait sdb.done();\n```"}
{"prompt":"How do I insert all rows from a table named 'customers' into a table named 'all_contacts'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst allContacts = sdb.newTable();\nconst customers = sdb.newTable();\n\nawait allContacts.insertTables(\"customers\");\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a directory while ignoring parsing errors?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { ignoreErrors: true });\nawait sdb.done();\n```"}
{"prompt":"How do I round multiple columns to the same number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.round([\"columnA\", \"columnB\"], { decimals: 1 });\nawait sdb.done();\n```"}
{"prompt":"How do I get the bounding box of geometries in the default geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst bbox = await table.getBoundingBox();\nconsole.log(bbox);\nawait sdb.done();\n```"}
{"prompt":"Can I store the results of the linear regression in a new table instead of overwriting the current one?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst regressionTable = await table.linearRegressions({ outputTable: true });\n\nawait sdb.done();\n```"}
{"prompt":"How do I prevent overwriting an existing database file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  file: 'mydatabase.db',\n  overwrite: false\n});\n// The database will not be overwritten if it exists.\nawait sdb.done();\n```"}
{"prompt":"How do I limit the number of rows loaded from the directory?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadDataFromDirectory(\"./my_data_directory\", { limit: 100 });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column name to `unnestGeo`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.unnestGeo(); // The method will attempt to find a geometry column automatically.\nawait sdb.done();\n```"}
{"prompt":"How can I compute proportions within specific categories, such as by region?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute proportions of 'column1' within each 'region' category\nawait table.proportionsVertical(\"column1\", \"perc\", { categories: \"region\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I set a specific context window for Ollama models?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Set a specific context window for Ollama models\nawait table.aiQuery(\n  'Find the most common product category',\n  { ollama: true, contextWindow: 2048 }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How can I round the variance result to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Calculate the variance of the 'values' column rounded to 2 decimal places\nconst roundedVariance = await table.getVar(\"values\", { decimals: 2 });\nconsole.log(roundedVariance);\nawait sdb.done();\n```"}
{"prompt":"What happens if the separator is not found in a particular row's value in the specified column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.splitExtract(\"someColumn\", \",\", 0, \"newColumn\");\n// If a row in 'someColumn' doesn't contain a comma, the corresponding value in 'newColumn' will be an empty string.\nawait sdb.done();\n```"}
{"prompt":"How do I sample 100 rows from a table without specifying a seed?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Sample 100 rows without a seed\nawait table.sample(100);\nawait sdb.done();\n```"}
{"prompt":"Can I replace strings in multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Replace 'oldString' with 'newString' in both 'column1' and 'column2'\nawait table.replace(['column1', 'column2'], { 'oldString': 'newString' });\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to make the bar chart wider or narrower?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Make the chart wider by setting width to 80\nawait table.logBarChart('category', 'value', { width: 80 });\nawait sdb.done();\n```"}
{"prompt":"How do I store the correlation results in a new table instead of overwriting the current table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Store correlation results in a new table\nconst correlationTable = await table.correlations({ outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"If I want to create bins for a column named 'score' with an interval of 10, but start the bins at 20 instead of the minimum value in the column, how would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.bins(\"score\", 10, \"score_group\", { startValue: 20 });\nawait sdb.done();\n```"}
{"prompt":"How do I convert a single column to lowercase using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.lower(\"columnName\");\nawait sdb.done();\n```"}
{"prompt":"Can I customize the format of the x-axis values in `logLineChart`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n];\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', { formatX: (d) => d.toISOString() });\nawait sdb.done();\n```"}
{"prompt":"If I want to perform linear regression for multiple categories, how do I specify them?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.linearRegressions({ categories: [\"category1\", \"category2\"] });\n\nawait sdb.done();\n```"}
{"prompt":"How can I change the suffix added to the new proportion columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsHorizontal(['Men', 'Women'], { suffix: 'Ratio' });\nawait sdb.done();\n```"}
{"prompt":"What if I need to get the extent of multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get extent for multiple columns\nconst extents = {\n  column1: await table.getExtent('column1'),\n  column2: await table.getExtent('column2')\n};\nconsole.log(extents);\n\nawait sdb.done();"}
{"prompt":"How do I create a new table in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait sdb.done();\n```"}
{"prompt":"How do I ensure only specific tables remain in the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.selectTables(['sales', 'marketing']); // Only these two tables will remain\nawait sdb.done();\n```"}
{"prompt":"What happens if the original projection of my data isn't detected automatically?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.shp.zip', { from: 'EPSG:3857' });\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"Can I call `removeTable()` multiple times on the same table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.removeTable();\n\n// Calling removeTable() again will likely result in an error, as the table is already removed.\n// await table.removeTable(); // This will likely throw an error.\nawait sdb.done();\n```"}
{"prompt":"How do I find out how many rows are in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst nbRows = await table.getNbRows();\nconsole.log(nbRows);\nawait sdb.done();\n```"}
{"prompt":"Can I chain the sample method with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Chain sample with other methods\nawait table.sample(100).then(() => {\n  // Perform additional operations after sampling\n  console.log('Sampling complete!');\n});\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve a table and then modify its data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Retrieve the table and modify its data\nconst table = await sdb.getTable('yourTableName');\nawait table.renameColumns({\n  oldColumn1: 'newColumn1',\n  oldColumn2: 'newColumn2'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the sum of proportions might not add up to 1?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute proportions and round to 2 decimals\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary'], {\n  decimals: 2\n});\n\n// The sum of proportions may not exactly add up due to rounding\nawait sdb.done();\n```"}
{"prompt":"How do I rename the current table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.renameTable(\"new_table_name\");\nawait sdb.done();\n```"}
{"prompt":"Can I specify a particular column to fix its geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fix invalid geometries in a specific column named 'myGeom'\nawait table.fixGeo('myGeom');\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that the bottom rows are returned in ascending order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last 10 rows in ascending order\nconst bottom10Ascending = await table.getBottom(10, {\n  originalOrder: true,\n});\nconsole.log(bottom10Ascending);\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to get the DuckDB extensions information without using async/await?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions using .then()\nsdb.getExtensions().then(extensions => {\n  console.log('Installed extensions:', extensions);\n});\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the mean without rounding?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get mean without rounding\nconst exactMean = await table.getMean('numericColumn');\nconsole.log('Exact Mean:', exactMean);\n\nawait sdb.done();\n```"}
{"prompt":"What does logTableNames() return?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// It returns a Promise<void>\nawait sdb.logTableNames();\nawait sdb.done();\n```"}
{"prompt":"Can I use a column name with spaces in the SQL expression for addColumn?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Use backticks to handle column names with spaces\nawait table.addColumn(\"total\", \"float\", \"`column name` + `another column`\");\nawait sdb.done();\n```"}
{"prompt":"How can I create small multiples (faceted charts) using `logDotChart`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n];\nawait table.loadArray(data);\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n});\nawait sdb.done();\n```"}
{"prompt":"If I provide a column name that doesn't exist in the table, will the `renameColumns` method throw an error?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.renameColumns({\n  \"nonExistentColumn\": \"newColumnName\"\n});\n// The method does not throw an error if the column does not exist.\nawait sdb.done();\n```\nThe documentation does not specify that an error is thrown if a column does not exist. It's likely the method will simply ignore the non-existent column."}
{"prompt":"Does cleanColumnNames() modify the original column names?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Original column name: 'Column With Spaces'\nawait table.cleanColumnNames(); // Column name becomes 'columnWithSpaces'\nawait sdb.done();\n```"}
{"prompt":"How do I apply an offset within specific categories, such as by city, to compare temperature values within each city?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/weather.csv\");\n// Clone 'temperature' as 'prev_temp_by_city', offsetting by 1 row within each 'city' category\nawait table.cloneColumnWithOffset(\"temperature\", \"prev_temp_by_city\", {\n  offset: 1,\n  categories: \"city\",\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What coordinate system is expected for the geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// The documentation states that the expected coordinate system is EPSG:4326 (WGS84).\n// This code snippet doesn't demonstrate the functionality, but clarifies the coordinate system.\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column name? Will the simplification still work?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.simplify(0.1);\nawait sdb.done();\n```\n// The method will automatically attempt to find a geometry column."}
{"prompt":"How can I store the aggregated results in a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Aggregate geometries and store results in a new table\nconst newTable = await table.aggregateGeo('union', { outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"What if I want to use the default unit but specify decimals?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default method 'srs' with 2 decimal places\nawait table.distance('geomA', 'geomB', 'distance_default_unit', {\n  decimals: 2\n});\nawait sdb.done();\n```"}
{"prompt":"What data types does getMax support?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// getMax supports string, number, boolean, Date, and null types\nconst maxNumber = await table.getMax('number_column');\nconst maxString = await table.getMax('string_column');\nconst maxBoolean = await table.getMax('boolean_column');\nconst maxDate = await table.getMax('date_column');\n\nconsole.log('Max number:', maxNumber);\nconsole.log('Max string:', maxString);\nconsole.log('Max boolean:', maxBoolean);\nconsole.log('Max date:', maxDate);\n\nawait sdb.done();```"}
{"prompt":"How do I merge data where geometries in one table are inside another table?","completion":"To merge data where geometries in the left table are entirely within those of the right table, use the `inside` method:"}
{"prompt":"How do I update a column using date functions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract year from 'date' column\nawait table.updateColumn('year', `YEAR(date)`);\nawait sdb.done();\n```"}
{"prompt":"How can I use `updateWithJS` to handle missing values in a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Replace missing values in 'rating' with the average rating\nconst averageRating = 3.5; // Calculate or define your average\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    rating: row.rating === null || row.rating === undefined ? averageRating : row.rating\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior of the `round` method when no options are provided?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Round 'value' column to nearest integer (default behavior)\nawait table.round(\"value\");\nawait sdb.done();\n```"}
{"prompt":"How can I provide my own instance of Ollama to the `aiQuery` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { Ollama } from 'ollama';\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst ollamaInstance = new Ollama();\n\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { ollama: ollamaInstance },\n);\nawait sdb.done();\n```"}
{"prompt":"How can I use getQuantile to find the minimum value of a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the minimum value (0th percentile) of 'temperature' column\nconst minValue = await table.getQuantile('temperature', 0);\nconsole.log('Minimum Temperature:', minValue);\n\nawait sdb.done();\n```"}
{"prompt":"What data types can I use when adding a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Valid types include:\n// \"integer\", \"float\", \"number\", \"string\", \"date\", \"time\", \"datetime\",\n// \"datetimeTz\", \"bigint\", \"double\", \"varchar\", \"timestamp\",\n// \"timestamp with time zone\", \"boolean\", \"geometry\"\nawait table.addColumn(\"newColumn\", \"integer\", \"1\");\nawait sdb.done();\n```"}
{"prompt":"Can I get the first quartile (25th percentile) of a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the first quartile (25th percentile) of 'income' column\nconst firstQuartileIncome = await table.getQuantile('income', 0.25);\nconsole.log('First Quartile Income:', firstQuartileIncome);\n\nawait sdb.done();\n```"}
{"prompt":"How do I specify the precision of coordinates when writing to a GeoJSON file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", { precision: 6 });\nawait sdb.done();\n```"}
{"prompt":"How do I get the number of tables in my database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get the count of tables in the database\nconst tables = await sdb.getTables();\nconsole.log('Number of tables:', tables.length);\nawait sdb.done();\n```"}
{"prompt":"If I have a column named 'Product ID', how will `cleanColumnNames` modify it?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Assuming a column named 'Product ID', it will be transformed to 'productId'\nawait table.cleanColumnNames();\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the sum of a numeric column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the sum of a numeric column\nconst totalSum = await table.getSum('quantity');\nconsole.log(totalSum);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the number of decimals?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Z-scores will not be rounded by default\nawait table.zScore('value', 'zScore');\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a seed when sampling?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Sampling without a seed uses a random seed\nawait table.sample(\"5%\");\nawait sdb.done();\n```"}
{"prompt":"Can I rename the column created by isClosedGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create the column and then rename it\nawait table.isClosedGeo('isClosed');\nawait table.renameColumns({ isClosed: 'closedStatus' });\nawait sdb.done();\n```"}
{"prompt":"How can I round the median value to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst median = await table.getMedian(\"numericColumn\", { decimals: 2 });\nconsole.log(median);\nawait sdb.done();\n```"}
{"prompt":"How do I write data to a Parquet file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./output.parquet');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to apply the right method to multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Apply right method to multiple columns in separate calls\nawait table.right('column1', 2);\nawait table.right('column2', 3);\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the 75th percentile of a column named 'salary' and round the result to one decimal place?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst seventyFifthPercentile = await table.getQuantile(\"salary\", 0.75, { decimals: 1 });\nconsole.log(seventyFifthPercentile);\nawait sdb.done();\n```"}
{"prompt":"How do I insert data from a single table into another table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Insert all rows from 'tableB' into 'tableA'\nawait tableA.insertTables(tableB);\n\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table to a new table with a default name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"path/to/your/data.csv\");\n\nconst tableB = await tableA.cloneTable();\n\nawait sdb.done();\n```"}
{"prompt":"How do I add a geometry column using a spatial function like ST_Centroid?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Add a new geometry column 'centroid' using the centroid of an existing 'country' geometry column\n// The projection of the new 'centroid' column is set to be the same as 'country'.\nawait table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"country\")`, {\n  projection: table.projections.country,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I sample 10% of my data with a seed of 12345 for consistent results?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Sample 10% with a fixed seed\nawait table.sample(\"10%\", { seed: 12345 });\nawait sdb.done();\n```"}
{"prompt":"Is `fillHoles` an asynchronous operation? If so, how do I await its completion?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fillHoles(); // fillHoles is an async function, so we await it.\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the first 5 rows where a specific column equals a certain value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst top5Rows = await table.getTop(5, { conditions: `category === 'Books'` });\nconsole.log(top5Rows);\nawait sdb.done();\n```"}
{"prompt":"What is the purpose of calling `sdb.done()`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"path/to/your/data.csv\");\nawait sdb.done(); // Ensures resources are released when finished.\n```"}
{"prompt":"How do I select a single column from my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.selectColumns(\"columnName\");\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column from timestamp to string with a specific format?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'timestampColumn' to string with format 'YYYY-MM-DD HH:mm:ss'\nawait table.convert({ timestampColumn: 'string' }, { datetimeFormat: '%Y-%m-%d %H:%M:%S' });\n\nawait sdb.done();\n```"}
{"prompt":"What is the default unit for the length computation?","completion":"The default unit is meters (`\"m\"`). Here's an example:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default unit is meters\nawait table.length('length_m');\nawait sdb.done();\n```"}
{"prompt":"Can I customize the output of logTypes()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The output of logTypes() cannot be customized directly,\n// but you can access the column types and format them as needed\nconst columnTypes = table.columnTypes;\nconsole.log('Customized data types:', columnTypes);\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometry column does not exist?","completion":"The method will throw an error if the specified geometry column is not found.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will throw an error if 'nonExistentColumn' does not exist\nawait table.length('length_m', { column: 'nonExistentColumn' });\nawait sdb.done();\n```"}
{"prompt":"Can I use this method to extract characters from a column containing numbers? What would happen if the number has fewer digits than the specified `numberOfCharacters`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.right(\"numberColumn\", 2); // This will work even if the number has fewer than 2 digits.\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where geometries in column2 are not valid polygons?","completion":"```ts\n// Ensure that 'polygonGeom' contains valid polygon geometries before using inside()\n// Invalid geometries may result in unexpected results or errors\nawait table.inside('pointGeom', 'polygonGeom', 'isInside');\n```"}
{"prompt":"Can I specify which column contains the geometries to unnest?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.unnestGeo(\"multiGeom\");\nawait sdb.done();\n```"}
{"prompt":"Is it possible to unnest GeoJSON data using this method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Unnest GeoJSON geometries in the default column\nawait table.unnestGeo();\nawait sdb.done();\n```"}
{"prompt":"Can I use multiple categories when applying the offset?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.cloneColumnWithOffset(\n  \"stock_price\",\n  \"prev_price_by_stock_and_exchange\",\n  {\n    offset: 1,\n    categories: [\"stock_symbol\", \"exchange\"],\n  },\n);\nawait sdb.done();\n```"}
{"prompt":"How can I sort a table by a specific column in descending order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\nawait table.sort({\n  columnToSort: \"desc\",\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I use the same column name for both input and output?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Overwrite the original column with Z-scores\nawait table.zScore('value', 'value');\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the third quartile (75th percentile) of a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the third quartile (75th percentile) of 'score' column\nconst thirdQuartileScore = await table.getQuantile('score', 0.75);\nconsole.log('Third Quartile Score:', thirdQuartileScore);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a geometry column when calling fillHoles?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method will automatically find the geometry column\nawait table.fillHoles();\nawait sdb.done();\n```"}
{"prompt":"Is the `renameTable` method case-sensitive?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Let's assume we initially have a table named 'MyTable'.\n// This code demonstrates that renaming to 'mytable' (lowercase) will likely create a new table.\nawait table.renameTable(\"mytable\");\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join between two tables and store the result in a new table with a generated name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\nawait tableA.loadData(\"data/tableA.csv\");\nawait tableB.loadData(\"data/tableB.csv\");\nconst tableC = await tableA.crossJoin(tableB, { outputTable: true });\nawait tableC.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I calculate a 5-day rolling average of a column named 'price'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.rolling(\"price\", \"rollingAvgPrice\", \"mean\", 2, 2);\nawait sdb.done();\n```"}
{"prompt":"How do I handle MultiPolygon geometries using unnestGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Unnest MultiPolygon geometries into individual Polygon geometries\nawait table.unnestGeo();\nawait sdb.done();\n```"}
{"prompt":"Can I insert rows without loading data from a file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Insert rows directly without loading data\nconst initialRows = [\n  { id: 1, name: 'Frank' },\n];\nawait table.insertRows(initialRows);\n\nawait sdb.done();```"}
{"prompt":"Can I retrieve the version information of installed DuckDB extensions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\n// Log the version information of each extension\nextensions.forEach(ext => console.log('Extension:', ext.extension_name, 'Version:', ext.version));\nawait sdb.done();\n```"}
{"prompt":"How do I load all CSV files from a specific directory into my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadDataFromDirectory(\"./my_data_directory\");\nawait sdb.done();\n```"}
{"prompt":"If a column has missing values, how can I find out how many are missing?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst description = await table.getDescription();\nconst firstColumnDescription = description[0];\nconsole.log(firstColumnDescription.nullCount);\nawait sdb.done();\n```"}
{"prompt":"Can I stack multiple columns at once using the `longer` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Stack 'Year1', 'Year2', and 'Year3' into 'Year' and 'Value'\nawait table.longer(['Year1', 'Year2', 'Year3'], 'Year', 'Value');\n\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table to a new table with a specific name, filter rows, and select specific columns all at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"data/sample.csv\");\n// Clone tableA to a specific table name with filtered data and specific columns\nconst tableB = await tableA.cloneTable({\n  outputTable: \"filtered_data\",\n  conditions: `status = 'active' AND created_date >= '2023-01-01'`,\n  columns: [\"name\", \"status\", \"created_date\"],\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a separator in the concatenate method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// No separator means values are concatenated directly without any space or character in between\nawait table.concatenate(['part1', 'part2'], 'fullPart');\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve a table and then log its first few rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Retrieve the table and log its data\nconst table = await sdb.getTable('yourTableName');\nawait table.logTable({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"Does the `lower` method modify the original table data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.lower(\"myColumn\");\n// The values in 'myColumn' are now lowercase.\nawait sdb.done();\n```"}
{"prompt":"Can I specify a path other than the current directory for the output file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Save the database to a specific path\nawait sdb.writeDB(\"/path/to/my/database.db\");\nawait sdb.done();\n```"}
{"prompt":"How do I rename the new boolean column created by the inside method?","completion":"```ts\n// First, perform the containment check\nawait table.inside('pointColumn', 'polygonsColumn', 'tempInside');\n// Then rename the column\nawait table.renameColumns({ tempInside: 'isInside' });\n```"}
{"prompt":"What happens if no rows or multiple rows match the condition in `getRow`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row without throwing an error if multiple matches or no match\nconst flexibleRow = await table.getRow(`status = 'pending'`, { noCheck: true });\nconsole.log(flexibleRow);\n\nawait sdb.done();\n```"}
{"prompt":"What data type should the columns specified in the `union` method contain?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The columns specified in the union method should contain geometries.\n// The exact geometry type (e.g., Polygon, LineString) is not specified in the documentation,\n// but they must be valid geometries.\n// await table.union(\"geometry_column_1\", \"geometry_column_2\", \"union_geometry\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I round the skewness result to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate skewness with 2 decimal places\nconst roundedSkewness = await table.getSkew('numericColumn', { decimals: 2 });\nconsole.log('Rounded Skewness:', roundedSkewness);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I specify a numberOfCharacters value larger than the string length?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If the string is shorter than numberOfCharacters, it returns the entire string\nawait table.right('shortString', 10);\nawait sdb.done();\n```"}
{"prompt":"I want to use Ollama to generate the embeddings. How do I configure the `aiEmbeddings` method to use Ollama?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n// await table.loadData(\"your_data.csv\");\n\nawait table.aiEmbeddings(\"text_column\", \"embeddings\", { ollama: true });\n\n// If you have a specific Ollama instance:\n// const ollama = new Ollama();\n// await table.aiEmbeddings(\"text_column\", \"embeddings\", { ollama: ollama });\n\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior of the `correlations` method if no options are provided?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Default: compute correlations for all numeric columns, overwriting current table\nawait table.correlations();\nawait sdb.done();\n```"}
{"prompt":"Can I remove multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove 'columnA' and 'columnB' from the table\nawait table.removeColumns(['columnA', 'columnB']);\n\nawait sdb.done();\n```"}
{"prompt":"Can I load a SQLite database file using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.loadDB(\"./my_database.sqlite\");\nawait sdb.done();\n```"}
{"prompt":"If I want to check for a column named 'name', how would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst hasNameColumn = await table.hasColumn(\"name\");\nconsole.log(hasNameColumn); // Output: true or false\nawait sdb.done();\n```"}
{"prompt":"What if some of the columns in `columns` do not exist in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// If some columns do not exist, they will be ignored\nawait table.longer(['2021', '2024'], 'year', 'employees'); // 2024 is not present and will be skipped\n\nawait sdb.done();\n```"}
{"prompt":"What data type does the `getExtensions` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst extensions = await sdb.getExtensions();\nconsole.log(typeof extensions); // Output: object\nawait sdb.done();\n```"}
{"prompt":"Can I round the result of `getMean` to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst meanValue = await table.getMean(\"value\", { decimals: 2 });\nconsole.log(meanValue);\nawait sdb.done();\n```"}
{"prompt":"How can I specify a custom name for the loaded database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.loadDB(\"./archive.db\", { name: \"archive_db\" });\nawait sdb.done();\n```"}
{"prompt":"Can I change the number of bins used in the histogram? How would I create a histogram of 'income' with 15 bins?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logHistogram(\"income\", { bins: 15 });\nawait sdb.done();\n```"}
{"prompt":"How can I create a dot chart with small multiples using the logDotChart method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A' },\n  { date: new Date('2023-03-01'), value: 30, category: 'A' },\n  { date: new Date('2023-04-01'), value: 40, category: 'A' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B' },\n  { date: new Date('2023-03-01'), value: 35, category: 'B' },\n  { date: new Date('2023-04-01'), value: 45, category: 'B' },\n];\nawait table.loadArray(data);\nawait table.convert({ date: 'string' }, { datetimeFormat: '%x' });\nawait table.logDotChart('date', 'value', {\n  smallMultiples: 'category'\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use accumulate on a filtered subset of data?","completion":"```ts\n// Yes, apply filters before accumulating.\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Filter data first\nawait table.filter({ region: 'north' });\nawait table.sort({ date: 'asc' });\nawait table.accumulate('sales', 'cumulativeSales');\nawait sdb.done();\n```"}
{"prompt":"Can I use a more complex SQL expression to define the values for the new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// You can use any valid SQL expression in the definition.\nawait table.addColumn(\"calculatedValue\", \"float\", \"(column1 * 2) + (column2 / 3)\");\nawait sdb.done();\n```"}
{"prompt":"Is it possible to select all tables except one?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Select all tables except 'temp'\nawait sdb.selectTables(sdb.tables.filter(table => table.name !== 'temp'));\nawait sdb.done();\n```"}
{"prompt":"Can I chain cleanColumnNames() with other methods?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clean column names and then log the table\nawait table.cleanColumnNames().then(() => {\n  console.log('Column names cleaned!');\n});\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleDB instance and load data into a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait table.loadData('path/to/your/data.csv');\nawait sdb.done();\n```"}
{"prompt":"Can I get the table names in a specific order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get table names sorted alphabetically\nconst tableNames = await sdb.getTableNames();\nconsole.log('Sorted table names:', tableNames);\nawait sdb.done();\n```"}
{"prompt":"Is the `simpleDB` parameter mandatory when creating a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"my_table\");\n// The SimpleDB instance is created and used internally by the newTable method.\nawait sdb.done();\n```"}
{"prompt":"How does the skip method affect the data in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Skip 2 rows and see the remaining data\nawait table.skip(2);\nawait table.logTable(); // Logs the table without the first 2 rows\nawait sdb.done();\n```"}
{"prompt":"What does the `crossJoin` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\n\nconst resultTable = await tableA.crossJoin(tableB); // resultTable is the SimpleTable instance containing the cross-joined data\nawait sdb.done();\n```"}
{"prompt":"How do I keep only the rows where a specific column has a single value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Keep only rows where 'status' is 'active'\nawait table.keep({ status: \"active\" });\n\nawait sdb.done();\n```"}
{"prompt":"How does the `cache` option work, and where are the cached results stored?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load some data\nawait table.loadArray([{ text: \"Some text\" }]);\n\n// Use aiRowByRow with caching\nawait table.aiRowByRow(\n  \"text\",\n  \"summary\",\n  \"Summarize this text.\",\n  {\n    cache: true, // Enable caching\n  },\n);\n\n// Cached results are stored in the .journalism-cache directory.\n\nawait sdb.done();\n```"}
{"prompt":"Does the `intersect` method modify the original geometry columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation does not indicate that the original geometry columns are modified.\n// The method creates a new column to store the intersection results, leaving the original columns unchanged.\n\n// Example:\nawait table.intersect(\"shape1\", \"shape2\", \"intersected\");\n\n// 'shape1' and 'shape2' remain unchanged.\n\nawait sdb.done();\n```"}
{"prompt":"How do I use Vertex AI instead of the default AI provider?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { vertex: true },\n);\nawait sdb.done();\n```"}
{"prompt":"How do I log the extent of a column in a geospatial table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst boundaries = sdb.newTable('boundaries');\nawait boundaries.loadGeoData('./boundaries.geojson');\n// Log the extent of a numeric column in the geospatial table\nawait boundaries.logExtent('area');\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the standard deviation of a column named 'age' in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst ageStdDev = await table.getStdDev(\"age\");\nconsole.log(ageStdDev);\nawait sdb.done();\n```"}
{"prompt":"Can I use regular expressions to replace patterns in a column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Replace any sequence of one or more digits with a hyphen in 'column1' using regex\nawait table.replace(\"column1\", { \"\\d+\": \"-\" }, { regex: true });\nawait sdb.done();\n```"}
{"prompt":"Can I insert rows and then write the updated data to a file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Insert new rows\nconst newRows = [\n  { id: 5, name: 'Jack' },\n];\nawait table.insertRows(newRows);\n\n// Write the updated data to a CSV file\nawait table.writeData('updated_data.csv');\n\nawait sdb.done();```"}
{"prompt":"Can I use getTableNames to filter tables that match a certain pattern?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get table names and filter for those starting with 'user'\nconst tableNames = await sdb.getTableNames();\nconst userTables = tableNames.filter(name => name.startsWith('user'));\nconsole.log('User-related tables:', userTables);\nawait sdb.done();\n```"}
{"prompt":"If my geometries are in a column named 'pointsGeom', how do I specify that column when creating a buffer?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.buffer(\"pointsBuffer\", 10, { column: \"pointsGeom\" });\nawait sdb.done();\n```"}
{"prompt":"If I load a `.json` or `.geojson` file, does the `toWGS84` option still have an effect?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadGeoData(\"./some-data.geojson\", { toWGS84: true });\n// The coordinates are automatically flipped for .json or .geojson files, so toWGS84 has no additional effect.\n\nawait sdb.done();\n```"}
{"prompt":"What if my geometry data is in a column with a specific name, like 'shape', instead of the default? How do I specify that column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Get the geometry type for geometries in a specific column named 'featureGeom'\nawait table.typeGeo(\"featureType\", { column: \"featureGeom\" });\n\nawait sdb.done();\n```"}
{"prompt":"How can I select a specific number of rows and keep the original table unchanged?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Select 20 rows without modifying the original table\nconst selectedRows = await table.selectRows(20, { outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the column doesn't exist in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// This will throw an error if 'weight' doesn't exist\ntry {\n  const weightStdDev = await table.getStdDev('weight');\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I calculate the area and store it in a column with a different name than 'area_m2' or 'area_km2'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.area(\"myAreaColumn\");\nawait sdb.done();\n```"}
{"prompt":"How do I summarize all columns and store the results in a new table named 'mySummary'?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst columns = await table.getColumns();\nconst mySummaryTable = await table.summarize({ values: columns, outputTable: 'mySummary' });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to remove rows using OR conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'category' is 'Electronics' OR 'Appliances'\nawait table.removeRows(\n  `category === 'Electronics' || category === 'Appliances`);\nawait sdb.done();\n```"}
{"prompt":"Can I use logical operators like `&&` or `||` in the `conditions` string?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst top2Filtered = await table.getTop(2, { conditions: `category === 'Books' && price > 20` });\nconsole.log(top2Filtered);\nawait sdb.done();\n```"}
{"prompt":"How do I round a column to one decimal place using the round method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Round 'temperature' column to 1 decimal place\nawait table.round(\"temperature\", { decimals: 1 });\nawait sdb.done();\n```"}
{"prompt":"How do I extract the first part of a string split by a space?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Split 'fullName' by space and extract the first part (index 0) into a new 'firstName' column\nawait table.splitExtract('fullName', ' ', 0, 'firstName');\n\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column to a table that calculates the sum of two existing columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Add a new column 'total' as a float, calculated from 'column1' and 'column2'\nawait table.addColumn(\"total\", \"float\", \"column1 + column2\");\nawait sdb.done();\n```"}
{"prompt":"How does `longer` handle duplicate column names when stacking?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// If there are duplicate column names, they will be stacked together\nawait table.longer(['2021', '2022', '2023'], 'year', 'employees');\n\nawait sdb.done();\n```"}
{"prompt":"I have two tables, 'orders' and 'returns'. How can I insert all rows from both into a single table called 'all_transactions'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst allTransactions = sdb.newTable();\nconst orders = sdb.newTable();\nconst returns = sdb.newTable();\n\nawait allTransactions.insertTables([\"orders\", \"returns\"]);\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows based on multiple values in a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Keep only rows where 'job' is 'accountant' or 'developer'\nawait table.keep({ job: [\"accountant\", \"developer\"] });\nawait sdb.done();\n```"}
{"prompt":"How do I specify a different output table for the similarity search results?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n\nconst similarResults = await table.aiVectorSimilarity(\n  \"your search query\",\n  \"your embeddings column\",\n  5, // Number of results\n  {\n    outputTable: \"similar_results\", // Specify the output table name\n  },\n);\n\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I calculate proportions within categories defined by another column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsVertical(\"valueColumn\", \"proportionColumn\", { categories: \"categoryColumn\" });\nawait sdb.done();\n```"}
{"prompt":"How do I get a list of all tables in the SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\nawait sdb.done();\n```"}
{"prompt":"How do I summarize 'sales' by 'region' with a specific summary operation (mean)?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.summarize({ values: 'sales', categories: 'region', summaries: 'mean' });\nawait sdb.done();\n```"}
{"prompt":"How do I unnest geometries in the default geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Unnest geometries in the default column\nawait table.unnestGeo();\nawait sdb.done();\n```"}
{"prompt":"What happens if the index is out of bounds when using splitExtract?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// If the index is out of bounds, an empty string will be returned for that row\nawait table.splitExtract('invalidColumn', ',', 10, 'newColumn');\n\nawait sdb.done();\n```"}
{"prompt":"How do I log the number of rows in my table to the console?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the number of rows\nconst nbRows = await table.getNbRows();\nconsole.log(`The table has ${nbRows} rows.`);\nawait sdb.done();\n```"}
{"prompt":"Can I remove a table using a SimpleTable instance instead of a name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst employeesTable = sdb.newTable(\"employees\");\n// ... load data ... (not shown in example)\nawait sdb.removeTables(employeesTable);\nawait sdb.done();\n```"}
{"prompt":"What happens if I specify a number larger than the string length?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If strings are shorter than 10, it returns the entire string\nawait table.left('shortString', 10);\nawait sdb.done();\n```"}
{"prompt":"How do I flip the coordinates in a specific column named 'location'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.flipCoordinates(\"location\");\nawait sdb.done();\n```"}
{"prompt":"Can I use getMedian on a column with an even number of elements?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate median for a column with even number of elements\nconst medianEven = await table.getMedian('evenColumn');\nconsole.log('Median for even column:', medianEven);\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the column names are not known in advance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Dynamically determine columns to select\nconst dynamicColumns = ['dynamicCol1', 'dynamicCol2'];\nawait table.selectColumns(dynamicColumns);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to set the data type for a geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  location: 'geometry'\n});\nawait sdb.done();\n```"}
{"prompt":"What does the `getBoundingBox` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// The documentation states that the method returns an array in the format [minLat, minLon, maxLat, maxLon].\n// This code snippet doesn't demonstrate the functionality, but clarifies the return format.\n\n// Example: [40.0, -100.0, 50.0, -70.0]\n\nawait sdb.done();\n```"}
{"prompt":"How do I extract the first two characters from a column named 'productCode' using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Extract first 2 characters from 'productCode' column\nawait table.left(\"productCode\", 2);\nawait sdb.done();\n```"}
{"prompt":"How can I filter the first row by a specific category using JavaScript syntax in the conditions?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst firstRowBooks = await table.getFirstRow({\n  conditions: `category === 'Book'`,\n});\nconsole.log(firstRowBooks);\nawait sdb.done();\n```"}
{"prompt":"Can I extract only latitude or only longitude using the latLon method?","completion":"No, the latLon method extracts both latitude and longitude simultaneously into two new columns."}
{"prompt":"How do I log just the names of the columns in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logColumns();\nawait sdb.done();\n```"}
{"prompt":"How do I get the minimum and maximum values of a specific column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the extent of a specific column\nconst extent = await table.getExtent('column_name');\nconsole.log(extent); // Output: [min, max]\n\nawait sdb.done();"}
{"prompt":"Can I use both `entireString` and `regex` options together?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// According to the documentation, regex and entireString cannot be used together.\n// This example will likely result in an error or unexpected behavior.\n// await table.replace(\"myColumn\", { \"oldValue\": \"newValue\" }, { entireString: true, regex: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify categories in the rolling method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling minimum without categories\nawait table.rolling('price', 'rollingMinPrice', 'min', 4, 0);\n\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that the geometries are processed correctly before calling removeIntersection?","completion":"```ts\n// Load your data and ensure both geometry columns exist in the table.\nawait table.loadData('path/to/your/data.csv');\nawait table.removeIntersection('geomA', 'geomB', 'geomResult');\n```"}
{"prompt":"How do I load data from a JavaScript array into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { name: \"Alice\", age: 30 },\n  { name: \"Bob\", age: 25 },\n];\n\nawait table.loadArray(data);\nawait sdb.done();\n```"}
{"prompt":"Can I keep rows based on a single value in one column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'status' is 'active'\nawait table.keep({ status: 'active' });\nawait sdb.done();\n```"}
{"prompt":"What is the return type of `getRow`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row and check the return type\nconst row = await table.getRow(`id === 1`);\nconsole.log(row); // Returns an object with column names as keys\n\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where a specific column has either SQL NULL or a custom string?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'status' is SQL NULL or 'Not Available'\nawait table.removeMissing({ columns: 'status', missingValues: ['Not Available'] });\nawait sdb.done();\n```"}
{"prompt":"Can I customize the suffix of the new proportion columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Customize the suffix to 'Prop'\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary'], {\n  suffix: 'Prop'\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I compute a rolling median using the rolling method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/temperature.csv\");\n// Compute a rolling median of 'temperature'\nawait table.rolling(\"temperature\", \"rollingMedianTemp\", \"median\", 3, 3);\nawait sdb.done();\n```"}
{"prompt":"Can I customize the width of the bar chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logBarChart('category', 'value', { width: 60 });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to check for multiple columns and handle each case separately?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check for multiple columns and handle each case\nconst hasId = await table.hasColumn('id');\nconst hasName = await table.hasColumn('name');\n\nif (hasId && hasName) {\n  console.log('Both id and name columns exist');\n} else if (hasId) {\n  console.log('Only id column exists');\n} else if (hasName) {\n  console.log('Only name column exists');\n} else {\n  console.log('Neither id nor name columns exist');\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I use logDescription() without loading data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Attempting to log description without loading data will result in an error\nawait table.logDescription(); // Error: No data loaded\nawait sdb.done();\n```"}
{"prompt":"Is there a way to sample all rows in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Sampling 100% will return all rows\nawait table.sample('100%');\nawait sdb.done();\n```"}
{"prompt":"How can I rename columns in a SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myData');\nawait table.loadData('path/to/data.csv');\n// Rename columns\nawait table.renameColumns({\n  oldColumnName1: 'newColumnName1',\n  oldColumnName2: 'newColumnName2'\n});\nawait sdb.done();\n```"}
{"prompt":"How can I rename columns in a SimpleTable after loading data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.renameColumns({\n  oldColumnName: \"newColumnName\",\n});\nawait sdb.done();\n```"}
{"prompt":"Is it necessary to specify a column name if the table only has one geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// If there's only one geometry column, you can omit the column name.\nawait table.fixGeo();\nawait sdb.done();\n```"}
{"prompt":"How do I capitalize the first letter of strings in a single column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Capitalize the 'name' column\nawait table.capitalize(\"name\");\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior for rounding in rolling aggregations?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// By default, no rounding is applied (decimals: undefined).\nawait table.rolling(\"sales\", \"rollingAvgSales\", \"mean\", 3, 3);\nawait sdb.done();\n```"}
{"prompt":"If I call `hasTable` with a table name that doesn't exist, what will the method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst exists = await sdb.hasTable(\"nonexistent_table\");\nconsole.log(exists); // Output: false\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the total sum of a numeric column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sales.csv\");\nconst totalQuantity = await table.getSum(\"quantity\");\nconsole.log(totalQuantity);\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax to filter the first row?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row where 'category' is 'Book' using JS syntax\nconst firstRowBooks = await table.getFirstRow({\n  conditions: `category === 'Book'`\n});\nconsole.log(firstRowBooks);\nawait sdb.done();\n```"}
{"prompt":"How do I enable debugging information?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  debug: true\n});\n// Debugging information will be logged.\nawait sdb.done();\n```"}
{"prompt":"If I call `setTypes` multiple times, will it overwrite the previous types?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// First call to setTypes\nawait table.setTypes({\n  myColumn: \"string\"\n});\n\n// Second call to setTypes - this will overwrite the previous types\nawait table.setTypes({\n  myColumn: \"integer\"\n});\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to normalize a column based on multiple categories? How would I specify them?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.normalize(\"valueColumn\", \"normalizedValue\", { categories: [\"category1\", \"category2\"] });\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all data from a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nconst allData = await table.getData();\nconsole.log(allData);\nawait sdb.done();```"}
{"prompt":"How do I check if two geometry columns intersect using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check if geometries in 'geomA' and 'geomB' intersect, storing results in 'doIntersect'\nawait table.intersect('geomA', 'geomB', 'doIntersect');\nawait sdb.done();\n```"}
{"prompt":"Can I choose a different name for the row number column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column named 'lineNumber' with the row number for each row\nawait table.addRowNumber(\"lineNumber\");\n\nawait sdb.done();\n```"}
{"prompt":"How does SimpleDB handle cache invalidation?","completion":"```ts\n// Cache is invalidated if the function content changes or if TTL expires.\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData('items.csv');\n  // If this function's content changes, cache will be invalidated\n}, { ttl: 3600 });\n\nawait sdb.done();\n```"}
{"prompt":"How do I add a column to my table that contains the number of vertices in each geometry?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column 'vertexCount' with the number of vertices for each geometry\n// The method will automatically detect the geometry column.\nawait table.nbVertices(\"vertexCount\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle multiple categories for rolling aggregations?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/transactions.csv\");\n// Compute a rolling sum within multiple categories: 'customer_id' and 'region'\nawait table.rolling(\"transactions\", \"rollingSumTransactions\", \"sum\", 5, 0, {\n  categories: [\"customer_id\", \"region\"],\n});\nawait sdb.done();\n```"}
{"prompt":"How do I log rows where a column is not equal to a certain value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable({ conditions: `category !== 'inactive'` });\nawait sdb.done();\n```"}
{"prompt":"Can I use the `nbVertices` method multiple times on the same table with different column names?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// You can use the nbVertices method multiple times with different column names.\nawait table.nbVertices(\"vertexCount1\");\nawait table.nbVertices(\"vertexCount2\", { column: \"myGeom\" });\n\n// This will add two new columns: 'vertexCount1' and 'vertexCount2'\nawait table.logTable({ nbRowsToLog: 5 });\n\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL syntax for filtering when getting the bottom rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last 5 rows where 'category' is 'Books' using SQL syntax\nconst bottom5BooksSql = await table.getBottom(5, {\n  conditions: \"category = 'Books'\",\n});\nconsole.log(bottom5BooksSql);\n\nawait sdb.done();\n```"}
{"prompt":"Can I get the GeoJSON data without using any options?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming the table is loaded with data\n\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\nawait sdb.done();\n```"}
{"prompt":"Can I remove multiple columns at once using the removeColumns method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove multiple columns: 'column1' and 'column2'\nawait table.removeColumns(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"How do I fix invalid geometries in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fixGeo();\nawait sdb.done();\n```"}
{"prompt":"What happens if the tables have different columns when inserting?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Insert rows from 'tableB' into 'tableA', unifying columns\nawait tableA.insertTables(tableB, { unifyColumns: true });\n\nawait sdb.done();\n```"}
{"prompt":"How can I store correlation results in a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Store correlation results in a new table\nconst correlationTable = await table.correlations({ outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to count the number of columns in the schema?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconst columnCount = schema.length;\nconsole.log('Number of columns:', columnCount); // Log the number of columns\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle parsing errors during file loading?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadDataFromDirectory(\"./my_data_directory\", { ignoreErrors: true });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the median without rounding?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get median without rounding by omitting the decimals option\nconst medianUnrounded = await table.getMedian('numericColumn');\nconsole.log('Median unrounded:', medianUnrounded);\n\nawait sdb.done();\n```"}
{"prompt":"Can I fill NULL values in multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fill([\"column1\", \"column2\", \"column3\"]);\nawait sdb.done();\n```"}
{"prompt":"Is it possible to log a specific number of rows and include column types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable({ nbRowsToLog: 20, types: true });\nawait sdb.done();\n```"}
{"prompt":"If my data has different column names, how do I specify which columns to use for the labels and values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { product: \"A\", sales: 10 },\n  { product: \"B\", sales: 20 },\n];\nawait table.loadArray(data);\nawait table.logBarChart(\"product\", \"sales\");\nawait sdb.done();\n```"}
{"prompt":"What is the difference between passing a single value and an array of values to keep?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'status' is 'active'\nawait table.keep({ status: 'active' });\n// Keep only rows where 'job' is 'accountant' or 'developer'\nawait table.keep({ job: ['accountant', 'developer'] });\nawait sdb.done();\n```"}
{"prompt":"Can I use getColumns() to check if a specific column exists in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all column names and check for a specific column\nconst columns = await table.getColumns();\nconsole.log(columns.includes('specificColumn')); // true/false\n\nawait sdb.done();\n```"}
{"prompt":"Is renaming a table an asynchronous operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Renaming is asynchronous and returns a Promise\nawait table.renameTable('newTableName');\nawait sdb.done();\n```"}
{"prompt":"Can I use getMin to find the smallest number in a numeric column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Find the smallest number in a numeric column\nconst minNumber = await table.getMin('numeric_column');\nconsole.log(`Smallest number: ${minNumber}`);\n\nawait sdb.done();```"}
{"prompt":"How do I handle cases where the number of quantiles is less than the data size?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign 2 quantiles (percentiles) to 'dataColumn'\nawait table.quantiles('dataColumn', 2, 'quantileResult');\nawait sdb.done();\n```"}
{"prompt":"How can I create an index on the new embeddings column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Generate embeddings and create an index\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  createIndex: true // Create index for faster similarity searches\n});\n\nawait sdb.done();\n```"}
{"prompt":"How does the isValidGeo method store the results?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Results are stored in the 'isValid' column as TRUE or FALSE\nawait table.isValidGeo('isValid');\nawait sdb.done();\n```"}
{"prompt":"Can I chain getVar with other methods?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Chain getVar with other methods\nconst variance = await table.getVar('numericColumn');\nconsole.log(variance);\n\nawait sdb.done();\n```"}
{"prompt":"Can I write data to a DuckDB database file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./my_database.db');\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the last 3 rows of a table while preserving the original order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst bottom3OriginalOrder = await table.getBottom(3, { originalOrder: true });\nconsole.log(bottom3OriginalOrder);\nawait sdb.done();\n```"}
{"prompt":"How does the logNbRows() method handle empty tables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Log row count for an empty table\nawait table.logNbRows(); // Logs 0 rows\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a column name, how does the method know which column contains the linestrings?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.linesToPolygons();\nawait sdb.done();\n```\n// If no column name is provided, the method automatically attempts to find a geometry column."}
{"prompt":"How do I handle cases where there is no overlap between geometries?","completion":"```ts\n// If there's no overlap, the resulting geometry will be empty or null.\n// You can filter these out using the filter method.\nawait table.filter('intersectGeom IS NOT NULL');\n```"}
{"prompt":"How do I create a SimpleDB instance with a specific database file path?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({ file: 'mydb.db' });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the number of columns in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the number of columns\nconst columns = await table.getColumns();\nconsole.log('Number of columns:', columns.length);\n\nawait sdb.done();\n```"}
{"prompt":"How do I convert multiple columns to lowercase?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.lower(['columnA', 'columnB']);\nawait sdb.done();\n```"}
{"prompt":"What is the syntax for sampling a percentage of rows using a string format like \"20%\"?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Sample 20% of the rows using a string\nawait table.sample(\"20%\");\nawait sdb.done();\n```"}
{"prompt":"Can I replace `NULL` values in multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.replaceNulls([\"column1\", \"column2\"], \"Unknown\");\nawait sdb.done();\n```"}
{"prompt":"Is it possible to round the quantile result to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the 90th percentile of 'price' rounded to 2 decimal places\nconst ninetiethPercentilePrice = await table.getQuantile('price', 0.9, {\n  decimals: 2\n});\nconsole.log('90th Percentile Price:', ninetiethPercentilePrice);\n\nawait sdb.done();\n```"}
{"prompt":"Can I log the bottom rows in their original order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the last 5 rows in their original order\nawait table.logBottom(5, { originalOrder: true });\nawait sdb.done();\n```"}
{"prompt":"Can I convert multiple columns to lowercase at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert 'column1' and 'column2' to lowercase\nawait table.lower(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"How do I load geospatial data from a local GeoJSON file into my SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I get data from a table with multiple conditions?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nconst filteredData = await table.getData({ conditions: `category === 'Book' && price > 10` });\nconsole.log(filteredData);\nawait sdb.done();```"}
{"prompt":"How can I create a SimpleTable without loading data immediately?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Create a table without loading data\nconst table = sdb.newTable('myEmptyTable');\n// Data can be loaded later with loadData()\nawait sdb.done();\n```"}
{"prompt":"How can I check if multiple tables exist and log the results?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// List of table names to check\nconst tablesToCheck = ['tableA', 'tableB', 'tableC'];\n\nfor (const tableName of tablesToCheck) {\n  const exists = await sdb.hasTable(tableName);\n  console.log(`Does ${tableName} exist?`, exists);\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I rename the table multiple times?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.renameTable(\"table_v1\");\nawait table.renameTable(\"table_v2\");\nawait table.renameTable(\"final_table_name\");\nawait sdb.done();\n```"}
{"prompt":"How do I unnest geometries in a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.unnestGeo();\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where a column's data type is unexpected?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the data types of all columns\nconst dataTypes = await table.getTypes();\n\n// Check for unexpected types\nif (dataTypes.yourColumn !== 'EXPECTED_TYPE') { // Replace with your actual column and expected type\n  console.error('Unexpected data type for column!');\n}\n\nawait sdb.done();\n```"}
{"prompt":"How can I specify a different column to get the bounding box from?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst bbox = await table.getBoundingBox(\"areaGeom\");\nconsole.log(bbox);\nawait sdb.done();\n```"}
{"prompt":"How do I view the correlation results after computation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute correlations and log the results\nawait table.correlations();\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I get the top 10 rows with a specific condition using getTop?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst top10Condition = await table.getTop(10, { conditions: `price > 100` });\nconsole.log(top10Condition);\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a CSV file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load data from a local CSV file\nawait table.loadData(\"./data.csv\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I check if all columns have a specific data type?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconst allColumnsHaveType = schema.every(col => col.dataType === 'string');\nconsole.log('All columns are string:', allColumnsHaveType); // Check if all columns have a specific data type\n\nawait sdb.done();\n```"}
{"prompt":"How can I create small multiples (faceted charts) using `logLineChart`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B' },\n];\nawait table.loadArray(data);\nawait table.convert({ date: 'string' }, { datetimeFormat: '%x' });\nawait table.logLineChart('date', 'value', { smallMultiples: 'category' });\nawait sdb.done();\n```"}
{"prompt":"How do I format the y-axis values in a dot chart to display as percentages?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Format y-axis values as percentages\nawait table.logDotChart(\"date\", \"value\", {\n  formatY: (d) => `${d * 100}%`\n});\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where a column has multiple specific values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'department' is either 'HR' or 'Finance'\nawait table.remove({ department: ['HR', 'Finance'] });\nawait sdb.done();\n```"}
{"prompt":"How can I write geospatial data to a GeoParquet file with compression enabled?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.writeGeoData(\"./output.geoparquet\", { compression: true });\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleDB instance with a specific database file path?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ file: \"/path/to/my/database.db\" });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"How do I load a local GeoJSON file into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadGeoData(\"./some-data.geojson\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I insert data from tables with different column names?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Insert rows from 'tableB' into 'tableA', unifying columns\nawait tableA.insertTables(tableB, { unifyColumns: true });\n\nawait sdb.done();\n```"}
{"prompt":"How can I log the first 10 rows with column types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable({ nbRowsToLog: 10, types: true });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to update a column using concatenation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Concatenate 'firstName' and 'lastName'\nawait table.updateColumn('fullName', `CONCAT(firstName, ' ', lastName)`);\nawait sdb.done();\n```"}
{"prompt":"Can I compute cumulative sums for multiple categories simultaneously, such as region and product category?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/revenue.csv\");\n// Ensure the table is sorted by 'region' and 'product_category' before accumulation\nawait table.sort({ region: \"asc\", product_category: \"asc\" });\n// Compute cumulative sum of 'revenue' within 'region' and 'product_category' categories\nawait table.accumulate(\"revenue\", \"cumulativeRevenue\", { categories: [\"region\", \"product_category\"] });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I log the column names along with their data types in a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logColumns({ types: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use `getMax` on a boolean column to find the maximum value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst maxBoolean = await table.getMax(\"is_active\");\nconsole.log(maxBoolean); // Will likely return true\nawait sdb.done();\n```"}
{"prompt":"Can I round multiple columns using the 'ceiling' method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.round([\"columnA\", \"columnB\"], { decimals: 1, method: \"ceiling\" });\nawait sdb.done();\n```"}
{"prompt":"What happens if there are multiple rows for the same department and year?","completion":"The `wider` method will aggregate the values from the `valuesFrom` column. If there are multiple rows, it will throw an error unless you specify an aggregation function. For example:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Sum the values for each department and year before restructuring\nawait table.summarize({\n  categories: ['Department', 'Year'],\n  values: 'Employees',\n  summaries: ['sum']\n});\nawait table.wider('Year', 'sum_Employees');\nawait sdb.done();\n```"}
{"prompt":"How do I create an index on the embeddings column to speed up similarity searches?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n\nconst similarResults = await table.aiVectorSimilarity(\n  \"your search query\",\n  \"your embeddings column\",\n  5, // Number of results\n  {\n    createIndex: true, // Create an index\n  },\n);\n\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"What happens if the column is not numeric?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempting to get variance of a non-numeric column will throw an error\ntry {\n  const variance = await table.getVar('nonNumericColumn');\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that the Z-scores are rounded to a specific number of decimals?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate Z-scores rounded to 3 decimals\nawait table.zScore('weight', 'weightZScore', { decimals: 3 });\nawait sdb.done();\n```"}
{"prompt":"Can I filter the last row using a SQL condition in SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last row where 'category' is 'Book'\nconst lastRowBooks = await table.getLastRow({\n  conditions: `category === 'Book'`,\n});\nconsole.log(lastRowBooks);\n\nawait sdb.done();\n```"}
{"prompt":"What if my geometry column isn't named the default? How do I specify it?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Check the validity of geometries in the 'shape' column and store the results in 'isValidShape'.\nawait table.isValidGeo(\"isValidShape\", { column: \"shape\" });\n\nawait sdb.done();\n```"}
{"prompt":"Can I use getUniques to find unique numerical values in a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get unique numerical values from the 'age' column\nconst uniqueAges = await table.getUniques('age');\nconsole.log(uniqueAges);\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the conditions might not match any rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last 5 rows where 'status' is 'active'\nconst bottom5Active = await table.getBottom(5, {\n  conditions: `status === 'active'`,\n});\nconsole.log(bottom5Active);\n\nawait sdb.done();\n```"}
{"prompt":"How do I perform a linear regression between two specific columns, 'x' and 'y'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.linearRegressions({ x: \"x\", y: \"y\" });\n\nawait sdb.done();\n```"}
{"prompt":"Can I compress the output file when writing data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeData(\"./output.json\", { compression: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use getNbValues to calculate the total number of cells in my dataset?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst totalCells = await table.getNbValues();\nconsole.log(totalCells);\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use left on a non-string column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempting to use left on a number column will result in an error\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I create a dot chart with small multiples based on a category column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Create small multiples based on 'category' column\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\"\n});\nawait sdb.done();\n```"}
{"prompt":"How do I set a double precision float type?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  measurement: 'double'\n});\nawait sdb.done();\n```"}
{"prompt":"How can I skip a certain number of lines at the beginning of a file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load data from a CSV file, skipping the first 5 lines\nawait table.loadData(\"./data.csv\", { skip: 5 });\n\nawait sdb.done();\n```"}
{"prompt":"How do I create bins for a column and then sort by the new bin column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create bins and sort by the new column\nawait table.bins('age', 5, 'age_bins');\nawait table.sort({ age_bins: 'asc' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get a table that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Attempt to retrieve a non-existent table\n// This will likely result in an error, as the documentation\n// doesn't specify a fallback mechanism.\n\ntry {\n  const nonExistentTable = await sdb.getTable(\"nonExistentTable\");\n} catch (error) {\n  console.error(\"Error retrieving table:\", error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How can I add a new column that combines multiple conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a boolean column 'isEligible' where age is greater than 18 and status is 'active'\nawait table.addColumn('isEligible', 'boolean', 'age > 18 AND status = ''active''');\nawait sdb.done();\n```"}
{"prompt":"How can I set a custom context window for Ollama models in aiRowByRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Set a custom context window for Ollama models in aiRowByRow\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    ollama: true,\n    contextWindow: 2048 // Adjust this value based on your needs\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column to a string type in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'id' column to string\nawait table.convert({ id: \"string\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I perform a basic left join between two tables using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a left join on the common column (auto-detected)\nawait tableA.join(tableB);\n\nawait sdb.done();\n```"}
{"prompt":"Can I use the `hasColumn` method to check for a column with a case-sensitive name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst hasColumnName = await table.hasColumn(\"ColumnName\");\nconsole.log(hasColumnName); // Output: true or false (depends on the actual column name)\nawait sdb.done();\n```"}
{"prompt":"How do I get the first 10 rows of a table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst top10Rows = await table.getTop(10);\nconsole.log(top10Rows);\nawait sdb.done();\n```"}
{"prompt":"Can I chain methods after calling logProjections()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Chain a method after logProjections\nawait table.logProjections().then(() => {\n  console.log('Projections logged successfully!');\n});\nawait sdb.done();\n```"}
{"prompt":"How do I get the bounding box of the geometries in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n\n// Get the bounding box using the default geometry column\nconst bbox = await table.getBoundingBox();\nconsole.log(bbox); // e.g., [45.0, -75.0, 46.0, -73.0]\nawait sdb.done();\n```"}
{"prompt":"How can I specify a particular geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [geo(geoJsonData, { fill: 'lightcoral' })]\n  });\n};\n\nawait table.writeMap(mapFunction, './output/specific_column_map.png', { column: 'geometry' });\nawait sdb.done();\n```"}
{"prompt":"How can I use the hasColumn method to ensure data integrity before processing?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Verify required columns exist before processing\nconst requiredColumns = ['id', 'name', 'age'];\nconst missingColumns = [];\n\nfor (const col of requiredColumns) {\n  if (!(await table.hasColumn(col))) {\n    missingColumns.push(col);\n  }\n}\n\nif (missingColumns.length > 0) {\n  console.log('Missing columns:', missingColumns.join(', '));\n} else {\n  console.log('All required columns are present');\n}\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column when calling fixGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fix invalid geometries in the default geometry column\nawait table.fixGeo(); // Automatically finds and fixes the geometry column\nawait sdb.done();\n```"}
{"prompt":"How can I integrate getSkew into a larger data analysis pipeline?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Example pipeline: load data, calculate skewness, and log result\ntry {\n  const skewness = await table.getSkew('numericColumn');\n  console.log('Analysis Result - Skewness:', skewness);\n} catch (error) {\n  console.error('Error in Pipeline:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I convert a column to a string type?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.convert({\n  my_column: \"string\"\n});\nawait sdb.done();\n```"}
{"prompt":"How do I log the names of all installed DuckDB extensions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\n// Log the names of all installed extensions\nextensions.forEach(ext => console.log('Extension:', ext.extension_name));\nawait sdb.done();\n```"}
{"prompt":"How can I use a specific AI model with aiQuery?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use a specific AI model for the query generation\nawait table.aiQuery(\n  'Find the top 10 products by revenue',\n  { model: 'gpt-4' }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How can I convert a column named 'timestamp_string' to a timestamp and specify a format like 'YYYY-MM-DD HH:mm:ss'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.convert({\n  timestamp_string: \"datetime\"\n}, {\n  datetimeFormat: \"%Y-%m-%d %H:%M:%S\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I clone a column and apply the offset within specific categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('temperature', 'prev_temp_by_city', {\n  offset: 1,\n  categories: 'city'\n});\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I get the GeoJSON data from the table using the default geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming the table is loaded with data\n\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\nawait sdb.done();\n```"}
{"prompt":"How do I rank a column and then sort the table based on those ranks?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rank 'score' and sort by rank in descending order\nawait table.ranks('score', 'rank');\nawait table.sort({ rank: 'desc' });\nawait sdb.done();\n```"}
{"prompt":"How does the `latLon` method handle invalid geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation doesn't specify how invalid geometries are handled.\n// It's possible they might result in errors or null values in the lat/lon columns.\n// Consider pre-processing your data to ensure valid geometries.\nawait table.latLon(\"geom\", \"lat\", \"lon\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I specify the column containing the geometries to aggregate if it's not the default?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.aggregateGeo(\"intersection\", { column: \"geometry_column\" });\nawait sdb.done();\n```"}
{"prompt":"How can I find out the data type of a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst schema = await table.getSchema();\nconst columnName = \"your_column_name\"; // Replace with the actual column name\nconst column = schema.find(c => c.name === columnName);\n\nif (column) {\n  console.log(`Data type of ${columnName}: ${column.type}`);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I install the Simple Data Analysis library using Node.js?","completion":"```ts\nnpx jsr add @nshiab/simple-data-analysis\n```"}
{"prompt":"Can I overwrite an existing column with the result of `removeIntersection`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove the intersection of 'geomB' from 'geomA', overwriting 'geomA' with the result.\nawait table.removeIntersection(\"geomA\", \"geomB\", \"geomA\");\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to chain the `trim` method with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Trim and then perform another operation\nawait table.trim('column1');\nawait table.renameColumns({ column1: 'cleanedColumn' });\nawait sdb.done();\n```"}
{"prompt":"How can I sort the data in a SimpleTable based on a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.sort({ \"column_name\": \"asc\" }); // Use \"desc\" for descending order\nawait sdb.done();\n```"}
{"prompt":"How can I create a chart in dark mode using the `writeChart` method?","completion":"```ts\nimport { dot, plot } from '@observablehq/plot';\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: 'year', y: 'value' }),\n    ],\n  });\n\nconst outputPath = 'output/chart_dark.png';\n\nawait table.writeChart(chartFunction, outputPath, { dark: true });\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that reducePrecision only affects a specific geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Specify the column name in the options object\nawait table.reducePrecision(2, { column: 'specificColumn' });\nawait sdb.done();\n```"}
{"prompt":"How do I sort a specific column in descending order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Sort 'columnName' in descending order\nawait table.sort({ columnName: 'desc' });\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column to a boolean type in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'is_active' to boolean\nawait table.convert({ is_active: \"boolean\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I retrieve a table and then sort its data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Retrieve the table and sort its data\nconst table = await sdb.getTable('yourTableName');\nawait table.sort({\n  columnName: 'asc' // or 'desc'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I replace a single string in one column using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Replace all occurrences of \"kilograms\" with \"kg\" in 'column1'\nawait table.replace(\"column1\", { \"kilograms\": \"kg\" });\nawait sdb.done();\n```"}
{"prompt":"Is `removeTable()` an asynchronous operation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.removeTable(); // removeTable() is an async function, so we need to await it.\nawait sdb.done();\n```"}
{"prompt":"How do I sample 5% of my data using a string format for the percentage?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Sample 5% of the data using a string\nawait table.sample(\"5%\");\nawait sdb.done();\n```"}
{"prompt":"Is getMax applicable for string columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get max value for a string column (alphabetical order)\nconst maxString = await table.getMax('string_column');\nconsole.log('Max string:', maxString);\n\nawait sdb.done();```"}
{"prompt":"If I have a column named 'email', how can I extract the domain name (the last part after the '@' symbol)? Assuming the domain name is always at least 2 characters long.","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.right(\"email\", 3); // Assuming domain names are at least 3 characters long\nawait sdb.done();\n```"}
{"prompt":"How precise are the computed lengths?","completion":"The precision depends on the coordinate system and units used. Here's an example with 2 decimal places:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute lengths in kilometers with default precision\nawait table.length('length_km', { unit: 'km' });\nawait sdb.done();\n```"}
{"prompt":"How can I take a 15% random sample of my data with a fixed seed for reproducibility?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Take 15% of the data with a fixed seed\nawait table.sample(\"15%\", { seed: 456 });\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows based on multiple conditions using 'OR'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where 'category' is 'Electronics' OR 'Appliances'\nawait table.removeRows(`category === 'Electronics' || category === 'Appliances'`);\nawait sdb.done();\n```"}
{"prompt":"If I want to get the top 10 rows, do I always need to specify the `count` parameter?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst top10 = await table.getTop(10);\nconsole.log(top10);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column name when calling `flipCoordinates`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.flipCoordinates(); // The method will attempt to find a geometry column automatically.\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to remove a table that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Attempt to remove a non-existent table\nawait sdb.removeTables(\"non_existent_table\"); // This will likely not throw an error, but also won't do anything.\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the quantile without rounding?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the 50th percentile (median) of 'value' without rounding\nconst medianValue = await table.getQuantile('value', 0.5);\nconsole.log('Median Value:', medianValue);\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle CSV files with a different delimiter?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv', { delim: ';' });\nawait sdb.done();\n```"}
{"prompt":"How does getBoundingBox handle the coordinate system?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// The method assumes WGS84 (EPSG:4326) coordinate system\nconst bbox = await table.getBoundingBox();\nconsole.log('Bounding Box in WGS84:', bbox);\n\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where a specific column equals a certain value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where the 'fruit' column is 'apple'\nawait table.removeRows(`fruit = 'apple'`);\nawait sdb.done();\n```"}
{"prompt":"How can I add a title to my chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { year: 2024, value: 10 },\n  { year: 2025, value: 15 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      line(plotData, { x: 'year', y: 'value' }),\n    ],\n    title: 'Yearly Values',\n  });\n\nconst outputPath = './output/titledChart.png';\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"How does the offset affect the data when cloning a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('temperature', 'prev_temp', { offset: 1 });\n// Each row's temperature is shifted by 1 row downward\nawait sdb.done();\n```"}
{"prompt":"Can I chain the skip method with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Skip 3 rows and then load more data\nawait table.skip(3).then(() => {\n  // Do something else after skipping\n});\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column that calculates the average of an existing column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// This is not directly possible with addColumn as it's for row-wise calculations.\n// Instead, use summarize to get the average and then add it as a new column.\n// However, for the sake of the question, we'll show a row-wise calculation.\n// Note: This example is not typical for average, but shows the syntax.\nawait table.addColumn(\"avg_column\", \"float\", \"(column1 + column2) / 2\");\nawait sdb.done();\n```"}
{"prompt":"How can I remove multiple tables at once by their names?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"customers\", \"products\"]);\\nawait sdb.done();\n```"}
{"prompt":"Can I log the row count without using await?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method is asynchronous and requires await\nawait table.logNbRows(); // Cannot omit await\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the geometry column contains invalid or null geometries?","completion":"If there are invalid or null geometries, the latLon method may throw an error. You should validate your data before using this method."}
{"prompt":"Can I update a column based on multiple conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Set 'grade' based on multiple conditions\nawait table.updateColumn(\n  'grade',\n  `CASE \n    WHEN score >= 90 THEN 'A'\n    WHEN score >= 80 THEN 'B'\n    ELSE 'C'\n  END`\n);\nawait sdb.done();\n```"}
{"prompt":"I want to calculate the correlation between two specific columns, 'temperature' and 'humidity'. How do I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.correlations({ x: \"temperature\", y: \"humidity\" });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a new column name?","completion":"The `newColumn` parameter is required. You must provide a unique name for the normalized values."}
{"prompt":"I have a column named 'price' that's currently a string. How can I convert it to a float?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.convert({\n  price: \"float\"\n});\nawait sdb.done();\n```"}
{"prompt":"How can I enable dark mode for my map?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [geo(geoJsonData, { fill: 'darkblue' })]\n  });\n};\n\nawait table.writeMap(mapFunction, './output/dark_map.png', { dark: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if the tables I'm trying to insert have different columns? Will it throw an error?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst targetTable = sdb.newTable();\nconst sourceTable1 = sdb.newTable();\nconst sourceTable2 = sdb.newTable();\n\n// This will throw an error if the tables don't have the same columns.\ntry {\n  await targetTable.insertTables([\"sourceTable1\", \"sourceTable2\"]);\n} catch (error) {\n  console.error(\"Error inserting tables:\", error);\n}\n\n// To avoid the error, use the unifyColumns option.\nawait targetTable.insertTables([\"sourceTable1\", \"sourceTable2\"], { unifyColumns: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use the right method on a column that contains numbers instead of strings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert numbers to strings before using right method\nawait table.addColumn('numberStr', 'numberColumn', (val) => val.toString());\nawait table.right('numberStr', 2);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify any options when calling `correlations`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute correlations for all numeric columns (default behavior)\nawait table.correlations();\nawait sdb.done();\n```"}
{"prompt":"How do I sort a column using French collation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Sort 'columnName' with French collation\nawait table.sort({ columnName: 'asc' }, { lang: { columnName: 'fr' } });\nawait sdb.done();\n```"}
{"prompt":"How can I exclude rows where a column has a specific value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Exclude rows where 'fruit' is 'apple'\nawait table.filter(`fruit != 'apple'`);\nawait sdb.done();\n```"}
{"prompt":"How do I handle negative values when creating bins?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create bins starting at -10 with interval 5\nawait table.bins('temperature', 5, 'temp_bins', { startValue: -10 });\nawait sdb.done();\n```"}
{"prompt":"What information does each object in the returned array from getExtensions() contain?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\nconsole.log(extensions[0]); // Output: { extension_name: 'spatial', loaded: true, ... }\nawait sdb.done();\n```"}
{"prompt":"How can I compute linear regressions for all numeric columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions for all numeric column permutations\nawait table.linearRegressions();\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle null or undefined values in the conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last 5 rows where 'value' is null or undefined\nconst bottom5NullValues = await table.getBottom(5, {\n  conditions: `value === null || value === undefined`,\n});\nconsole.log(bottom5NullValues);\n\nawait sdb.done();\n```"}
{"prompt":"How do I use the `longer` method to restructure a table from wide to long format?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Restructure the table by stacking year columns into 'year' and 'employees'\nawait table.longer(['2021', '2022', '2023'], 'year', 'employees');\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the variance of a numeric column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Calculate the variance of the 'values' column\nconst variance = await table.getVar(\"values\");\nconsole.log(variance);\nawait sdb.done();\n```"}
{"prompt":"How do I clone a column and offset its values by one row?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.cloneColumnWithOffset(\"value\", \"previous_value\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column when calling unnestGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Unnest geometries in the default column\nawait table.unnestGeo(); // Automatically finds and unnests the geometry column\nawait sdb.done();\n```"}
{"prompt":"How can I limit the number of rows loaded from a file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load only the first 100 rows from a CSV file\nawait table.loadData(\"./data.csv\", { limit: 100 });\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the 95th percentile of a column named 'revenue' rounded to 0 decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst ninetiethPercentile = await table.getQuantile(\"revenue\", 0.95, { decimals: 0 });\nconsole.log(ninetiethPercentile);\nawait sdb.done();\n```"}
{"prompt":"How can I use aiQuery with custom API keys?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use aiQuery with custom API keys\nawait table.aiQuery(\n  'Generate a report of user activity by region',\n  { apiKey: 'your-api-key-here' }\n);\n\nawait sdb.done();\n```"}
{"prompt":"Can I use `getRow` to retrieve a row based on date conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row where the date is after '2023-01-01'\nconst dateRow = await table.getRow(`date > '2023-01-01'`);\nconsole.log(dateRow);\n\nawait sdb.done();\n```"}
{"prompt":"How does cleanColumnNames() handle special characters in column names?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Example column name with special characters: 'Column!With$Special#Chars'\nawait table.loadData('path/to/your/data.csv');\nawait table.cleanColumnNames(); // Column name becomes 'columnWithSpecialChars'\nawait sdb.done();\n```"}
{"prompt":"Is `updateWithJS` suitable for updating a large table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// According to the documentation, updateWithJS is not suitable for large tables\n// because it involves transferring data between DuckDB and JavaScript.\n\nawait sdb.done();\n```"}
{"prompt":"Is there a limit to how many columns I can concatenate at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// While there's no explicit limit, practical limits may apply based on data size\nawait table.concatenate(['col1', 'col2', 'col3'], 'combinedCol');\nawait sdb.done();\n```"}
{"prompt":"What happens if I call logExtent on a non-numeric column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempting to log extent of a non-numeric column will throw an error\ntry {\n  await table.logExtent('name'); // 'name' is a string column\n} catch (error) {\n  console.error('Error:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"Is there a way to format the output of getSum to have a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use toFixed() method to format the sum with 2 decimal places\nconst totalSum = await table.getSum('decimalColumn');\nconsole.log(totalSum.toFixed(2));\n\nawait sdb.done();\n```"}
{"prompt":"How do I add a string column based on concatenating existing columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new string column 'fullName' by concatenating 'firstName' and 'lastName'\nawait table.addColumn('fullName', 'string', 'firstName || '' '' || lastName');\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different column for geometries when getting the bounding box?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the bounding box of geometries in a specific column named 'areaGeom'\nconst areaBbox = await table.getBoundingBox('areaGeom');\nconsole.log(areaBbox);\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the last 5 rows of a table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last 5 rows\nconst bottom5 = await table.getBottom(5);\nconsole.log(bottom5);\n\nawait sdb.done();\n```"}
{"prompt":"How do I change the buffer distance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.buffer(\"bufferedGeom\", 5); // Creates a buffer with a distance of 5 units.\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve data where a specific column equals a certain value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Retrieve data where a column equals a specific value\nconst filteredData = await table.getData({ conditions: 'status === \"Active\"' });\nconsole.log(filteredData);\n\nawait sdb.done();\n```"}
{"prompt":"Can I chain the logTypes() method with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Chain logTypes() with another method\nawait table.logTypes().then(() => {\n  console.log('Data types logged successfully!');\n});\nawait sdb.done();\n```"}
{"prompt":"Is getValues able to retrieve values from a Date type column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all values from the 'date' column\nconst dates = await table.getValues('date');\nconsole.log(dates); // e.g., [new Date('2023-01-01'), new Date('2023-02-01')]\n\nawait sdb.done();```"}
{"prompt":"Can I update a column using logical operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Set 'isActive' based on logical condition\nawait table.updateColumn(\n  'isActive',\n  `CASE WHEN age >= 18 AND status = 'active' THEN TRUE ELSE FALSE END`\n);\nawait sdb.done();\n```"}
{"prompt":"How do I create bins for a column and see the resulting bins?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create bins for 'score' with interval 10 and log the result\nawait table.bins('score', 10, 'score_bins');\nawait table.logTable({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific column exists in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconst columnExists = schema.some(col => col.name === 'columnName');\nconsole.log('Column exists:', columnExists); // Check if a specific column exists\n\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a unit, what unit will be used for the calculated area?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// The default unit is square meters (\"m2\").\nawait table.area(\"area_m2\");\nawait sdb.done();\n```"}
{"prompt":"How do I use customQuery to update a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.customQuery(\n  'UPDATE employees SET salary = salary * 1.1 WHERE department = \"Tech\"'\n);\nawait sdb.done();\n```"}
{"prompt":"How do I check if a table named 'users' exists in the database using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check if the 'users' table exists\nconst exists = await sdb.hasTable('users');\nconsole.log('Does the users table exist?', exists);\nawait sdb.done();\n```"}
{"prompt":"How do I fill holes in the default geometry column of my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fillHoles();\nawait sdb.done();\n```"}
{"prompt":"Can I use `updateWithJS` to add a new column based on existing data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Add a new 'total' column that sums 'a' and 'b'\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    total: typeof row.a === 'number' && typeof row.b === 'number' ? row.a + row.b : null\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"What data types can I use as values in the `columnsAndValues` object?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Example using a number\nawait table.keep({ age: 30 });\n\n// Example using a string\nawait table.keep({ city: \"New York\" });\n\n// Example using a boolean\nawait table.keep({ isActive: true });\n\n// Example using a date\nawait table.keep({ date: new Date(\"2024-01-01\") });\n\n// Example using null\nawait table.keep({ value: null });\n\nawait sdb.done();\n```"}
{"prompt":"Can I use splitExtract to handle different separators like semicolons?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Split 'tags' by semicolon and extract the third part (index 2) into a new 'thirdTag' column\nawait table.splitExtract('tags', ';', 2, 'thirdTag');\n\nawait sdb.done();\n```"}
{"prompt":"If the column I'm trying to modify contains non-string values, will this method throw an error?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Assuming the column contains strings, otherwise it might throw an error.\nawait table.right(\"myColumn\", 2);\nawait sdb.done();\n```"}
{"prompt":"How do I enable logging of the total execution duration?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  logDuration: true\n});\n// Execution duration will be logged.\nawait sdb.done();\n```"}
{"prompt":"Can I accumulate values within specific categories in SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Sort by category and relevant column first\nawait table.sort({ customer_id: 'asc', order_date: 'asc' });\nawait table.accumulate('orders', 'cumulativeOrders', {\n  categories: 'customer_id'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I select the first 10 rows of a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.selectRows(10);\nawait sdb.done();\n```"}
{"prompt":"How do I normalize a single column and store the result in a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.normalize(\"myColumn\", \"normalizedColumn\");\nawait sdb.done();\n```"}
{"prompt":"How can I filter the first row based on a specific condition using SQL syntax?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row where 'category' is 'Book' using SQL syntax\nconst firstRowBooks = await table.getFirstRow({\n  conditions: \"category = 'Book'\"\n});\nconsole.log(firstRowBooks);\nawait sdb.done();\n```"}
{"prompt":"How can I extract the last part of a string in a column, assuming the parts are separated by underscores?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Assuming you want to extract the last part, you'd need to know the maximum number of parts.\n// This example assumes a maximum of 3 parts.\nawait table.splitExtract(\"myColumn\", \"_\", 2, \"lastPart\");\nawait sdb.done();\n```"}
{"prompt":"How can I adjust the number of small multiples per row in a dot chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B' },\n];\nawait table.loadArray(data);\nawait table.logDotChart('date', 'value', {\n  smallMultiples: 'category',\n  smallMultiplesPerRow: 2\n});\nawait sdb.done();\n```"}
{"prompt":"Is it possible to write the database to a SQLite file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Write to a SQLite file\nawait sdb.writeDB('./my_exported_database.sqlite');\nawait sdb.done();\n```"}
{"prompt":"What data type should the column be to use the `fill` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fill(\"myColumn\");\nawait sdb.done();\n```\n//The documentation does not specify a required data type. The fill method should work with any data type."}
{"prompt":"What happens if I call logProjections() on a table without geospatial data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calling logProjections() without geospatial data will not throw an error\nawait table.logProjections();\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I specify a fixed y-axis scale across all small multiples when using `logLineChart`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B' },\n];\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', { smallMultiples: 'category', fixedScales: true });\nawait sdb.done();\n```"}
{"prompt":"How do I get the total number of columns in a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the number of columns in the table\nconst nbColumns = await table.getNbColumns();\nconsole.log(`Number of columns: ${nbColumns}`);\n\nawait sdb.done();\n```"}
{"prompt":"Is linesToPolygons an asynchronous operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Yes, it returns a Promise that resolves when done\nawait table.linesToPolygons();\nawait sdb.done();\n```"}
{"prompt":"How can I offset a column by 2 rows to compare values from two days ago in a time series?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sales.csv\");\n// Clone 'sales' as 'sales_2_days_ago', offsetting by 2 rows\nawait table.cloneColumnWithOffset(\"sales\", \"sales_2_days_ago\", { offset: 2 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I join tables using multiple columns as the key?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a join using multiple columns ('name' and 'category')\nawait tableA.join(tableB, {\n  commonColumn: ['name', 'category'],\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I round the computed proportions to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute proportions with 2 decimal places\nawait table.proportionsVertical('column1', 'perc', {\n  decimals: 2\n});\nawait sdb.done();\n```"}
{"prompt":"I have two tables, 'orders' and 'items'. How can I select both and remove all other tables?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.selectTables([\"orders\", \"items\"]);\nawait sdb.done();\n```"}
{"prompt":"How does getMax handle null or undefined values in the column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get max value, nulls are handled appropriately\nconst maxValueWithNulls = await table.getMax('column_with_nulls');\nconsole.log('Max with nulls:', maxValueWithNulls);\n\nawait sdb.done();```"}
{"prompt":"How do I get the description of all columns in the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst description = await table.getDescription();\nconsole.table(description);\nawait sdb.done();\n```"}
{"prompt":"If I'm using a file-based database, what does `done()` do in terms of storage?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({ file: \"./my_database.db\" });\n// If the database is file-based, done() compacts the database file\n// to optimize storage.\nawait sdb.done();\n```"}
{"prompt":"Can I use left to process multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Process each column separately\nawait table.left('col1', 2);\nawait table.left('col2', 3);\nawait sdb.done();\n```"}
{"prompt":"How do I convert a single column to lowercase?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.lower(\"myColumn\");\nawait sdb.done();\n```"}
{"prompt":"How do I create a bar chart with custom colors?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { category: 'A', value: 10 },\n  { category: 'B', value: 15 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      bar(plotData, {\n        x: 'category',\n        y: 'value',\n        fill: '#4CAF50',\n      }),\n    ],\n  });\n\nconst outputPath = './output/barChart.png';\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"What happens if I call getStdDev on a non-numeric column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// This will throw an error if 'name' is not numeric\ntry {\n  const nameStdDev = await table.getStdDev('name');\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I log the geospatial projections of a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the geospatial projections of the table\nawait table.logProjections();\nawait sdb.done();\n```"}
{"prompt":"How do I filter rows where a column matches one of two specific values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Filter rows where 'category' is either 'Electronics' or 'Appliances'\nawait table.filter(`category === 'Electronics' || category === 'Appliances'`);\nawait sdb.done();\n```"}
{"prompt":"How do I add a column indicating whether geometries in my table are valid?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a column named 'validGeo' to indicate valid geometries.\nawait table.isValidGeo(\"validGeo\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I specify a different AI model to use?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { model: \"my-custom-model\" },\n);\nawait sdb.done();\n```"}
{"prompt":"How do I compute vertical proportions for a specific column without any categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute proportions for 'column1' and store in 'perc'\nawait table.proportionsVertical('column1', 'perc');\nawait sdb.done();\n```"}
{"prompt":"How do I remove duplicate rows from a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove duplicate rows based on all columns\nawait table.removeDuplicates();\nawait sdb.done();\n```"}
{"prompt":"How can I round the correlation values to two decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.correlations({ decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"Does the capitalize function modify the original strings or create new ones?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The original strings are modified in place\nawait table.capitalize('columnName');\nawait sdb.done();\n```"}
{"prompt":"How do I reproject geometries to WGS84 (EPSG:4326) using the default column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Reproject geometries to WGS84 (EPSG:4326) using the default column\nawait table.reproject(\"WGS84\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass a value to `logBottom` that is greater than the number of rows in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// If count is greater than the number of rows, all rows will be logged.\nawait table.logBottom(100);\nawait sdb.done();\n```"}
{"prompt":"How do I specify a specific column containing the linestring geometries to convert to polygons?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.linesToPolygons(\"routeLines\");\nawait sdb.done();\n```"}
{"prompt":"How do I specify the output path for the chart image when using `writeChart`?","completion":"```ts\nimport { dot, plot } from '@observablehq/plot';\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: 'year', y: 'value' }),\n    ],\n  });\n\nconst outputPath = './charts/my_chart.png';\n\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"Can I use getColumns() to verify the structure of my data before processing?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Verify column structure\nconst columns = await table.getColumns();\nconsole.log('Data has the following columns:', columns);\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate ranks separately for each category in a column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.ranks(\"salary\", \"salaryRank\", { categories: \"department\" });\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometry column is not in EPSG:4326 format?","completion":"The latLon method assumes the input geometry is in EPSG:4326 (WGS84) format. If it's not, you need to transform it first before using this method."}
{"prompt":"What data types are the extracted latitude and longitude columns?","completion":"The extracted latitude and longitude values will be stored as floating-point numbers (floats)."}
{"prompt":"How do I load a database with a custom name?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.loadDB('./archive.db', { name: 'archive_db' });\nawait sdb.done();\n```"}
{"prompt":"How can I add a date column based on an existing timestamp column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new date column 'actionDate' extracted from 'timestampColumn'\nawait table.addColumn('actionDate', 'date', 'CAST(timestampColumn AS DATE)');\nawait sdb.done();\n```"}
{"prompt":"How do I perform a simple spatial join, overwriting the current table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\nawait tableA.joinGeo(tableB, \"intersect\");\nawait sdb.done();\n```"}
{"prompt":"Can I trim specific characters from a column instead of just whitespace?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Trim leading and trailing asterisks from 'productCode'\nawait table.trim('productCode', { character: '*' });\nawait sdb.done();\n```"}
{"prompt":"How can I add metadata to a GeoJSON output file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", {\n  metadata: { source: \"MyDataSource\", version: \"1.0\" },\n});\nawait sdb.done();\n```"}
{"prompt":"How do I create a new column with point geometries from latitude and longitude columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.points(\"latitude\", \"longitude\", \"point\");\nawait sdb.done();\n```"}
{"prompt":"How can I round a column down to the nearest integer?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.round(\"myColumn\", { method: \"floor\" });\nawait sdb.done();\n```"}
{"prompt":"Can I use getMean on a column that has been renamed?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Rename a column and then calculate its mean\nawait table.renameColumns({ oldName: 'newName' });\nconst meanValue = await table.getMean('newName');\nconsole.log('Mean of renamed column:', meanValue);\n\nawait sdb.done();\n```"}
{"prompt":"Can I use a variable to specify the table name when calling `getTable`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Define a variable for the table name\nconst tableName = \"products\";\n\n// Retrieve the table using the variable\nconst products = await sdb.getTable(tableName);\n\n// Now you can work with the 'products' table\n// await products.logTable();\n\nawait sdb.done();\n```"}
{"prompt":"How do I trim whitespace only from the end of multiple columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Right-trim whitespace from 'description' and 'notes' columns\nawait table.trim(['description', 'notes'], { method: 'rightTrim' });\nawait sdb.done();\n```"}
{"prompt":"What join types are available besides the default 'left' join?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nconst table2 = sdb.newTable();\n\n// Assuming table1 and table2 are loaded with data\n\n// Perform a right join\nawait table1.join(table2, { type: \"right\" });\n\n// Perform a full join\nawait table1.join(table2, { type: \"full\" });\n\n// Perform an inner join\nawait table1.join(table2, { type: \"inner\" });\n```"}
{"prompt":"Can I use logical operators in the conditions for getTop?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Using logical operators like && and ||\nconst top5Filtered = await table.getTop(5, { conditions: `category === 'Books' && price > 10` });\nconsole.log(top5Filtered);\nawait sdb.done();\n```"}
{"prompt":"What if the columns I want to compute proportions for are not in order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Columns can be in any order\nawait table.proportionsHorizontal(['NonBinary', 'Women', 'Men']);\n\nawait sdb.done();\n```"}
{"prompt":"How do I flip the coordinates in the default geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.flipCoordinates();\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a column name to linesToPolygons?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method will automatically find and use the geometry column\nawait table.linesToPolygons();\nawait sdb.done();\n```"}
{"prompt":"How do I insert rows from another table into the current table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\nawait tableB.loadData(\"data/tableB.csv\");\nawait tableA.insertTables(\"tableB\");\nawait sdb.done();\n```"}
{"prompt":"How can I customize the labels displayed for each bin in the histogram? Let's say I want to format the labels for the 'age' column to show a range like '18-25', '25-32', etc.","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logHistogram(\"age\", {\n  formatLabels: (min, max) => `${min}-${max} years`,\n});\nawait sdb.done();\n```"}
{"prompt":"How can I summarize data by category and calculate counts and sums?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\nawait table.summarize({\n  values: \"valueColumn\",\n  categories: \"categoryColumn\",\n  summaries: [\"count\", \"sum\"],\n  decimals: 0,\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I write geospatial data to a compressed GeoParquet file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Write geospatial data to a compressed GeoParquet file\nawait table.writeGeoData('./output.geoparquet', { compression: true });\nawait sdb.done();\n```"}
{"prompt":"How do I replace strings in all columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Replace 'oldString' with 'newString' in all columns\nconst allColumns = table.columns;\nawait table.replace(allColumns, { 'oldString': 'newString' });\n\nawait sdb.done();\n```"}
{"prompt":"How do I perform a 'within' spatial join with a specific distance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\nawait tableA.joinGeo(tableB, \"within\", {\n  distance: 5,\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if no rows match the conditions in getLastRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempt to get last row with a condition that has no matches\nconst noMatchRow = await table.getLastRow({\n  conditions: `category === 'NonExistent'`,\n});\nconsole.log(noMatchRow); // Output will be null\n\nawait sdb.done();\n```"}
{"prompt":"Can I use `logExtent` with a table that contains geospatial data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./boundaries.geojson\");\nawait table.logExtent(\"some_numeric_column\");\nawait sdb.done();\n```"}
{"prompt":"Can I compute proportions for multiple categories at once, like by region and product type?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute proportions of 'sales' within 'region' and 'product_type' categories\nawait table.proportionsVertical(\"sales\", \"sales_proportion\", { categories: [\"region\", \"product_type\"] });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I filter the rows before getting the top `n` rows? If so, how?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst top3Electronics = await table.getTop(3, { conditions: `category === 'Electronics'` });\nconsole.log(top3Electronics);\nawait sdb.done();\n```"}
{"prompt":"Can I use `getNbValues()` on an empty table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues); // Output: 0\nawait sdb.done();\n```"}
{"prompt":"How can I use `updateWithJS` to transform a string column to uppercase?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'name' column to uppercase\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    name: typeof row.name === 'string' ? row.name.toUpperCase() : row.name\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"Is the original table modified in place by the `wider` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Assuming the original table has columns 'Category' and 'Value'\nawait table.wider(\"Category\", \"Value\");\n\n// The table variable now holds the restructured table.\n// The original data is replaced with the wider format.\n\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different column name when flipping coordinates?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Flip coordinates in a specific column named 'myGeom'\nawait table.flipCoordinates('myGeom');\nawait sdb.done();\n```"}
{"prompt":"How do I convert a single column to uppercase?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.upper(\"myColumn\");\nawait sdb.done();\n```"}
{"prompt":"How do I compute horizontal proportions for specific columns in a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute horizontal proportions for 'Men', 'Women', and 'NonBinary' columns\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary']);\n\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve geospatial data from a table using the default geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get GeoJSON data using the default geometry column\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the number of decimals?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// No rounding applied by default\nawait table.proportionsVertical('column1', 'perc');\nawait sdb.done();\n```"}
{"prompt":"Does the `nbVertices` method modify the original table, or does it return a new table with the added column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The nbVertices method modifies the original table in place.\nawait table.nbVertices(\"vertexCount\");\n\n// You can then access the new column 'vertexCount' on the table.\n// For example, to log the first 5 rows:\nawait table.logTable({ nbRowsToLog: 5 });\n\nawait sdb.done();\n```"}
{"prompt":"Can I include the file name as a column when loading multiple files?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { fileName: true });\nawait sdb.done();\n```"}
{"prompt":"Can I create multiple tables in a single SimpleDB instance?","completion":"Yes, you can create multiple tables by calling `newTable` multiple times.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable('table1');\nconst table2 = sdb.newTable('table2');\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table with all its data and structure?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clone the table with all data and structure\nconst clonedTable = await table.cloneTable();\nawait sdb.done();\n```"}
{"prompt":"How do I load data into a table after creating it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait table.loadData('path/to/your/data.csv');\nawait sdb.done();\n```"}
{"prompt":"How do I specify a different column name for storing the computed lengths?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Store lengths in 'routeLength' column\nawait table.length('routeLength', { unit: 'km' });\nawait sdb.done();\n```"}
{"prompt":"How do I include data types when logging a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  types: true\n});\n// Data types will be included in the log.\nawait sdb.done();\n```"}
{"prompt":"How do I add a row number column to my table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a row number column named 'rowNumber'\nawait table.addRowNumber('rowNumber');\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to remove a column that doesn't exist in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempting to remove a non-existent column 'nonExistentColumn'\n// This will throw an error\nawait table.removeColumns('nonExistentColumn');\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that only entire strings are replaced?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Replace only if the entire string is 'oldString'\nawait table.replace('columnName', { 'oldString': 'newString' }, { entireString: true });\n\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table in SimpleDB with a specific name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait sdb.done();\n```"}
{"prompt":"I have a column named 'amount' and I want to calculate the cumulative sum within each category defined by the 'group' column. How would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.accumulate(\"amount\", \"cumulative_amount\", { categories: \"group\" });\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column from string to integer using the `convert` method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'column1' to integer type\nawait table.convert({ column1: 'integer' });\n\nawait sdb.done();\n```"}
{"prompt":"What happens if the rows I insert have new columns not present in the original table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Insert rows with new columns\nconst newRows = [\n  { name: 'David', age: 40, occupation: 'Engineer' },\n];\nawait table.insertRows(newRows);\n\n// The new column 'occupation' will be added to the table\nawait sdb.done();```"}
{"prompt":"How do I adjust the layout of small multiples with `smallMultiplesPerRow`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A' },\n  { date: new Date('2023-03-01'), value: 30, category: 'A' },\n  { date: new Date('2023-04-01'), value: 40, category: 'A' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B' },\n  { date: new Date('2023-03-01'), value: 35, category: 'B' },\n  { date: new Date('2023-04-01'), value: 45, category: 'B' },\n];\n\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', {\n  smallMultiples: 'category',\n  smallMultiplesPerRow: 2,\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I remove all tables from the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get all table names and pass them to removeTables\nconst allTables = await sdb.listTables();\nawait sdb.removeTables(allTables);\nawait sdb.done();\n```"}
{"prompt":"If my table doesn't have a category column, can I still use the `longer` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Assuming your table only has 'Year1', 'Year2', and you want to stack them.\nawait table.longer(['Year1', 'Year2'], 'Year', 'Value');\n\nawait sdb.done();\n```"}
{"prompt":"How can I detect outliers within specific categories for a given column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Detect outliers in 'salary' within each 'department'\nawait table.outliersIQR('salary', 'isSalaryOutlier', { categories: 'department' });\nawait sdb.done();\n```"}
{"prompt":"How can I assign ranks in descending order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign ranks based on 'score' in descending order\nawait table.ranks('score', 'descRank', { order: 'desc' });\nawait sdb.done();\n```"}
{"prompt":"How do I specify custom names for the summary columns? For example, I want the average sales to be named 'avg_sales'.","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.summarize({\n  values: \"sales\",\n  categories: \"region\",\n  summaries: {\n    avg_sales: \"mean\",\n    total_sales: \"sum\",\n  },\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I customize the map's styling using CSS?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [geo(geoJsonData, { fill: 'lightyellow' })]\n  });\n};\n\nconst style = 'background-color: #1a1a1a; padding: 20px;';\nawait table.writeMap(mapFunction, './output/styled_map.png', { style });\nawait sdb.done();\n```"}
{"prompt":"Can I use fillHoles without loading data into the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// No, you need to load data first\nawait table.loadData('path/to/your/data.csv');\nawait table.fillHoles();\nawait sdb.done();\n```"}
{"prompt":"How do I convert linestrings to polygons using the default geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.linesToPolygons();\nawait sdb.done();\n```"}
{"prompt":"Is it possible to rename columns using variables instead of hardcoded strings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use variables for old and new column names\nconst oldName = 'oldColumn';\nconst newName = 'newColumn';\nawait table.renameColumns({ [oldName]: newName });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to trim both leading and trailing characters from a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Trim both leading and trailing whitespace from 'name' column\nawait table.trim('name', { method: 'trim' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass an empty array to selectColumns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Passing an empty array will remove all columns\nawait table.selectColumns([]); // This will result in an empty table\nawait sdb.done();\n```"}
{"prompt":"What happens if I call getSkew on a non-numeric column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempting to get skewness of a non-numeric column will throw an error\ntry {\n  const invalidSkewness = await table.getSkew('nonNumericColumn');\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I replace NULL values in a date column with a specific date?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Replace NULL values in 'eventDate' column with January 1, 2023\nawait table.replaceNulls(\"eventDate\", new Date(\"2023-01-01\"));\nawait sdb.done();\n```"}
{"prompt":"Can I use selectColumns to remove all except one specific column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Only 'salesAmount' column will remain\nawait table.selectColumns('salesAmount');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to check the number of columns before processing data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check the number of columns before processing\nconst nbColumns = await table.getNbColumns();\nconsole.log(`Pre-processing check: ${nbColumns} columns`);\n\nawait sdb.done();\n```"}
{"prompt":"Can I use logBarChart with data loaded from an array?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { category: 'A', value: 10 },\n  { category: 'B', value: 20 },\n];\nawait table.loadArray(data);\nawait table.logBarChart('category', 'value');\nawait sdb.done();\n```"}
{"prompt":"How do I trim a specific character, like a hyphen, from the beginning and end of a column named 'id'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.trim(\"id\", { character: \"-\" });\nawait sdb.done();\n```"}
{"prompt":"How do I remove a table and then add a new one with the same name?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait table.loadData('path/to/your/data.csv');\n// Remove the existing table\nawait table.removeTable();\n// Create a new table with the same name\nconst newTable = sdb.newTable('myTable');\nawait newTable.loadData('path/to/new/data.csv');\nawait sdb.done();\n```"}
{"prompt":"Can I use `longer` to restructure multiple sets of columns in one table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// First restructuring for year columns\nawait table.longer(['2021', '2022', '2023'], 'year', 'employees');\n\n// Second restructuring for another set of columns if needed\n// await table.longer([...], ..., ...);\n\nawait sdb.done();\n```"}
{"prompt":"How do I log the unique values from a specific column in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logUniques(\"your_column_name\");\nawait sdb.done();\n```"}
{"prompt":"How can I specify both the target and original projections when reprojecting?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Reproject geometries from EPSG:4326 to EPSG:3347, specifying the original projection\nawait table.reproject('EPSG:3347', { from: 'EPSG:4326' });\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that only specific rows are kept in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'status' is 'active'\nawait table.keep({ status: 'active' });\nawait sdb.done();\n```"}
{"prompt":"Can I update a column using a SQL function like LEFT?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Update 'column1' with the left 5 characters of 'column2'\nawait table.updateColumn('column1', `LEFT(column2, 5)`);\nawait sdb.done();\n```"}
{"prompt":"How do I reproject geometries stored in a specific column named 'geometry' to EPSG:3347?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Reproject geometries in the 'geometry' column to EPSG:3347\nawait table.reproject(\"EPSG:3347\", { column: \"geometry\" });\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that only specific columns remain after using selectColumns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Only 'column1' and 'column2' will remain after this operation\nawait table.selectColumns(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"How can I use the quantiles method without specifying categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign quantiles without category grouping\nawait table.quantiles('valueColumn', 4, 'quartileResult');\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table into a specific named table with both filtered data and selected columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clone into a specific named table with filtered data and selected columns\nconst clonedTable = await table.cloneTable({\n  outputTable: 'filtered_data',\n  conditions: 'status = \"active\" AND created_date >= \"2023-01-01\"',\n  columns: ['name', 'status', 'created_date']\n});\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a directory with a specific encoding for CSV files?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { encoding: \"utf-16\" });\nawait sdb.done();\n```"}
{"prompt":"Can I round the skewness value to a specific number of decimal places? How would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst roundedSkew = await table.getSkew(\"amount\", { decimals: 3 });\nconsole.log(roundedSkew);\nawait sdb.done();\n```"}
{"prompt":"How do I specify a category to perform linear regression within each group?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions within 'region' categories\nawait table.linearRegressions({\n  categories: 'region'\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I change the fill color of the map features?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [geo(geoJsonData, { fill: 'orange', stroke: 'black' })]\n  });\n};\n\nawait table.writeMap(mapFunction, './output/orange_map.png');\nawait sdb.done();\n```"}
{"prompt":"Can I round the median value to a specific number of decimal places? How would I do that for the 'score' column, rounded to 1 decimal place?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst medianScore = await table.getMedian(\"score\", { decimals: 1 });\nconsole.log(medianScore);\nawait sdb.done();\n```"}
{"prompt":"Can I use `updateWithJS` to convert a string column to a number?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    myStringColumn: typeof d.myStringColumn === 'string' ? Number(d.myStringColumn) : d.myStringColumn,\n  }));\n  return modifiedRows;\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that left only affects specific rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Filter rows before applying left\nawait table.filter('category', 'electronics');\nawait table.left('model', 4);\nawait sdb.done();\n```"}
{"prompt":"How do I handle the result of getExtent in further calculations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use the extent values in further calculations\nconst [min, max] = await table.getExtent('column_name');\nconsole.log('Range:', max - min);\n\nawait sdb.done();"}
{"prompt":"How can I access the names of all tables in the SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\n// Access table names using the 'name' property\nconst tableNames = tables.map(table => table.name);\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleDB instance with specific configuration options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  file: 'mydatabase.db',\n  overwrite: true,\n  logDuration: true,\n  nbRowsToLog: 20,\n  nbCharactersToLog: 50,\n  types: true,\n  cacheVerbose: false,\n  debug: false,\n  duckDbCache: true,\n  progressBar: true\n});\nawait sdb.done();\n```"}
{"prompt":"Is `getNbValues()` an asynchronous function?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst nbValues = await table.getNbValues(); // Using 'await' indicates it's asynchronous\nconsole.log(nbValues);\nawait sdb.done();\n```"}
{"prompt":"How do I create a new SimpleTable instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"my_table\");\n// The table 'my_table' is now created.\nawait sdb.done();\n```"}
{"prompt":"How do I get the mean of a column named 'price'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst meanPrice = await table.getMean(\"price\");\nconsole.log(meanPrice);\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join between two tables using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a cross join between tableA and tableB, overwriting tableA with the result\nawait tableA.crossJoin(tableB);\n\nawait sdb.done();\n```"}
{"prompt":"How do I remove a single table by name from the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.removeTables('employees');\nawait sdb.done();\n```"}
{"prompt":"How can I visualize the distribution of quantiles after assigning them?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign quantiles and log the results to inspect distribution\nawait table.quantiles('valueColumn', 10, 'quantileResult');\nawait table.logTable({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"Can I set the data type for a timestamp column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  last_updated: 'timestamp'\n});\nawait sdb.done();\n```"}
{"prompt":"How can I find the extent of a column named 'score' after loading data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst scoreExtent = await table.getExtent(\"score\");\nconsole.log(scoreExtent); // e.g., [0, 100]\nawait sdb.done();\n```"}
{"prompt":"How do I use the `inside` method to check if points in a column are within polygons in another column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Check if geometries in 'pointGeom' are inside 'polygonGeom', storing results in 'isInsidePolygon'\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I ensure my table has the expected number of columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Verify the expected number of columns\nconst nbColumns = await table.getNbColumns();\nif (nbColumns !== expectedNumber) {\n  console.error(`Unexpected number of columns: ${nbColumns}`);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How can I use `updateWithJS` to replace values in a column based on a condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Replace values in 'category' column based on conditions\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    category: row.value > 100 ? 'High' : row.value < 50 ? 'Low' : 'Medium'\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"Does `logBottom` require any specific data to be loaded into the table before it can be used?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Load data before using logBottom\nawait table.logBottom(2);\nawait sdb.done();\n```"}
{"prompt":"Can I capitalize multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.capitalize([\"column1\", \"column2\", \"column3\"]);\nawait sdb.done();\n```"}
{"prompt":"Can I fill NULL values in all columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill NULL values in all columns\nawait table.fill(table.columns());\nawait sdb.done();\n```"}
{"prompt":"How do I concatenate columns in a specific order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The order in the columns array determines the concatenation order\nawait table.concatenate(['firstCol', 'secondCol'], 'combinedOrder');\nawait sdb.done();\n```"}
{"prompt":"Is it necessary to load data into the table before calling `linesToPolygons`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.linesToPolygons();\nawait sdb.done();\n```\n// Yes, you need to load data into the table before calling `linesToPolygons` to have data to transform."}
{"prompt":"How do I add a row number column to my table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Add a new column named 'rowNumber' with the row number for each row\nawait table.addRowNumber(\"rowNumber\");\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that both columns have the same projection before using the inside method?","completion":"```ts\n// You can check the projection of each column and ensure they match before calling inside()\nconst proj1 = await table.getProjection('pointGeom');\nconst proj2 = await table.getProjection('polygon_geom');\nif (proj1 === proj2) {\n  await table.inside('pointGeom', 'polygon_geom', 'isInside');\n} else {\n  console.error('Projections do not match!');\n}\nawait sdb.done();\n```"}
{"prompt":"Can I use getStdDev without specifying any options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate standard deviation without specifying options\nconst valueStdDev = await table.getStdDev('value');\nconsole.log(valueStdDev);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if the cached data is corrupted?","completion":"```ts\n// If the cache is corrupted, SimpleDB will re-run the computations.\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  // Your computations here\n});\n\n// Corrupted cache will trigger a re-run\nawait sdb.done();\n```"}
{"prompt":"Is it possible to compute a rolling sum without any following rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling sum with 5 preceding rows and no following rows\nawait table.rolling('points', 'rollingSumPoints', 'sum', 5, 0);\n\nawait sdb.done();\n```"}
{"prompt":"If I load a CSV file, how can I confirm the correct number of columns were read from the file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst numberOfColumns = await table.getNbColumns();\nconsole.log(\"The table has\", numberOfColumns, \"columns\");\nawait sdb.done();\n```"}
{"prompt":"How do I create a bar chart from a table using the `logBarChart` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n];\nawait table.loadArray(data);\nawait table.logBarChart(\"category\", \"value\");\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a column name, how does the `typeGeo` method determine which column contains the geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column 'geometryType' with the type of each geometry\nawait table.typeGeo(\"geometryType\");\n\n// The method will automatically attempt to find a geometry column.\n\nawait sdb.done();\n```"}
{"prompt":"Does getMin work with non-numeric columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempt to getMin on a non-numeric column\ntry {\n  const minNonNumeric = await table.getMin('non_numeric_column');\n  console.log(`Minimum value: ${minNonNumeric}`);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();```"}
{"prompt":"Can I rename columns to have spaces or other special characters?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rename a column to include spaces or special characters\nawait table.renameColumns({ 'oldColumn': 'new Column Name' });\nawait sdb.done();\n```"}
{"prompt":"How can I visualize the created point geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create point geometries and write to a file for visualization\nawait table.points('lat', 'lon', 'geom');\nawait table.writeData('output.geojson');\n// You can now visualize the GeoJSON file in GIS software or online tools\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate geometries in a specific column, like 'regions', into their intersection and store the results in a new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Aggregate geometries in 'regions' column into their intersection, storing results in a new table\nconst intersectionTable = await table.aggregateGeo(\"intersection\", {\n  column: \"regions\",\n  outputTable: true,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I properly close a SimpleDB instance after finishing operations?","completion":"You should call `await sdb.done();` to ensure all resources are cleaned up."}
{"prompt":"How do I handle cases where getValues returns an empty array?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get values from a column that might be empty\nconst emptyValues = await table.getValues('emptyColumn');\nif (emptyValues.length === 0) {\n  console.log('The column is empty.');\n}\n\nawait sdb.done();```"}
{"prompt":"How do I include the file name as a column when loading data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv', { fileName: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if I set `preceding` to 0 and `following` to 5? What does that mean for the rolling window?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.rolling(\"value\", \"rollingSumValue\", \"sum\", 0, 5);\nawait sdb.done();\n```\n// This means the rolling window will only consider the current row and the 5 following rows. It's a forward-looking rolling window."}
{"prompt":"If I have a column named 'age', how can I get its extent?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst ageExtent = await table.getExtent(\"age\");\nconsole.log(ageExtent); // e.g., [18, 65]\nawait sdb.done();\n```"}
{"prompt":"How do I load data into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\"); // Replace with your file path\nawait sdb.done();\n```"}
{"prompt":"Can I perform operations on a retrieved table immediately?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Retrieve the table and perform an operation\nconst table = await sdb.getTable('yourTableName');\nawait table.logTable(); // Example operation\nawait sdb.done();\n```"}
{"prompt":"How do I fill holes in a specific geometry column named 'polygonGeom'?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill holes in the 'polygonGeom' column\nawait table.fillHoles('polygonGeom');\nawait sdb.done();\n```"}
{"prompt":"What if the geometry column contains more than just points?","completion":"The latLon method is designed for point geometries. If your column contains other types of geometries, this method may not work as expected."}
{"prompt":"Can I use `getSum` on a column that contains non-numeric values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\ntry {\n  const invalidSum = await table.getSum(\"text_column\");\n  console.log(invalidSum);\n} catch (error) {\n  console.error(\"Error calculating sum:\", error); // This will likely throw an error if the column contains non-numeric values.\n}\nawait sdb.done();\n```"}
{"prompt":"How can I specify a custom context window for Ollama models?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use a custom context window for Ollama models\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    ollama: true,\n    model: 'all-minilm',\n    contextWindow: 1024 // Set the desired context window size\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the data types of all columns in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst dataTypes = await table.getTypes();\nconsole.log(dataTypes);\nawait sdb.done();\n```"}
{"prompt":"What does the `done()` method do in SimpleDB?","completion":"The `done()` method cleans up resources and closes the database connection. Here's how it works:"}
{"prompt":"If I don't specify any options to `removeDuplicates`, what columns are used to identify duplicates?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeDuplicates(); // All columns are used.\nawait sdb.done();\n```"}
{"prompt":"Can I concatenate more than two columns using the concatenate method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Concatenate three columns 'a', 'b', and 'c' into 'combined'\nawait table.concatenate(['a', 'b', 'c'], 'combined');\nawait sdb.done();\n```"}
{"prompt":"Can I perform multiple summary operations at once, like getting both the mean and sum of 'sales'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.summarize({\n  values: \"sales\",\n  summaries: [\"mean\", \"sum\"],\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I specify a different column for simplifying geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Simplify geometries in the 'customGeometry' column with a tolerance of 0.1\nawait table.simplify(0.1, { column: 'customGeometry' });\nawait sdb.done();\n```"}
{"prompt":"How do I log descriptive information about all columns in a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log descriptive information for all columns in the table\nawait table.logDescription();\nawait sdb.done();\n```"}
{"prompt":"How can I specify a different environment variable for the API email?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  apiEmail: \"MY_CUSTOM_API_EMAIL\"\n});\nawait sdb.done();\n```"}
{"prompt":"How do I create a dot chart with small multiples displayed in multiple rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Display small multiples in 2 columns per row\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  smallMultiplesPerRow: 2\n});\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all the data from a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all data from the table\nconst allData = await table.getData();\nconsole.log(allData);\n\nawait sdb.done();\n```"}
{"prompt":"How do I extract latitude and longitude from a geometry column using the latLon method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract latitude and longitude from 'geom' column into new 'lat' and 'lon' columns\nawait table.latLon('geom', 'lat', 'lon');\nawait sdb.done();\n```"}
{"prompt":"How do I check the new name of a table after renaming?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rename the table\nawait table.renameTable('newTableName');\n// Log the table name to verify\nconsole.log('Table name:', table.name);\nawait sdb.done();\n```"}
{"prompt":"How can I assign ranks without gaps (dense ranking) within categories?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.ranks(\"salary\", \"salaryRank\", { categories: \"department\", noGaps: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Does the fill method modify the original data or create a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill NULLs in 'score' column - modifies the original table\nawait table.fill('score');\nawait sdb.done();\n```"}
{"prompt":"How do I keep only specific values in a single column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'status' is 'active'\nawait table.keep({ status: 'active' });\nawait sdb.done();\n```"}
{"prompt":"How do I reduce the precision of geometries in a column to 3 decimal places using the default column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Reduce the precision of geometries in the default column to 3 decimal places\nawait table.reducePrecision(3);\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that trimming doesn't affect other columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Only trim 'specificColumn' without affecting others\nawait table.trim('specificColumn');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the sum of multiple columns at once using getSum?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Currently, getSum only supports one column at a time\nconst sumColumn1 = await table.getSum('column1');\nconst sumColumn2 = await table.getSum('column2');\nconsole.log(sumColumn1, sumColumn2);\n\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate geometries by category and store results in a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Aggregate geometries by 'country' and store in a new table\nconst countryAggregated = await table.aggregateGeo('union', { categories: 'country', outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"How can I load only the first 100 rows from all files in a directory?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { limit: 100 });\nawait sdb.done();\n```"}
{"prompt":"How does reducePrecision handle invalid decimal values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method expects a valid number of decimals. Using an invalid value may throw an error\nawait table.reducePrecision(3);\nawait sdb.done();\n```"}
{"prompt":"How do I ensure polygon coordinates are compatible with D3.js when exporting GeoJSON?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get GeoJSON data and rewind polygon coordinates for D3.js compatibility\nconst rewoundGeojson = await table.getGeoData(undefined, { rewind: true });\nconsole.log(rewoundGeojson);\n\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows before logging them using a condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable({ conditions: `status === 'active'` });\nawait sdb.done();\n```"}
{"prompt":"How do I round the results of a rolling aggregation to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/temperature.csv\");\n// Compute a rolling maximum of 'temperature' rounded to 1 decimal place\nawait table.rolling(\"temperature\", \"rollingMaxTemp\", \"max\", 2, 2, {\n  decimals: 1,\n});\nawait sdb.done();\n```"}
{"prompt":"What if I try to insert rows with missing columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Insert rows with missing columns\nconst newRows = [\n  { name: 'Grace' }, // Missing 'age' column\n];\nawait table.insertRows(newRows);\n\n// The missing columns will have undefined or null values\nawait sdb.done();```"}
{"prompt":"How do I generate a bar chart from my data using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assuming 'category' and 'value' are columns in your data\nawait table.logBarChart('category', 'value');\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that the getData method returns an array of objects?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// The getData method always returns an array of objects\nconst data = await table.getData();\nconsole.log(data);\n\nawait sdb.done();\n```"}
{"prompt":"How can I reduce the precision of a specific geometry column named 'myGeom' to 2 decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Reduce the precision of geometries in 'myGeom' column to 2 decimal places\nawait table.reducePrecision(2, { column: 'myGeom' });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to log the current column names before renaming?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the current column names before renaming\nconsole.log('Current columns:', table.columns());\nawait table.renameColumns({ 'oldColumn': 'newColumn' });\nawait sdb.done();\n```"}
{"prompt":"Does `done()` affect in-memory databases differently than file-based ones?","completion":"Yes, for file-based databases, `done()` also compacts the database file. Here's an example:"}
{"prompt":"Can I round the calculated Z-scores to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.zScore(\"score\", \"scoreZScore\", { decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to handle the bounding box data after retrieval?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the bounding box and use it for further processing\nconst bbox = await table.getBoundingBox();\nconst [minLat, minLon, maxLat, maxLon] = bbox;\nconsole.log({\n  minLatitude: minLat,\n  minLongitude: minLon,\n  maxLatitude: maxLat,\n  maxLongitude: maxLon\n});\n\nawait sdb.done();\n```"}
{"prompt":"What does the `rewind` option do in `writeGeoData`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", { rewind: true });\nawait sdb.done();\n```\n// The rewind option, when set to true, rewinds the coordinates of polygons to follow the right-hand rule (RFC 7946)."}
{"prompt":"How do I retrieve data where a number column is greater than a certain value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst highValues = await table.getData({ conditions: \"numberColumn > 100\" });\nconsole.log(highValues);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the original projection when reprojecting?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Reproject geometries in the default column to EPSG:3347 (NAD83/Statistics Canada Lambert)\nawait table.reproject('EPSG:3347');\n// The method will attempt to automatically detect the original projection\nawait sdb.done();\n```"}
{"prompt":"Can I specify a custom delimiter for a CSV file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load data from a CSV file with a semicolon as the delimiter\nawait table.loadData(\"./data.csv\", { delim: \";\" });\n\nawait sdb.done();\n```"}
{"prompt":"How can I configure SimpleDB to include data types when logging a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({ types: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use date comparisons in the conditions for getLastRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Using date comparisons in conditions\nconst lastRowDate = await table.getLastRow({\n  conditions: `date > '2023-01-01'`,\n});\nconsole.log(lastRowDate);\n\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL syntax for filtering conditions in getTop?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst top5Books = await table.getTop(5, { conditions: `category = 'Books'` });\nconsole.log(top5Books);\nawait sdb.done();\n```"}
{"prompt":"Can I log the extent of multiple columns in one operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the extent of multiple columns by calling logExtent for each column\nawait table.logExtent('price');\nawait table.logExtent('quantity');\nawait sdb.done();\n```"}
{"prompt":"Is there a way to count how many of each geometry type I have?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add the geometry type column and count occurrences\nawait table.typeGeo('geometryType');\nawait table.summarize({\n  values: 'geometryType',\n  summaries: ['count'],\n  groupBy: ['geometryType']\n});\nawait sdb.done();\n```"}
{"prompt":"How do I find out how many columns are in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst nbColumns = await table.getNbColumns();\nconsole.log(nbColumns); // Output the number of columns\nawait sdb.done();\n```"}
{"prompt":"What data types are supported for the 'column' parameter?","completion":"The column must contain numerical values for outlier detection using IQR."}
{"prompt":"How do I use a specific model for embeddings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use a specific model for embeddings\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  model: 'your-model-name' // Specify the desired model\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I load data into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"path/to/your/data.csv\");\n```"}
{"prompt":"How do I sort a SimpleTable by a specific column in descending order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.sort({\n  columnName: \"desc\",\n});\nawait sdb.done();\n```"}
{"prompt":"How do I get the mean of a column named 'score' and round it to one decimal place?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst meanScore = await table.getMean(\"score\", { decimals: 1 });\nconsole.log(meanScore);\nawait sdb.done();\n```"}
{"prompt":"Can I rewind polygon coordinates when writing to GeoJSON?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Write GeoJSON with rewound coordinates\nawait table.writeGeoData('./output.geojson', {\n  rewind: true\n});\nawait sdb.done();\n```"}
{"prompt":"How can I handle geospatial projections in a SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Define projections for specific columns\nconst projections = {\n  geometry: 'EPSG:4326',\n  anotherGeometry: 'EPSG:3857'\n};\nconst table = sdb.newTable('myGeospatialData', projections);\nawait table.loadData('path/to/geospatial.csv');\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the Z-score for a single column and store the results in a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.zScore(\"age\", \"ageZScore\");\nawait sdb.done();\n```"}
{"prompt":"I want to create a new value in a column called 'discounted_price' based on the original 'price' column. How can I set 'discounted_price' to 'price' minus 10 if 'price' is greater than 100, otherwise set it to 'price'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.updateColumn(\"discounted_price\", `CASE WHEN price > 100 THEN price - 10 ELSE price END`);\nawait sdb.done();\n```"}
{"prompt":"If my table has a column named 'price' with decimal values, will `getSum` correctly calculate the total?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst totalPrice = await table.getSum(\"price\");\nconsole.log(totalPrice); // This should correctly sum the decimal values in the 'price' column.\nawait sdb.done();\n```"}
{"prompt":"How do I rename columns in a table after loading data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\nawait table.renameColumns({\n  oldColumnName: \"newColumnName\",\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I add a column indicating whether geometries are closed?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.isClosedGeo(\"isClosed\");\nawait sdb.done();\n```"}
{"prompt":"What does getNbValues return if the table is empty?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues); // 0 if the table is empty\nawait sdb.done();\n```"}
{"prompt":"Is it possible to accumulate without creating a new column?","completion":"```ts\n// The accumulate method always creates a new column.\n// There's no option to overwrite the original column.\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will create a new column 'cumulativeSales'\nawait table.accumulate('sales', 'cumulativeSales');\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the last 10 rows in their original order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last 10 rows in original order\nconst bottom10OriginalOrder = await table.getBottom(10, {\n  originalOrder: true,\n});\nconsole.log(bottom10OriginalOrder);\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the last row of a table without any filtering?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst lastRow = await table.getLastRow();\nconsole.log(lastRow);\nawait sdb.done();\n```"}
{"prompt":"What data types can I use as the replacement value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.replaceNulls(\"booleanColumn\", true);\nawait table.replaceNulls(\"stringColumn\", \"default\");\nawait sdb.done();\n```"}
{"prompt":"Can I combine specifying a column and preserving the boundary in one call?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Simplify geometries in 'geom' column, preserving the boundary with a tolerance of 0.1\nawait table.simplify(0.1, { column: 'geom', simplifyBoundary: false });\nawait sdb.done();\n```"}
{"prompt":"How do I remove a table from the SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove the table from the database\nawait table.removeTable();\nawait sdb.done();\n```"}
{"prompt":"Can I revert the changes made by cleanColumnNames()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clean column names\nawait table.cleanColumnNames();\n// To revert, you would need to reload the data or manually rename columns back\nawait table.renameColumns({\n  firstName: 'First Name',\n  productId: 'Product ID'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I add a new numerical column based on existing columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new column 'total' as a float, calculated from 'column1' and 'column2'\nawait table.addColumn('total', 'float', 'column1 + column2');\nawait sdb.done();\n```"}
{"prompt":"Can I add multiple row number columns with different names?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add two row number columns with different names\nawait table.addRowNumber('rowNum1');\nawait table.addRowNumber('rowNum2');\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the minimum value from a column named 'age'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst minAge = await table.getMin(\"age\");\nconsole.log(minAge);\nawait sdb.done();\n```"}
{"prompt":"How do I check if a specific table exists in my database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check if a table with the name 'myTable' exists\nconst tables = await sdb.getTables();\nconst tableExists = tables.some(table => table.name === 'myTable');\nconsole.log('Does myTable exist?', tableExists);\nawait sdb.done();\n```"}
{"prompt":"How do I handle missing values when calculating variance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Missing values are automatically excluded when calculating variance\nconst variance = await table.getVar('numericColumnWithMissingValues');\nconsole.log(variance);\n\nawait sdb.done();\n```"}
{"prompt":"How do I get descriptive statistics for all columns in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get descriptive statistics for all columns\nconst description = await table.getDescription();\nconsole.table(description);\n\nawait sdb.done();\n```"}
{"prompt":"How do I compute ranks for multiple categories such as department and city?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.ranks(\"sales\", \"salesRank\", { categories: [\"department\", \"city\"] });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I rename a column in a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.renameColumns({ \"old_column_name\": \"new_column_name\" });\nawait sdb.done();\n```"}
{"prompt":"If a column has a missing data type, what will `getSchema` return for that column's type?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst schema = await table.getSchema();\nconst columnWithMissingType = schema.find(c => c.type === null);\nif (columnWithMissingType) {\n  console.log(columnWithMissingType.type);\n}\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't call `done()` when using a file-based database?","completion":"The changes won't be saved properly and resources won't be freed. Here's an example of proper usage:"}
{"prompt":"How do I handle cases where the offset exceeds the number of rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('value', 'previous_value', { offset: 100 });\n// Values beyond the available rows will be undefined or null\nawait sdb.done();\n```"}
{"prompt":"How do I perform a spatial join using the `joinGeo` method?","completion":"To perform a spatial join, you can use the `joinGeo` method by specifying the right table and the desired method. Here's an example of merging two tables based on intersecting geometries:"}
{"prompt":"How do I specify the number of rows to log when displaying table data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable({\n  nbRowsToLog: 10,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I normalize a single column without any categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Normalize 'age' column and store in 'normalizedAge'\nawait table.normalize('age', 'normalizedAge');\nawait sdb.done();\n```"}
{"prompt":"How can I specify a different environment variable for the API key?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  apiKey: \"MY_CUSTOM_API_KEY\"\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if there are no tables in the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get table names when no tables exist\nconst tableNames = await sdb.getTableNames();\nconsole.log('Table names:', tableNames); // Output: [] (empty array)\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use regular expressions for the string replacement?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.replace(\"myColumn\", { \"\\d+\": \"-\" }, { regex: true });\nawait sdb.done();\n```"}
{"prompt":"How do I handle optional conditions when retrieving data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Optional conditions can be passed as an object\nconst filteredData = await table.getData({ conditions: 'price > 10' });\nconsole.log(filteredData);\n\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with the first 50 rows of the current table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Create a new table with first 50 rows\nconst newTable = await table.selectRows(50, { outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"My geometry data is in a column named 'shape'. How do I calculate the area using this column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.area(\"shapeArea\", { column: \"shape\" });\nawait sdb.done();\n```"}
{"prompt":"What data type will the values in the returned row have?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow); // The values will be string, number, boolean, Date or null\nawait sdb.done();\n```"}
{"prompt":"Can I specify a particular column for the linesToPolygons transformation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Transform closed linestrings in a specific column named 'routeLines' into polygons\nawait table.linesToPolygons('routeLines');\nawait sdb.done();\n```"}
{"prompt":"Can I remove a table that hasn't been added to the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Attempting to remove a table not yet loaded\nawait table.removeTable(); // This will resolve without error\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the 'on' parameter in removeDuplicates?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// All columns are considered when removing duplicates\nawait table.removeDuplicates();\nawait sdb.done();\n```"}
{"prompt":"What if I need to calculate the median for multiple columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate median for multiple columns\nconst median1 = await table.getMedian('column1');\nconst median2 = await table.getMedian('column2');\nconsole.log('Median 1:', median1);\nconsole.log('Median 2:', median2);\n\nawait sdb.done();\n```"}
{"prompt":"How do I save the map as an SVG file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [geo(geoJsonData, { fill: 'lightgray' })]\n  });\n};\n\nawait table.writeMap(mapFunction, './output/map.svg');\nawait sdb.done();\n```"}
{"prompt":"How can I format dates in the GeoJSON output?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Write GeoJSON with formatted dates\nawait table.writeGeoData('./output.geojson', {\n  formatDates: true\n});\nawait sdb.done();\n```"}
{"prompt":"How do I get the list of DuckDB extensions in a specific format?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\n// Convert the list to a comma-separated string of extension names\nconst extensionNames = extensions.map(ext => ext.extension_name).join(',');\nconsole.log('Installed extensions:', extensionNames);\nawait sdb.done();\n```"}
{"prompt":"How do I load a DuckDB database file into SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.loadDB('./my_database.db');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to remove rows based on a single value in one column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'country' is 'Canada'\nawait table.remove({ country: 'Canada' });\nawait sdb.done();\n```"}
{"prompt":"How can I concatenate multiple columns with a specific separator?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Concatenate 'colA', 'colB', and 'colC' into 'combinedCol' with a hyphen separator\nawait table.concatenate(['colA', 'colB', 'colC'], 'combinedCol', { separator: '-' });\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose cache logging in SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({ cacheVerbose: true });\nawait sdb.done();\n```"}
{"prompt":"What happens when I call cleanColumnNames() on a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Example column names before cleaning: 'First Name', 'Product ID'\nawait table.loadData('path/to/your/data.csv');\n// After cleaning, column names become 'firstName', 'productId'\nawait table.cleanColumnNames();\nawait sdb.done();\n```"}
{"prompt":"How do I know which columns are available before removing them?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the list of columns before removing them\nconst columns = await table.getColumnNames();\nconsole.log('Available columns:', columns);\nawait table.removeColumns(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"What data type will be stored in the new column created by the `intersect` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation states that the new column will store boolean results.\n// TRUE if the geometries intersect, and FALSE otherwise.\n\n// Example:\nawait table.intersect(\"shape1\", \"shape2\", \"intersected\");\n\n// The 'intersected' column will contain boolean values.\n\nawait sdb.done();\n```"}
{"prompt":"What happens if there are multiple geometry columns in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If multiple geometry columns exist, specify which one to use\nawait table.nbVertices('vertexCount', { column: 'specificGeometryColumn' });\nawait sdb.done();\n```"}
{"prompt":"Can I use isValidGeo on a table without geometry data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will result in FALSE for all rows if no geometry data is found\nawait table.isValidGeo('isValid');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to combine multiple conditions using logical operators?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last 5 rows where 'category' is 'Electronics' and 'price' > 100\nconst bottom5Electronics = await table.getBottom(5, {\n  conditions: `category === 'Electronics' && price > 100`,\n});\nconsole.log(bottom5Electronics);\n\nawait sdb.done();\n```"}
{"prompt":"If I only specify the `x` parameter, what happens?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.correlations({ x: \"temperature\" });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use `getRow` without any conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row without any conditions (will throw an error if no rows)\ntry {\n  const row = await table.getRow(``);\n  console.log(row);\n} catch (error) {\n  console.error('No rows found or multiple matches:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How do I simplify geometries while preserving the original boundary?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.simplify(0.1, { simplifyBoundary: false });\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a directory containing multiple CSV files into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { fileType: 'csv' });\nawait sdb.done();\n```"}
{"prompt":"Can I format the values displayed in the bar chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logBarChart('category', 'value', {\n  formatValues: (d) => `$${d}`,\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use a decimal percentage for sampling?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// You can use decimal percentages like '10.5%'\nawait table.sample('10.5%');\nawait sdb.done();\n```"}
{"prompt":"How can I see the full prompt that is sent to the AI?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { verbose: true },\n);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to clone multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clone each column individually\nawait table.cloneColumn('col1', 'newCol1');\nawait table.cloneColumn('col2', 'newCol2');\nawait sdb.done();\n```"}
{"prompt":"How do I capitalize a single column in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.capitalize(\"myColumn\");\nawait sdb.done();\n```"}
{"prompt":"How do I log the contents of a SimpleTable to the console?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.logTable({ nbRowsToLog: 10 }); // Logs the first 10 rows by default\nawait sdb.done();\n```"}
{"prompt":"Can I specify a custom name for the resulting table after a cross join?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a cross join and store the result in a new table named 'joinedResult'\nconst joinedTable = await tableA.crossJoin(tableB, { outputTable: 'joinedResult' });\n\nawait sdb.done();\n```"}
{"prompt":"Can I log all rows and include column types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable({ nbRowsToLog: 'all', types: true });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to compute lengths without specifying the column name?","completion":"No, you must provide the `newColumn` parameter. Here's an example with automatic geometry detection:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Automatically detects the geometry column and stores lengths in 'length_m'\nawait table.length('length_m');\nawait sdb.done();\n```"}
{"prompt":"What coordinate system does the `latLon` method expect?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation states the expected coordinate system is EPSG:4326 (WGS84).\n// Ensure your geometry column uses this coordinate system before calling latLon.\nawait table.latLon(\"geom\", \"lat\", \"lon\");\n\nawait sdb.done();\n```"}
{"prompt":"If my table has 10 rows and 5 columns, what would `getNbValues()` return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues); // Output: 50 (10 rows * 5 columns)\nawait sdb.done();\n```"}
{"prompt":"How can I specify the geometry columns for the join?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\nconst joinedTable = await tableA.joinGeo(tableB, \"intersect\", {\n  leftTableColumn: \"geometryA\",\n  rightTableColumn: \"geometryB\",\n});\nawait sdb.done();\n```"}
{"prompt":"Can I remove rows based on multiple values in a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where 'job' is 'accountant' or 'developer'\nawait table.remove({ job: [\"accountant\", \"developer\"] });\n\nawait sdb.done();\n```"}
{"prompt":"Is the fill method only applicable to numeric columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill NULL values in a string column 'category'\nawait table.fill('category');\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with a specific name in SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst employees = sdb.newTable(\"employees\");\nawait sdb.done();\n```"}
{"prompt":"Is it possible to perform multiple updates on different columns in a single `updateWithJS` call?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Update multiple columns in one call\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    price: row.price * 1.05, // Increase price by 5%\n    discount: row.discount || 0, // Set discount to 0 if null/undefined\n    updated_at: new Date() // Update timestamp\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I select all tables except those that match a certain pattern?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Select all tables not ending with '_temp'\nawait sdb.selectTables(\n  sdb.tables.filter(table => !table.name.endsWith('_temp'))\n);\nawait sdb.done();\n```"}
{"prompt":"What data types are returned by the getSchema method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconsole.log('Data types:', schema.map(col => col.dataType)); // Log the data types of each column\n\nawait sdb.done();\n```"}
{"prompt":"How can I overwrite an existing database file when creating a SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ file: \"/path/to/my/database.db\", overwrite: true });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the distance between two geometry columns using the default settings?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.distance(\"geometry1\", \"geometry2\", \"distance_srs\");\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a seed, is the sampling truly random?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sample(100); // Uses a random seed by default\nawait sdb.done();\n```"}
{"prompt":"Can I use the result column from the inside method for further analysis?","completion":"```ts\n// Yes, you can use the new boolean column in subsequent operations\nawait table.inside('pointGeom', 'polygon_geom', 'isInside');\n// Filter rows where points are inside polygons\nawait table.filter({ isInside: true });\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column with a default value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new column 'status' with default value 'active'\nawait table.addColumn('status', 'string', ''''active'''');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to calculate Z-scores without creating a new column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Overwrite the original column with Z-scores\nawait table.zScore('value', 'value');\nawait sdb.done();\n```"}
{"prompt":"How do I use `logExtent` to find the minimum and maximum values of a column named 'age'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logExtent(\"age\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the `originalOrder` option?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// By default, the last row will be logged first\nawait table.logBottom(10);\nawait sdb.done();\n```"}
{"prompt":"How do I remove a single column from my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove a single column named 'unneededColumn'\nawait table.removeColumns(\"unneededColumn\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I use the result of `getColumns()` directly in a loop?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst columnNames = await table.getColumns();\n\nfor (const columnName of columnNames) {\n  console.log(columnName);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I get the total number of rows in a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the number of rows in the table\nconst nbRows = await table.getNbRows();\nconsole.log(`Number of rows: ${nbRows}`);\nawait sdb.done();\n```"}
{"prompt":"What does the `done()` method do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// The done() method frees up memory by closing the database connection,\n// cleaning up the cache, and compacting the database file if it's file-based.\nawait sdb.done();\n```"}
{"prompt":"Can I use the `getTypes` method before loading any data into the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst dataTypes = await table.getTypes();\nconsole.log(dataTypes); // This will likely return an empty object or default types if no data is loaded.\nawait sdb.done();\n```"}
{"prompt":"If the column I specify in `getMean` is not a number, will it throw an error?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Assuming 'name' is a string column\n// The documentation does not specify error handling, so behavior is undefined.\n// It's best to ensure the column is numeric before calling getMean.\n// const meanName = await table.getMean(\"name\");\nawait sdb.done();\n```"}
{"prompt":"How do I remove a single column from my table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove a single column named 'tempColumn'\nawait table.removeColumns('tempColumn');\nawait sdb.done();\n```"}
{"prompt":"How do I reduce the precision of geometries in a default geometry column to 3 decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Reduce the precision of geometries in the default column to 3 decimal places\nawait table.reducePrecision(3);\nawait sdb.done();\n```"}
{"prompt":"How can I use the keep method to filter my data based on multiple columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'job' is 'accountant' or 'developer', AND 'city' is 'Montreal'\nawait table.keep({ job: ['accountant', 'developer'], city: 'Montreal' });\nawait sdb.done();\n```"}
{"prompt":"How do I handle the case where getMean returns undefined?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Handle potential undefined return value\nconst meanValue = await table.getMean('numericColumn');\nif (meanValue === undefined) {\n  console.log('Could not calculate mean, column might be empty or non-numeric.');\n} else {\n  console.log('Mean:', meanValue);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How can I filter the data based on a specific condition, like only retrieving rows where the 'category' column is equal to 'Book'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst booksData = await table.getData({ conditions: `category === 'Book'` });\nconsole.log(booksData);\nawait sdb.done();\n```"}
{"prompt":"How do I summarize 'sales' by 'region' and 'product_type' (multiple categories)?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.summarize({ values: 'sales', categories: ['region', 'product_type'] });\nawait sdb.done();\n```"}
{"prompt":"How do I calculate proportions for a column grouped by multiple categories?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsVertical(\"sales\", \"sales_proportion\", { categories: [\"region\", \"product_type\"] });\nawait sdb.done();\n```"}
{"prompt":"How can I use the aiRowByRow method to generate a new column based on an AI prompt?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use aiRowByRow to generate a new column based on an AI prompt\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    cache: true,\n    batchSize: 10,\n    verbose: true\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"If there is no overlap between the geometries in the two columns, what will be stored in the new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// If there is no overlap, the new column will likely contain null or empty geometries.\n// The exact representation of 'no overlap' depends on the underlying geospatial library.\n\n// Example:\nawait table.intersection(\"geometry1\", \"geometry2\", \"intersection_result\");\n// Inspect the 'intersection_result' column to see how 'no overlap' is represented.\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to chain getMean with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Chain getMean with other operations\nconst meanValue = await table.getMean('numericColumn').then(mean => {\n  console.log('Chained Mean:', mean);\n  return mean;\n});\n\nconsole.log('Final Mean:', meanValue);\n\nawait sdb.done();\n```"}
{"prompt":"What if I try to load an array that's not properly formatted?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Attempting to load a non-array or invalid data structure\ntry {\n  await table.loadArray('invalid data'); // This will throw an error\n} catch (error) {\n  console.error('Error loading array:', error);\n}\n\nawait sdb.done();"}
{"prompt":"How do I use JavaScript syntax for conditions in getLastRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Using JavaScript syntax for conditions\nconst lastRowBooks = await table.getLastRow({\n  conditions: `category === 'Book' && price > 10`,\n});\nconsole.log(lastRowBooks);\n\nawait sdb.done();\n```"}
{"prompt":"How can I convert a column to an integer type while handling potential conversion errors by replacing invalid values with NULL?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'quantity' to integer, replacing invalid values with NULL\nawait table.convert({ quantity: \"integer\" }, { try: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I perform an intersection aggregation without specifying a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute intersection of geometries in the default column\nawait table.aggregateGeo('intersection');\nawait sdb.done();\n```"}
{"prompt":"Is it necessary to load data into the table before calling `cleanColumnNames`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// It's best practice to load data before cleaning column names.\nawait table.cleanColumnNames();\nawait sdb.done();\n```"}
{"prompt":"Can I use the inside method on different types of geometries, like lines or polygons?","completion":"```ts\n// The inside method is designed for checking if geometries in column1 are inside those in column2\n// It works with any geometry type as long as they have compatible projections\nawait table.inside('lineGeom', 'polygonContainer', 'isInside');\n```"}
{"prompt":"How do I simplify the geometries in my table using the default tolerance and column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.simplify(0.1);\nawait sdb.done();\n```"}
{"prompt":"Is it possible to add metadata to the GeoJSON output? How?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", { metadata: { source: \"MyData\" } });\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging to see more debugging information during the embedding generation process?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n// await table.loadData(\"your_data.csv\");\n\nawait table.aiEmbeddings(\"text_column\", \"embeddings\", { verbose: true });\n\n// This will enable verbose logging.\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to add a row number column without using the method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The addRowNumber method is the recommended way to add row numbers\n// Do not manually calculate row numbers as it can lead to errors\nawait table.addRowNumber('rowNumber');\nawait sdb.done();\n```"}
{"prompt":"Can I normalize a column based on categories? How do I specify the category column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.normalize(\"valueColumn\", \"normalizedValue\", { categories: \"categoryColumn\" });\nawait sdb.done();\n```"}
{"prompt":"What data types are required for the x and y axes when using `logLineChart`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n];\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value');\nawait sdb.done();\n```\n\nThe x-axis values must be either `number` or `Date` objects, and the y-axis values must be `number`."}
{"prompt":"Can I create overlapping bins?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Bins will overlap if the interval is smaller than the range of values\nawait table.bins('value', 3, 'value_bins');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to get the same random sample every time I run the code?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sample(\"10%\", { seed: 42 }); // Selects 10% with seed 42\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide any options when calling `proportionsHorizontal`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Default suffix 'Perc' and no rounding\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary']);\n\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that all tables have the same columns before inserting?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Insert rows from 'tableB' into 'tableA', unifying columns\nawait tableA.insertTables(tableB, { unifyColumns: true });\n\nawait sdb.done();\n```"}
{"prompt":"How can I compute the area of geometries in square kilometers?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute area in square kilometers and store in 'area_km2'\nawait table.area('area_km2', { unit: 'km2' });\nawait sdb.done();\n```"}
{"prompt":"Can I clone a column to a new column with a different name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Clone the 'product_id' column as 'original_product_id'\nawait table.cloneColumn(\"product_id\", \"original_product_id\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I cache the embedding of the input text?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n\nconst similarResults = await table.aiVectorSimilarity(\n  \"your search query\",\n  \"your embeddings column\",\n  5, // Number of results\n  {\n    cache: true, // Enable caching\n  },\n);\n\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"What is the purpose of the `projections` parameter in the constructor?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst projections = { \"location\": \"EPSG:4326\" };\nconst table = sdb.newTable(\"geo_table\", projections);\n// This defines a geospatial projection for the 'location' column.\nawait sdb.done();\n```"}
{"prompt":"Is there a way to check if flipCoordinates has changed my data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Flip coordinates and then log the table to check changes\nawait table.flipCoordinates();\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"If no tables exist in the SimpleDB instance, what will `getTables()` return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// getTables() will return an empty array if no tables exist.\nconst tables = await sdb.getTables();\n\n// Check if the array is empty.\nif (tables.length === 0) {\n  console.log(\"No tables found.\");\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I remove a table that is being used by another process?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove the table\nawait table.removeTable();\n// If another process is using it, you may need to handle concurrency\n// This example assumes exclusive access\nawait sdb.done();\n```"}
{"prompt":"If a column named 'amount' has some values that can't be converted to a float, how can I avoid errors and replace those invalid values with NULL?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.convert({\n  amount: \"float\"\n}, {\n  try: true\n});\nawait sdb.done();\n```"}
{"prompt":"How do I round a single column to the nearest integer?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Round 'column1' to the nearest integer\nawait table.round('column1');\nawait sdb.done();\n```"}
{"prompt":"What does the logProjections() method return?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the geospatial projections and store the returned table\nconst resultTable = await table.logProjections();\nconsole.log(resultTable); // Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different offset value than the default of 1?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.cloneColumnWithOffset(\"sales\", \"sales_2_days_ago\", { offset: 2 });\nawait sdb.done();\n```"}
{"prompt":"Can I specify a particular sheet to load from an Excel file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadDataFromDirectory(\"./my_excel_file.xlsx\", { sheet: \"Sheet2\" });\nawait sdb.done();\n```"}
{"prompt":"How do I check if a table exists before retrieving it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check if the table exists by attempting to retrieve it\nasync function doesTableExist(tableName: string) {\n  try {\n    await sdb.getTable(tableName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nconst isExists = await doesTableExist('yourTableName');\nconsole.log('Table exists:', isExists);\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the distance using the spheroid method and store the result in kilometers, rounding to one decimal place?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.distance(\"location1\", \"location2\", \"distance_km\", {\n  method: \"spheroid\",\n  unit: \"km\",\n  decimals: 1,\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to retrieve a table that doesn't exist?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\ntry {\n  const table = await sdb.getTable('nonexistentTable');\n} catch (error) {\n  console.error('Table not found:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"Is there a way to undo the removal of a table?","completion":"No, once a table is removed, it cannot be undone. Data should be backed up if needed."}
{"prompt":"How do I handle missing columns when inserting multiple tables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\nconst tableC = sdb.newTable();\nawait tableC.loadData('data/tableC.csv');\n\n// Insert rows from 'tableB' and 'tableC' into 'tableA', unifying columns\nawait tableA.insertTables([tableB, tableC], { unifyColumns: true });\n\nawait sdb.done();\n```"}
{"prompt":"How do I summarize 'sales' by 'region' (single category)?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.summarize({ values: 'sales', categories: 'region' });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to visualize the resulting intersection geometries?","completion":"```ts\n// After computing the intersection, you can export the geometry column for visualization.\nawait table.writeData('result/intersection.geojson', { columns: ['intersectGeom'] });\n```"}
{"prompt":"How do I handle null values when using getLastRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Handle null values in conditions\nconst lastRowNull = await table.getLastRow({\n  conditions: `status === null`,\n});\nconsole.log(lastRowNull);\n\nawait sdb.done();\n```"}
{"prompt":"Can I insert rows from multiple tables into the current table at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\nconst tableC = sdb.newTable();\nawait tableB.loadData(\"data/tableB.csv\");\nawait tableC.loadData(\"data/tableC.csv\");\nawait tableA.insertTables([\"tableB\", \"tableC\"]); // Insert from both tables\nawait sdb.done();\n```"}
{"prompt":"What happens if the two geometry columns have different projections?","completion":"```ts\n// The method will throw an error if the projections are not the same.\n// Ensure both columns use the same projection before calling removeIntersection.\nawait table.removeIntersection('geomA', 'geomB', 'geomResult');\n```"}
{"prompt":"How do I create a basic line chart using writeChart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { year: 2024, value: 10 },\n  { year: 2025, value: 15 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      line(plotData, { x: 'year', y: 'value' }),\n    ],\n  });\n\nconst outputPath = './output/lineChart.png';\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"How do I compute proportions for multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute for each column separately\nawait table.proportionsVertical('column1', 'perc1');\nawait table.proportionsVertical('column2', 'perc2');\nawait sdb.done();\n```"}
{"prompt":"Can I skip a certain number of rows at the beginning of each CSV file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { skip: 5 });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to create bins with a non-integer interval?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create bins with an interval of 2.5\nawait table.bins('height', 2.5, 'height_bins');\nawait sdb.done();\n```"}
{"prompt":"How do I create an in-memory SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// No file specified, so it uses an in-memory database.\nawait sdb.done();\n```"}
{"prompt":"How do I compute quantiles within specific categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute quantiles within each 'categoryColumn' category\nawait table.quantiles('valueColumn', 5, 'quantileResult', { categories: 'categoryColumn' });\nawait sdb.done();\n```"}
{"prompt":"How can I handle rate limits when using aiRowByRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Set rate limit for aiRowByRow requests\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    rateLimitPerMinute: 10 // Adjust this value based on your needs\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"Do the objects in the array need to have the same properties?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { name: \"Charlie\", age: 40 },\n  { city: \"New York\" },\n];\n\nawait table.loadArray(data);\nawait sdb.done();\n```"}
{"prompt":"Can I combine multiple replacements in one call?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Replace multiple strings in one call\nawait table.replace('columnName', {\n  'oldString1': 'newString1',\n  'oldString2': 'newString2'\n});\n\nawait sdb.done();\n```"}
{"prompt":"Does the `getUniques` method return the unique values in any specific order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst uniqueValues = await table.getUniques(\"columnName\");\nconsole.log(uniqueValues);\nawait sdb.done();\n```"}
{"prompt":"How do I load an array of JavaScript objects into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Create an array of objects to load\nconst data = [\n  { letter: 'a', number: 1 },\n  { letter: 'b', number: 2 },\n];\n\n// Load the array into the table\nawait table.loadArray(data);\n\nawait sdb.done();"}
{"prompt":"How does isClosedGeo determine if a geometry is closed?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// It checks if the geometry is a closed shape like a polygon\nawait table.isClosedGeo('isClosed');\nawait sdb.done();\n```"}
{"prompt":"How do I log the first 10 rows of a table with data types?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\nawait table.logTable({ nbRowsToLog: 10, types: true });\n\nawait sdb.done();\n```"}
{"prompt":"Can I apply different trimming methods to different columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Trim leading whitespace from 'startColumn' and trailing from 'endColumn'\nawait table.trim(['startColumn', 'endColumn'], { method: ['leftTrim', 'rightTrim'] });\nawait sdb.done();\n```"}
{"prompt":"How can I use aiQuery to generate a SQL query based on a prompt?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Generate and execute a SQL query based on the prompt\nawait table.aiQuery(\n  'Give me the average salary by department',\n  { cache: true, verbose: true }\n);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass a column name that doesn't exist to the `hasColumn` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst hasNonExistentColumn = await table.hasColumn(\"nonExistentColumn\");\nconsole.log(hasNonExistentColumn); // Output: false\nawait sdb.done();\n```"}
{"prompt":"How do I create a scatter plot using writeChart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { x: 1, y: 2 },\n  { x: 2, y: 3 },\n  { x: 3, y: 5 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: 'x', y: 'y' }),\n    ],\n  });\n\nconst outputPath = './output/scatterPlot.png';\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"How can I load a SQLite database file and keep it attached?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.loadDB('./my_database.sqlite', { detach: false });\nawait sdb.done();\n```"}
{"prompt":"Can I calculate the cumulative sum based on multiple categories? For example, I want to calculate the cumulative sum of 'profit' within both 'region' and 'product' categories.","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.accumulate(\"profit\", \"cumulative_profit\", { categories: [\"region\", \"product\"] });\nawait sdb.done();\n```"}
{"prompt":"What is the return type of the `getData` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nconst data = await table.getData();\n// The data is an array of objects with string, number, boolean, Date, or null values\nconsole.log(data);\nawait sdb.done();```"}
{"prompt":"How do I check if the latLon method has successfully extracted the coordinates?","completion":"You can use the logTable method to inspect the table and verify that the new latitude and longitude columns have been added correctly.\n```ts\nawait table.logTable();\n```"}
{"prompt":"How do I keep specific values across multiple columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'job' is 'accountant' or 'developer', AND 'city' is 'Montreal'\nawait table.keep({ job: ['accountant', 'developer'], city: 'Montreal' });\nawait sdb.done();\n```"}
{"prompt":"What happens if the two geometry columns have different projections?","completion":"```ts\n// The intersect method will throw an error if the projections are not the same.\n// Make sure both 'geomA' and 'geomB' have the same projection before calling intersect.\nawait table.intersect('geomA', 'geomB', 'doIntersect');\n```"}
{"prompt":"How can I use aiVectorSimilarity without caching?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Disable caching for the input text embedding\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    cache: false\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I reproject geometries in a specific column to a different SRS?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Reproject geometries in a specific column named 'myGeom' to EPSG:3347\nawait table.reproject('EPSG:3347', { column: 'myGeom', from: 'EPSG:4326' });\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL expressions to define the values of a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Use a SQL expression to calculate a new column 'discounted_price'\nawait table.addColumn(\"discounted_price\", \"float\", \"price * 0.9\");\nawait sdb.done();\n```"}
{"prompt":"If I don't load any data, can I still use `logNbRows`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.logNbRows(); // This will log 0 if no data is loaded.\nawait sdb.done();\n```"}
{"prompt":"How can I calculate correlations for each category within a 'region' column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.correlations({ categories: \"region\" });\nawait sdb.done();\n```"}
{"prompt":"How do I update a specific column in my table using `updateWithJS`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    myColumn: typeof d.myColumn === 'number' ? d.myColumn * 2 : d.myColumn,\n  }));\n  return modifiedRows;\n});\n\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometries in `column1` and `column2` have different projections?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation states that both columns must have the same projection.\n// If they don't, the behavior is undefined and likely an error will occur.\n// It's important to ensure the projections are consistent before using the inside method.\n\n// Example of what NOT to do if projections are different:\n// await table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n\nawait sdb.done();\n```"}
{"prompt":"Is `unnestGeo` a synchronous or asynchronous operation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.unnestGeo(); // It's an asynchronous operation, so we use 'await'.\nawait sdb.done();\n```"}
{"prompt":"How do I compute the proportion of each value in a column relative to the total sum of that column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute proportions of 'column1' relative to the total sum of 'column1'\nawait table.proportionsVertical(\"column1\", \"perc\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I know which columns have specific data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Access the columnTypes property to see which columns have specific data types\nconsole.log(table.columnTypes);\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join between two tables and store the result in a new table with a custom name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\nawait tableA.loadData(\"data/tableA.csv\");\nawait tableB.loadData(\"data/tableB.csv\");\nconst tableC = await tableA.crossJoin(tableB, { outputTable: \"tableC\" });\nawait tableC.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I get the median value of a column named 'price'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst medianPrice = await table.getMedian(\"price\");\nconsole.log(medianPrice);\nawait sdb.done();\n```"}
{"prompt":"Can I overwrite the original column with the extracted substring?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Split 'fileName' by dot and extract the first part (index 0), overwriting 'fileName'\nawait table.splitExtract('fileName', '.', 0, 'fileName');\n\nawait sdb.done();\n```"}
{"prompt":"Can I compute the intersection of more than two geometry columns?","completion":"```ts\n// The intersection method only supports two columns. For multiple intersections,\n// perform pairwise operations sequentially.\nawait table.intersection('geomA', 'geomB', 'inter1');\nawait table.intersection('inter1', 'geomC', 'finalIntersect');\n```"}
{"prompt":"Can I use getNbColumns to check if my data has loaded correctly?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Verify the number of columns after loading data\nconst nbColumns = await table.getNbColumns();\nconsole.log(`Number of columns loaded: ${nbColumns}`);\n\nawait sdb.done();\n```"}
{"prompt":"Can I see all the unique values, even if there are more than 100?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logUniques(\"your_column_name\", { stringify: true });\nawait sdb.done();\n```"}
{"prompt":"After retrieving a table, what can I do with the returned `SimpleTable` instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Retrieve a table\nconst myTable = await sdb.getTable(\"myTable\");\n\n// You can then use methods available on the SimpleTable instance,\n// such as logTable, summarize, sort, renameColumns, and writeData.\n// For example:\n// await myTable.logTable();\n// await myTable.summarize({ values: \"amount\", categories: \"category\", summaries: [\"sum\"] });\n\nawait sdb.done();\n```"}
{"prompt":"How do I insert rows from multiple tables and fill missing columns with NULL values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst targetTable = sdb.newTable();\nconst sourceTable1 = sdb.newTable();\nconst sourceTable2 = sdb.newTable();\n\nawait targetTable.insertTables([\"sourceTable1\", \"sourceTable2\"], { unifyColumns: true });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to log more than 10 rows from the bottom?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the last 15 rows (last row first)\nawait table.logBottom(15);\nawait sdb.done();\n```"}
{"prompt":"How do I convert a single column to uppercase using SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.upper(\"columnName\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a name for the cloned table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"data/sample.csv\");\n// Clone tableA to a new table with a default generated name (e.g., \"table1\")\nconst tableB = await tableA.cloneTable();\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that the data types of the inserted rows match the existing columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Insert rows with matching data types\nconst newRows = [\n  { id: 4, name: 'Eve', salary: 75000 },\n];\nawait table.insertRows(newRows);\n\nawait sdb.done();```"}
{"prompt":"Can I clone a column without specifying any categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('sales', 'sales_previous_day');\n// No categories specified, offset applied to entire column\nawait sdb.done();\n```"}
{"prompt":"How do I add a title to my map?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [geo(geoJsonData, { fill: 'lightblue' })],\n    title: 'My Custom Map'\n  });\n};\n\nawait table.writeMap(mapFunction, './output/titled_map.png');\nawait sdb.done();\n```"}
{"prompt":"What does the `logUniques` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst result = await table.logUniques(\"your_column\");\n// result is the SimpleTable instance\nawait sdb.done();\n```"}
{"prompt":"Can I check for a table's existence before performing operations on it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check if the table exists\nconst exists = await sdb.hasTable('operations_table');\nif (exists) {\n  const table = sdb.getTable('operations_table');\n  // Perform operations on the table\n  await table.loadData('data.csv');\n} else {\n  console.log('Table does not exist. Create it first.');\n}\nawait sdb.done();\n```"}
{"prompt":"Can I combine multiple conditions using logical operators like `&&` or `||` in the `conditions` string?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst lastRow = await table.getLastRow({\n  conditions: `category === 'Book' && price > 10`,\n});\nconsole.log(lastRow);\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific extension is installed using getExtensions()?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\n// Check if 'spatial' extension is installed\nconst isSpatialInstalled = extensions.some(ext => ext.extension_name === 'spatial');\nconsole.log('Is spatial extension installed:', isSpatialInstalled);\nawait sdb.done();\n```"}
{"prompt":"What is the default rounding method if I don't specify one?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.round(\"myColumn\");\nawait sdb.done();\n```\n// The default rounding method is 'round', which rounds to the nearest integer, with halves rounding up."}
{"prompt":"How do I handle errors when loading data into a table?","completion":"You can wrap the `loadData` call in a try-catch block to handle any potential errors.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\ntry {\n  await table.loadData('path/to/your/data.csv');\n} catch (error) {\n  console.error('Error loading data:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"Does the `upper` method modify the original table data, or does it create a new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.upper(\"myColumn\");\n// The documentation doesn't explicitly state whether the original table is modified.\n// It's likely the original table is modified in place.\nawait sdb.done();\n```"}
{"prompt":"How can I log the last 5 rows of my table while preserving the original order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logBottom(5, { originalOrder: true });\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `from` option, how does the `reproject` method determine the original projection?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// The method attempts to automatically detect the original projection if the 'from' option is omitted.\nawait table.reproject(\"EPSG:3347\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass an array of values to the keep method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'job' is 'accountant' or 'developer'\nawait table.keep({ job: ['accountant', 'developer'] });\nawait sdb.done();\n```"}
{"prompt":"Can I flip coordinates multiple times on the same column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Flip coordinates twice, which will revert to the original order\nawait table.flipCoordinates();\nawait table.flipCoordinates();\nawait sdb.done();\n```"}
{"prompt":"I have a `SimpleTable` instance. How can I remove the table using that instance?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst myTable = sdb.newTable(\"my_data\");\n// ... load data into myTable ...\nawait sdb.removeTables(myTable);\nawait sdb.done();\n```"}
{"prompt":"How do I compute ranks within categories like department or city?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.ranks(\"salary\", \"salaryRank\", { categories: \"department\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I assign bins to a column with a specific interval size and store the results in a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Assign bins for 'value' column with interval 10, store in 'value_bins'\nawait table.bins(\"value\", 10, \"value_bins\");\nawait sdb.done();\n```"}
{"prompt":"How can I customize the style of a chart using writeChart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { year: 2024, value: 10 },\n  { year: 2025, value: 15 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: 'year', y: 'value' }),\n    ],\n  });\n\nconst outputPath = './output/styledChart.png';\nawait table.writeChart(chartFunction, outputPath, {\n  style: 'div#chart { background-color: #f0f0f0; padding: 20px; }',\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use multiple categories for the rolling aggregation? For example, group by both 'city' and 'date'.","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.rolling(\"sales\", \"rollingSumSales\", \"sum\", 2, 2, { categories: [\"city\", \"date\"] });\nawait sdb.done();\n```"}
{"prompt":"What does the logNbRows() method return?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The logNbRows() method returns the SimpleTable instance\nconst result = await table.logNbRows();\nconsole.log(result); // This will be the SimpleTable instance\nawait sdb.done();\n```"}
{"prompt":"What if I want to fill NULLs only in specific columns after filtering?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Filter rows where 'status' is 'active'\nawait table.filter({ status: 'active' });\n// Fill NULLs in 'value1' and 'value2' columns\nawait table.fill(['value1', 'value2']);\nawait sdb.done();\n```"}
{"prompt":"What is the correct way to load data from a different file path?","completion":"Simply provide the correct file path in the `loadData` method.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait table.loadData('data/myData.csv');\nawait sdb.done();\n```"}
{"prompt":"What is the difference between passing a string and an array to selectColumns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Passing a string selects one column\nawait table.selectColumns('singleColumn');\n// Passing an array selects multiple columns\nawait table.selectColumns(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"How do I display a progress bar for long-running operations?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ progressBar: true });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"How do I use the `wider` method to restructure a table from long to wide format?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Restructure the table by pivoting 'Year' into new columns with 'Employees' as values\nawait table.wider('Year', 'Employees');\nawait sdb.done();\n```"}
{"prompt":"How can I select a specific range of rows, for example, rows 21 to 30?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.selectRows(10, { offset: 20 }); // Selects 10 rows starting from row 21 (offset 20)\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the last 5 rows of my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst bottom5 = await table.getBottom(5);\nconsole.log(bottom5);\nawait sdb.done();\n```"}
{"prompt":"How do I concatenate two columns into a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Concatenate 'firstName' and 'lastName' into a new 'fullName' column\nawait table.concatenate(['firstName', 'lastName'], 'fullName');\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the bounding box of geometries in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the bounding box of geometries in the default column\nconst bbox = await table.getBoundingBox();\nconsole.log(bbox); // e.g., [45.0, -75.0, 46.0, -73.0]\n\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with a specific name?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst employees = sdb.newTable('employees'); // Creates a table named 'employees'\nawait sdb.done();\n```"}
{"prompt":"If I only want to see the very last row of my table, what value should I pass to `logBottom`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logBottom(1);\nawait sdb.done();\n```"}
{"prompt":"How do I log the total number of rows in a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the total number of rows in the table\nawait table.logNbRows();\nawait sdb.done();\n```"}
{"prompt":"How do I assign quartiles to a column based on sales values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign quartiles to the 'sales' column and store in 'salesQuartile'\nawait table.quantiles('sales', 4, 'salesQuartile');\nawait sdb.done();\n```"}
{"prompt":"What data type will the new geometry column have?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create point geometries and check the data type of 'geom' column\nawait table.points('lat', 'lon', 'geom');\n// The 'geom' column will store point geometries as arrays [latitude, longitude]\nawait table.logTable({ types: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass null to the sort method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Passing null sorts all columns in ascending order\nawait table.sort(null);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a startValue for binning?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Bins will start from the minimum value in 'value' column\nawait table.bins(\"value\", 10, \"value_bins\");\nawait sdb.done();\n```"}
{"prompt":"How do I skip the first 5 rows of my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.skip(5);\nawait sdb.done();\n```"}
{"prompt":"Can I use the keep method to filter data based on multiple criteria?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'job' is 'accountant' or 'developer', AND 'city' is 'Montreal'\nawait table.keep({ job: ['accountant', 'developer'], city: 'Montreal' });\nawait sdb.done();\n```"}
{"prompt":"What is the axis order for the input geometry?","completion":"The input geometry is assumed to be in [latitude, longitude] order as per EPSG:4326."}
{"prompt":"What is the correct way to ensure resources are cleaned up after using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// ... perform operations ...\nawait sdb.done();\n```"}
{"prompt":"Can I use reducePrecision without specifying any parameters?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// No, you must specify the number of decimals. Here's an example with 3 decimals:\nawait table.reducePrecision(3);\nawait sdb.done();\n```"}
{"prompt":"Is it possible to load a GeoJSON file and have the coordinates flipped automatically?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n// Coordinates are automatically flipped to [latitude, longitude]\nawait sdb.done();\n```"}
{"prompt":"How can I control the thinking budget for AI models?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Control the thinking budget for AI models\nawait table.aiQuery(\n  'Analyze the correlation between temperature and sales',\n  { thinkingBudget: -1 }\n);\n\nawait sdb.done();\n```"}
{"prompt":"Can I chain getBoundingBox with other methods?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Chain getBoundingBox with other operations\nconst bbox = await table.getBoundingBox();\nconsole.log('Bounding Box:', bbox);\n\n// Proceed with additional processing if needed\n\nawait sdb.done();\n```"}
{"prompt":"How can I log the contents of a SimpleTable with specific row and character limits?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.logTable({\n  nbRowsToLog: 5,\n  nbCharactersToLog: 50,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I specify the number of preceding and following rows in a rolling window?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Specify 2 preceding and 2 following rows for a rolling average\nawait table.rolling(\"sales\", \"rollingAvgSales\", \"mean\", 2, 2);\nawait sdb.done();\n```"}
{"prompt":"How do I use the `aiRowByRow` method with Ollama? What environment variables or options do I need to set?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load some data into the table\nawait table.loadArray([{ text: \"Some text\" }]);\n\n// Use aiRowByRow with Ollama\nawait table.aiRowByRow(\n  \"text\",\n  \"summary\",\n  \"Summarize this text.\",\n  {\n    ollama: true, // Set to true to use Ollama\n    AI_MODEL: \"llama2\", // Specify the Ollama model name\n    // You can also pass an instance of Ollama directly:\n    // ollama: myOllamaInstance,\n  },\n);\n\nawait sdb.done();\n```"}
{"prompt":"How can I log the number of columns in my table during debugging?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Log the number of columns for debugging purposes\nconsole.log(`Debug: Table has ${await table.getNbColumns()} columns`);\n\nawait sdb.done();\n```"}
{"prompt":"How can I limit the rate of AI requests using the `rateLimitPerMinute` option?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load some data\nawait table.loadArray([{ text: \"Some text\" }, { text: \"Another text\" }]);\n\n// Use aiRowByRow with rate limiting\nawait table.aiRowByRow(\n  \"text\",\n  \"summary\",\n  \"Summarize this text.\",\n  {\n    rateLimitPerMinute: 10, // Limit requests to 10 per minute\n  },\n);\n\nawait sdb.done();\n```"}
{"prompt":"Can I check for the existence of a column and handle it asynchronously?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Asynchronously check for column existence\nasync function checkColumnExistence(columnName: string) {\n  const exists = await table.hasColumn(columnName);\n  console.log(`Column ${columnName} exists: ${exists}`);\n}\n\ncheckColumnExistence('age');\n\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a directory while specifying a delimiter for CSV files?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { fileType: \"csv\", delim: \";\" });\nawait sdb.done();\n```"}
{"prompt":"Can I customize the cache directory in SimpleDB?","completion":"```ts\n// You can set a custom cache directory using the `cacheDir` option.\nconst sdb = new SimpleDB({ cacheDir: './custom-cache' });\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  // Your computations here\n});\n\nawait sdb.done();\n```"}
{"prompt":"How does `getRow` handle different data types in conditions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row with different data types in conditions\nconst mixedTypeRow = await table.getRow(`age === 25 AND active === true`);\nconsole.log(mixedTypeRow);\n\nawait sdb.done();\n```"}
{"prompt":"How can I load data from a directory while unifying columns across multiple files with different structures?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { unifyColumns: true });\nawait sdb.done();\n```"}
{"prompt":"If I have a column named 'salary', how would I use `logExtent` to see its range?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logExtent(\"salary\");\nawait sdb.done();\n```"}
{"prompt":"Is it possible to buffer multiple geometry columns in the same table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Buffer 'geom1' with a distance of 2 units and store in 'bufferGeom1'\nawait table.buffer('bufferGeom1', 2, { column: 'geom1' });\n// Buffer 'geom2' with a distance of 5 units and store in 'bufferGeom2'\nawait table.buffer('bufferGeom2', 5, { column: 'geom2' });\nawait sdb.done();\n```"}
{"prompt":"What happens if the column contains non-numeric values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempt to get mean of a non-numeric column\ntry {\n  const meanValue = await table.getMean('nonNumericColumn');\n  console.log('Mean:', meanValue);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"How can I log the first 5 rows of a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable(5);\nawait sdb.done();\n```"}
{"prompt":"How can I skip the first 5 rows and select the next 20 rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.selectRows(20, { offset: 5 });\nawait sdb.done();\n```"}
{"prompt":"What does the `rewind` option do in the `writeMap` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./path/to/your/data.geojson\");\n\nconst mapFunction = (geoJsonData: { features: { properties: Record<string, unknown> }[] }) => {\n  // Your Observable Plot code here\n  return plot({});\n};\n\nconst options = {\n  rewind: true,\n};\n\nawait table.writeMap(mapFunction, \"./output/map.png\", options);\n```\nThe `rewind` option, when set to `true`, rewinds the coordinates of polygons to follow the spherical winding order. This is important for D3.js and ensures correct rendering of polygons."}
{"prompt":"How do I identify outliers in a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.outliersIQR(\"age\", \"isOutlier\");\nawait sdb.done();\n```"}
{"prompt":"How can I validate AI responses using aiRowByRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Validate AI responses using aiRowByRow\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    test: (dataPoint) => {\n      if (!dataPoint || typeof dataPoint !== 'string') {\n        throw new Error('Invalid response format');\n      }\n    },\n    retry: 2\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How can I configure SimpleDB to log the total execution duration?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({ logDuration: true });\nawait sdb.done();\n```"}
{"prompt":"How do I save a chart as an SVG file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { year: 2024, value: 10 },\n  { year: 2025, value: 15 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      bar(plotData, { x: 'year', y: 'value' }),\n    ],\n  });\n\nconst outputPath = './output/chart.svg';\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"How do I round the normalized values to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.normalize(\"dataColumn\", \"normalizedData\", { decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"How do I log rows where a specific column meets a condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable({ conditions: `age > 18` });\nawait sdb.done();\n```"}
{"prompt":"How do I select the first 50 rows of my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.selectRows(50);\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior if I don't provide any options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default behavior: no categories, no rounding\nawait table.proportionsVertical('column1', 'perc');\nawait sdb.done();\n```"}
{"prompt":"How do I get the skewness of a column named 'score' in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst scoreSkew = await table.getSkew(\"score\");\nconsole.log(scoreSkew);\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a directory while ensuring all columns are treated as text?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { allText: true });\nawait sdb.done();\n```"}
{"prompt":"How do I split a column named 'fullName' by a space and extract the first name into a new column called 'firstName'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.splitExtract(\"fullName\", \" \", 0, \"firstName\");\nawait sdb.done();\n```"}
{"prompt":"Can I compute a rolling sum within specific categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling sum of 'transactions' within 'customer_id' categories\nawait table.rolling('transactions', 'rollingSumTransactions', 'sum', 5, 0, {\n  categories: 'customer_id'\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I skip the first few rows of a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Skip the first 5 rows of the table\nawait table.skip(5);\nawait sdb.done();\n```"}
{"prompt":"Can I get the quantile value for a column with more than two decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the 25th percentile of 'measure' rounded to 3 decimal places\nconst firstQuartileMeasure = await table.getQuantile('measure', 0.25, {\n  decimals: 3\n});\nconsole.log('First Quartile Measure:', firstQuartileMeasure);\n\nawait sdb.done();\n```"}
{"prompt":"Can I remove duplicates based on multiple columns in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove duplicates based on 'firstName' and 'lastName'\nawait table.removeDuplicates({ on: ['firstName', 'lastName'] });\nawait sdb.done();\n```"}
{"prompt":"What is the difference between using JavaScript syntax and SQL syntax for conditions in getTop?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Using JavaScript syntax\nconst top5BooksJS = await table.getTop(5, { conditions: `category === 'Books'` });\n// Using SQL syntax\nconst top5BooksSQL = await table.getTop(5, { conditions: `category = 'Books'` });\nconsole.log(\"JS syntax:\", top5BooksJS);\nconsole.log(\"SQL syntax:\", top5BooksSQL);\nawait sdb.done();\n```"}
{"prompt":"How do I compute the union of two geometry columns in a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute the union of geometries in 'geomA' and 'geomB', storing results in 'unionGeom'\nawait table.union('geomA', 'geomB', 'unionGeom');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to clone multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The cloneColumn method only clones one column at a time.\n// To clone multiple columns, you would need to call the method multiple times.\n\n// Clone 'column1' as 'newColumn1'\nawait table.cloneColumn(\"column1\", \"newColumn1\");\n\n// Clone 'column2' as 'newColumn2'\nawait table.cloneColumn(\"column2\", \"newColumn2\");\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to clone a column with multiple categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('stock_price', 'prev_price_by_stock_and_exchange', {\n  offset: 1,\n  categories: ['stock_symbol', 'exchange']\n});\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How can I format the x and y-axis values in a line chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-03-01'), value: 30 },\n  { date: new Date('2023-04-01'), value: 40 },\n];\n\nawait table.loadArray(data);\n\n// Format x-axis as 'YYYY-MM-DD' and y-axis with two decimal places\nawait table.logLineChart('date', 'value', {\n  formatX: (d) => new Date(d).toISOString().split('T')[0],\n  formatY: (d) => `${d.toFixed(2)}%`,\n});\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a `startValue`? Will the binning start at the minimum value of the column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.bins(\"my_column\", 10, \"new_column\"); // Binning starts at the minimum value of 'my_column'\nawait sdb.done();\n```"}
{"prompt":"Can I normalize multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Normalize each column separately\nawait table.normalize('col1', 'normalizedCol1');\nawait table.normalize('col2', 'normalizedCol2');\nawait sdb.done();\n```"}
{"prompt":"Can I specify which column contains the geometries when adding the type?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Specify the column 'featureGeom' as the source of geometries\nawait table.typeGeo('featureType', { column: 'featureGeom' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get the median of a column that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// This will likely throw an error if the column 'nonexistent_column' doesn't exist.\n// You should handle this with a try-catch block in a real application.\nconst medianValue = await table.getMedian(\"nonexistent_column\");\nconsole.log(medianValue);\nawait sdb.done();\n```"}
{"prompt":"What does the `thinkingBudget` option do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { thinkingBudget: 100 },\n);\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to extract a substring at an index that doesn't exist in the split string?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Split 'address' by comma and extract the third part (index 2) into a new 'country' column\n// If the address has less than 3 parts, an empty string will be returned\nawait table.splitExtract(\"address\", \",\", 2, \"country\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I capitalize multiple columns at once in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Capitalize 'first_name' and 'last_name' columns\nawait table.capitalize([\"first_name\", \"last_name\"]);\\nawait sdb.done();\n```"}
{"prompt":"Can I load geospatial data from a URL using the loadGeoData method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('https://example.com/data.geojson');\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"If I have multiple tables, how do I log the types for each one?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nawait table1.loadData(\"path/to/data1.csv\");\nawait table1.logTypes();\n\nconst table2 = sdb.newTable();\nawait table2.loadData(\"path/to/data2.csv\");\nawait table2.logTypes();\n\nawait sdb.done();\n```"}
{"prompt":"How can I adjust the width and height of a dot chart in the console output?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Set chart dimensions\nawait table.logDotChart(\"date\", \"value\", {\n  width: 80,\n  height: 20\n});\nawait sdb.done();\n```"}
{"prompt":"If I don't specify any options, what happens to the normalized values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.normalize(\"myColumn\", \"normalizedColumn\"); // No options specified\nawait sdb.done();\n```\n// The values in 'myColumn' will be normalized using min-max normalization, and the result will be stored in 'normalizedColumn' without any rounding or categorization."}
{"prompt":"How do I identify outliers in a single column using IQR and store the results in a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Identify outliers in 'age' column and store results in 'isOutlier' column\nawait table.outliersIQR(\"age\", \"isOutlier\");\nawait sdb.done();\n```"}
{"prompt":"Can I get a list of data types present in the schema?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconst dataTypesList = [...new Set(schema.map(col => col.dataType))];\nconsole.log('Data types present:', dataTypesList); // Log unique data types in the schema\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to capitalize all columns in a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get all column names and pass them to capitalize\nconst columns = await table.getColumnNames();\nawait table.capitalize(columns);\nawait sdb.done();\n```"}
{"prompt":"I only want to remove duplicate rows based on the 'id' column. How can I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeDuplicates({ on: \"id\" });\nawait sdb.done();\n```"}
{"prompt":"Is there a difference between using SQL syntax and JavaScript syntax for the filter conditions?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Both SQL and JavaScript syntax are supported for filter conditions.\n// The documentation shows examples of both.\n// For example:\n// SQL: await table.filter(\"price > 100\");\n// JavaScript: await table.filter(\"price > 100\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I use a SimpleTable instance to check if it exists in the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Create a table instance\nconst myTable = sdb.newTable('my_data');\n// Check if this table exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log('Does this table exist?', existsInstance);\nawait sdb.done();\n```"}
{"prompt":"What does the `logProjections` method actually do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\nawait table.logProjections(); // This will log the geospatial projections to the console.\nawait sdb.done();\n```"}
{"prompt":"How can I use getMean in a larger data analysis pipeline?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Example pipeline: calculate mean, round it, and log the result\nasync function analyzeData() {\n  const meanValue = await table.getMean('numericColumn', { decimals: 2 });\n  console.log('Analysis Result:', meanValue);\n}\n\nawait analyzeData();\nawait sdb.done();\n```"}
{"prompt":"If I set `outputTable` to `true`, what will happen?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nconst table2 = sdb.newTable();\n\n// Assuming table1 and table2 are loaded with data\n\nconst newTable = await table1.join(table2, { outputTable: true });\n// A new table with a generated name will be created containing the joined data.\n```"}
{"prompt":"Can I specify the number of decimal places for the variance result? If so, how?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst varianceWithDecimals = await table.getVar(\"amount\", { decimals: 3 });\nconsole.log(varianceWithDecimals);\nawait sdb.done();\n```"}
{"prompt":"How do I update a column using string functions?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert 'name' column to uppercase\nawait table.updateColumn('name', `UPPER(name)`);\nawait sdb.done();\n```"}
{"prompt":"How do I use `getSum` to calculate the total of a column named 'sales'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst totalSales = await table.getSum(\"sales\");\nconsole.log(totalSales); // Output the total sales\nawait sdb.done();\n```"}
{"prompt":"What data types are required for the x and y axes when using `logDotChart`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// X-axis must be number or Date\n// Y-axis must be number\n\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 },\n];\nawait table.loadArray(data);\nawait table.logDotChart(\"date\", \"value\");\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate all geometries in the default column into a single union geometry?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Aggregate all geometries in the default column into a single union geometry\nawait table.aggregateGeo(\"union\");\nawait sdb.done();\n```"}
{"prompt":"How does getSkew handle zero or very small values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate skewness on a column with small values\nconst smallValuesSkewness = await table.getSkew('smallValuesColumn');\nconsole.log('Small Values Skewness:', smallValuesSkewness);\n\nawait sdb.done();\n```"}
{"prompt":"If I want to use the spheroid distance method, what should I set?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\nawait tableA.joinGeo(tableB, \"within\", {\n  distance: 10,\n  distanceMethod: \"spheroid\",\n});\nawait sdb.done();\n```"}
{"prompt":"What does the `nbCharactersToLog` option do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"text_table\", undefined, undefined, { nbCharactersToLog: 20 });\n// This limits the number of characters logged for string columns to 20.\nawait sdb.done();\n```"}
{"prompt":"Can I chain linesToPolygons with other methods after transformation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Transform and then perform another operation like logTable\nawait table.linesToPolygons().then(() => {\n  return table.logTable();\n});\nawait sdb.done();\n```"}
{"prompt":"How can I enable caching for aiQuery to save time?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Enable caching to save time and resources\nawait table.aiQuery(\n  'Calculate the total sales per region',\n  { cache: true }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How do I select a single table named 'users' to keep in the database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.selectTables(\"users\");\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where a value in a column is not of the expected type when using `updateWithJS`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    myColumn: typeof d.myColumn === 'number' ? d.myColumn + 1 : null,\n  }));\n  return modifiedRows;\n});\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method will automatically detect the geometry column\nawait table.isValidGeo('isValid');\nawait sdb.done();\n```"}
{"prompt":"I want to calculate the rolling sum of 'orders' grouped by 'user_id'. How would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.rolling(\"orders\", \"rollingSumOrders\", \"sum\", 5, 0, { categories: \"user_id\" });\nawait sdb.done();\n```"}
{"prompt":"Can I chain the buffer method with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create a buffer and then perform another operation like renameColumns\nawait table.buffer('buffered', 1)\n  .then(() => table.renameColumns({ buffered: 'myBuffer' }));\nawait sdb.done();\n```"}
{"prompt":"What if my latitude and longitude are stored as strings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert string columns to numeric before creating geometries\nawait table.castColumn('lat', 'float64');\nawait table.castColumn('lon', 'float64');\nawait table.points('lat', 'lon', 'geom');\nawait sdb.done();\n```"}
{"prompt":"What data type should the column names in the `lower` method be?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.lower(\"myStringColumn\"); // Column names are strings.\nawait sdb.done();\n```"}
{"prompt":"How can I load data into a SimpleTable from a CSV file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myData');\n// Load data from a CSV file\nawait table.loadData('path/to/data.csv');\nawait sdb.done();\n```"}
{"prompt":"How can I round multiple columns to two decimal places using the ceiling method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Round 'price' and 'discount' columns to 2 decimal places using ceiling\nawait table.round([\"price\", \"discount\"], { decimals: 2, method: \"ceiling\" });\nawait sdb.done();\n```"}
{"prompt":"How can I unnest geometries from a specific column named 'shapes'?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Unnest geometries in the 'shapes' column\nawait table.unnestGeo('shapes');\nawait sdb.done();\n```"}
{"prompt":"If my geometries are in a column named 'shape', how do I get the GeoJSON data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming the table is loaded with data\n\nconst shapeGeojson = await table.getGeoData(\"shape\");\nconsole.log(shapeGeojson);\nawait sdb.done();\n```"}
{"prompt":"How can I remove all rows with any missing values except for specific columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows with missing values except in 'id' and 'name' columns\nawait table.removeMissing({ invert: false, columns: ['id', 'name'] });\nawait sdb.done();\n```"}
{"prompt":"Does `logDescription` return any values, or is it just for console output?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst result = await table.logDescription(); // result will be undefined\nawait sdb.done();\n```"}
{"prompt":"Can I compute correlations for multiple categories at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Compute correlations within multiple categories\nconst correlationTable = await table.correlations({\n  categories: [\"category1\", \"category2\"],\n  outputTable: true,\n});\nawait sdb.done();\n```"}
{"prompt":"How can I create a new table with the summarized data instead of overwriting the original table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst summaryTable = await table.summarize({\n  values: [\"sales\", \"profit\"],\n  outputTable: true,\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I extract the last 3 characters from a column named 'id'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.right(\"id\", 3);\nawait sdb.done();\n```"}
{"prompt":"How can I insert rows and then access the updated table data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Insert new rows\nconst newRows = [\n  { id: 4, name: 'Helen' },\n];\nawait table.insertRows(newRows);\n\n// Access the updated data\nconst data = await table.getData();\nconsole.log(data);\n\nawait sdb.done();```"}
{"prompt":"What is the purpose of the `name` parameter in the SimpleTable constructor?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"customers\");\n// The 'name' parameter assigns the name 'customers' to the table.\nawait sdb.done();\n```"}
{"prompt":"Can I use decimal values for the buffer distance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use a decimal distance of 0.5 units for the buffer\nawait table.buffer('halfUnitBuffer', 0.5);\nawait sdb.done();\n```"}
{"prompt":"If I have multiple tables, will the `getTableNames` method return them in a specific order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: Table names sorted alphabetically\nawait sdb.done();\n```"}
{"prompt":"How do I handle ranking when there are multiple columns involved?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rank 'sales' within each combination of 'region' and 'year'\nawait table.ranks('sales', 'salesRank', { \n  categories: ['region', 'year']\n});\nawait sdb.done();\n```"}
{"prompt":"How can I convert a column to a date type from a string in the format 'MM/DD/YYYY'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'date_str' to date using format %m/%d/%Y\nawait table.convert({ date_str: \"date\" }, { datetimeFormat: \"%m/%d/%Y\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I handle different SRS units when creating buffers?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Ensure the distance matches the SRS unit of the geometries\nawait table.buffer('buffered', 1000); // Assuming SRS is in meters\nawait sdb.done();\n```"}
{"prompt":"Can I replace strings case-insensitively?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use regex with 'i' flag for case-insensitive replacement\nawait table.replace('columnName', { '(?i)oldString': 'newString' }, { regex: true });\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use getFirstRow without specifying any options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row without specifying any options\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that polygons in the GeoJSON output follow the right-hand rule?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.writeGeoData(\"./output.geojson\", { rewind: true });\nawait sdb.done();\n```"}
{"prompt":"Can I compute distances using the Spheroid method without specifying units?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default unit is 'm' if not specified\nawait table.distance('area1', 'area2', 'distance_spheroid_m', {\n  method: 'spheroid'\n});\nawait sdb.done();\n```"}
{"prompt":"Is there a way to handle cases where all values in the column are null?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Handle case where all values are null\ntry {\n  const maxValue = await table.getMax('all_null_column');\n  console.log('Max value:', maxValue);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();```"}
{"prompt":"How do I create point geometries from latitude and longitude columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create point geometries in a new 'geom' column using 'lat' and 'lon' columns\nawait table.points('lat', 'lon', 'geom');\nawait sdb.done();\n```"}
{"prompt":"How do I specify the projection for a new geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Add a new geometry column 'centroid' with a specific projection\nawait table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"geom\")`, {\n  projection: \"EPSG:4326\",\n});\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific table exists in the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check if 'employees' table exists\nconst tableNames = await sdb.getTableNames();\nconst isTableExists = tableNames.includes('employees');\nconsole.log('Does employees table exist?', isTableExists);\nawait sdb.done();\n```"}
{"prompt":"How do I execute a query and return the results?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst youngEmployees = await sdb.customQuery(\n  'SELECT * FROM employees WHERE age < 30',\n  { returnDataFrom: 'query' }\n);\nconsole.log(youngEmployees);\nawait sdb.done();\n```"}
{"prompt":"Can I log more than 100 unique values using logUniques?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use stringify to see all unique values\nawait table.logUniques('category', { stringify: true });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to automatically detect the geometry column when adding vertex counts?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method will automatically detect the geometry column if only one exists\nawait table.nbVertices('vertexCount');\nawait sdb.done();\n```"}
{"prompt":"How can I see the output of `logDescription`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logDescription(); // The output will be printed to the console.\nawait sdb.done();\n```"}
{"prompt":"What does the `isClosedGeo` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst result = await table.isClosedGeo(\"isClosed\"); // result will be undefined\nawait sdb.done();\n```\n//The method returns a promise that resolves when the check is complete, but doesn't return a value."}
{"prompt":"How do I select a single table by name in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.selectTables('employees'); // Selects the 'employees' table and removes all others\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use a table after removing it?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove the table\nawait table.removeTable();\n// This will throw an error as the table has been removed\n// await table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I round normalized values to a specific number of decimals?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Normalize 'price' and round to 2 decimals\nawait table.normalize('price', 'normalizedPrice', { decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"How can I convert a string column with commas to a number?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'amount' column to float, automatically removing commas\nawait table.convert({ amount: 'float' });\n\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that only specific columns are converted to uppercase?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Specify exact columns to convert\nawait table.upper(['specificColumn1', 'specificColumn2']);\nawait sdb.done();\n```"}
{"prompt":"How do I perform an intersection of geometries within each category?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.aggregateGeo(\"intersection\", { categories: \"category_column\" });\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve a table and then summarize its data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Retrieve the table and summarize its data\nconst table = await sdb.getTable('yourTableName');\nawait table.summarize({\n  values: 'columnToSum',\n  categories: 'categoryColumn',\n  summaries: ['count', 'sum']\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript logical operators in the filter condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Using JavaScript logical operators to filter rows\nawait table.filter(`price > 100 && quantity > 0`);\nawait sdb.done();\n```"}
{"prompt":"Can I customize the behavior of `done()`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// The done() method doesn't accept any parameters for customization.\n// Customization is done through the SimpleDB constructor.\nawait sdb.done();\n```"}
{"prompt":"Can I use getMax to find the highest numerical value in my dataset?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Find the highest numerical value in a column\nconst maxNumericalValue = await table.getMax('numerical_column');\nconsole.log('Highest numerical value:', maxNumericalValue);\n\nawait sdb.done();```"}
{"prompt":"How do I use the `centroid` method to create a new column called 'location_center' from the geometries in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.centroid(\"location_center\");\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column that stores a boolean value based on a condition?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Add a new boolean column 'is_expensive' based on price > 100\nawait table.addColumn(\"is_expensive\", \"boolean\", \"price > 100\");\nawait sdb.done();\n```"}
{"prompt":"Do I need to load the data before using the `fill` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fill(\"myColumn\");\nawait sdb.done();\n```\n//Yes, you must load the data into the table before you can fill the NULL values."}
{"prompt":"How can I use the intersection method with a specific column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute intersection of geometries in the 'regions' column\nawait table.aggregateGeo('intersection', { column: 'regions' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to select a column that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// The behavior is not specified in the documentation, but it's likely to either throw an error or do nothing.\nawait table.selectColumns(['nonExistentColumn']);\nawait sdb.done();\n```"}
{"prompt":"What data types are supported for the geometry columns?","completion":"```ts\n// The method expects both columns to contain valid geometries in the same projection.\n// Ensure your 'geomA' and 'geomB' columns are properly formatted before calling intersection.\nawait table.intersection('geomA', 'geomB', 'intersect');\n```"}
{"prompt":"If I don't specify any options, how many rows will be logged?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logTable();\nawait sdb.done();\n```\n// The default behavior is to log the first 10 rows."}
{"prompt":"Can I unnest geometries from multiple columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Unnest geometries in the default column\nawait table.unnestGeo();\n// If you have multiple geometry columns, you need to call unnestGeo for each\nawait table.unnestGeo('column1');\nawait table.unnestGeo('column2');\nawait sdb.done();\n```"}
{"prompt":"How do I clone a column with an offset of 2 rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('sales', 'sales_2_days_ago', { offset: 2 });\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How can I select a percentage of rows randomly from my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sample(\"25%\"); // Selects 25% of the rows randomly\nawait sdb.done();\n```"}
{"prompt":"How do I generate a basic dot chart using the logDotChart method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-03-01'), value: 30 },\n  { date: new Date('2023-04-01'), value: 40 },\n];\nawait table.loadArray(data);\nawait table.convert({ date: 'string' }, { datetimeFormat: '%x' });\nawait table.logDotChart('date', 'value');\nawait sdb.done();\n```"}
{"prompt":"How do I use the `longer` method to reshape my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Assuming your table has columns 'Year1', 'Year2', and 'Category'\nawait table.longer(['Year1', 'Year2'], 'Year', 'Value');\n\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a remote Parquet file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('https://example.com/data.parquet');\nawait sdb.done();\n```"}
{"prompt":"Does the `inside` method modify the original table, or does it create a new one?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The inside method modifies the existing table by adding a new column\n// with the boolean results. It does not create a new table.\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I use Vertex AI to generate embeddings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Generate embeddings using Vertex AI\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  vertex: true, // Use Vertex AI\n  project: process.env.AI_PROJECT, // Google Cloud project ID\n  location: process.env.AI_LOCATION, // Google Cloud location\n  model: 'your-vertex-model', // Specify the Vertex model\n  cache: true, // Cache results locally\n  concurrent: 5 // Allow 5 concurrent requests\n});\n\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior of the logColumns method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default behavior: logs only column names\nawait table.logColumns();\nawait sdb.done();\n```"}
{"prompt":"How can I check if both geometries in two different columns are closed?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check first geometry column\nawait table.isClosedGeo('isClosed1', { column: 'geom1' });\n// Check second geometry column\nawait table.isClosedGeo('isClosed2', { column: 'geom2' });\nawait sdb.done();\n```"}
{"prompt":"What happens if the specified column does not contain geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// If the column doesn't contain geometries, the method will likely do nothing or throw an error.\nawait table.fixGeo(\"nonGeomColumn\");\nawait sdb.done();\n```"}
{"prompt":"What does `logTableNames` actually output to the console?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.logTableNames(); // This will print something like: SimpleDB - Tables:  [\"employees\",\"customers\"]\nawait sdb.done();\n```"}
{"prompt":"Can I round the mean value to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate mean with 2 decimal places\nconst roundedMean = await table.getMean('numericColumn', { decimals: 2 });\nconsole.log('Rounded Mean:', roundedMean);\n\nawait sdb.done();\n```"}
{"prompt":"How can I handle null or missing values when using getValues?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get values that may include nulls\nconst optionalValues = await table.getValues('optionalField');\nconsole.log(optionalValues); // e.g., ['value1', null, 'value3']\n\nawait sdb.done();```"}
{"prompt":"How do I trim whitespace from a single column named 'name'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.trim(\"name\");\nawait sdb.done();\n```"}
{"prompt":"What data type should the columns I'm concatenating be?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Concatenate 'productName' (string) and 'productId' (number) into 'productInfo'\nawait table.concatenate(['productName', 'productId'], 'productInfo', { separator: '-' });\n\nawait sdb.done();\n```"}
{"prompt":"What if the column specified in the right method doesn't exist?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If the column doesn't exist, an error will be thrown\ntry {\n  await table.right('nonExistentColumn', 2);\n} catch (error) {\n  console.error('Column does not exist:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I handle renaming columns with special characters in their names?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use the exact column name with special characters in quotes\nawait table.renameColumns({ 'column$name': 'columnName' });\nawait sdb.done();\n```"}
{"prompt":"What does the `projections` parameter do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst geoData = sdb.newTable(\"geoData\", {\n  \"x\": \"EPSG:3857\",\n  \"y\": \"EPSG:3857\"\n});\n// The projections parameter maps column names to their geospatial projections.\nawait sdb.done();\n```"}
{"prompt":"What is the default unit for computing perimeters in SimpleTable?","completion":"The default unit is meters (`\"m\"`). Here's how to use it:\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default unit is meters\nawait table.perimeter('perimeter_m');\nawait sdb.done();\n```"}
{"prompt":"How do I limit the number of rows loaded from a file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv', { limit: 100 });\nawait sdb.done();\n```"}
{"prompt":"How can I define custom missing values for removal?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Define custom missing values as 'N/A' and 0\nawait table.removeMissing({ missingValues: ['N/A', 0] });\nawait sdb.done();\n```"}
{"prompt":"How can I log only rows that meet a certain condition, for example, where the 'value' column is greater than 10?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logTable({ conditions: `value > 10` });\nawait sdb.done();\n```"}
{"prompt":"How do I clone a column in a SimpleTable using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Clone 'age' column as 'ageInYears'\nawait table.cloneColumn(\"age\", \"ageInYears\");\nawait sdb.done();\n```"}
{"prompt":"How can I rewind the polygon coordinates to ensure compatibility with D3.js?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming the table is loaded with data\n\nconst rewoundGeojson = await table.getGeoData(undefined, { rewind: true });\nconsole.log(rewoundGeojson);\nawait sdb.done();\n```"}
{"prompt":"Can I use the `trim` method on multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Trim whitespace from multiple columns\nawait table.trim(['columnA', 'columnB']);\nawait sdb.done();\n```"}
{"prompt":"Can I get the names of all columns in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the schema of the table\nconst schema = await table.getSchema();\nconst columnNames = schema.map(col => col.name);\nconsole.log('Column names:', columnNames); // Log all column names\n\nawait sdb.done();\n```"}
{"prompt":"Can I use getQuantile to find the maximum value of a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the maximum value (100th percentile) of 'height' column\nconst maxValue = await table.getQuantile('height', 1);\nconsole.log('Maximum Height:', maxValue);\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to get the number of distinct values for each column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the number of distinct values per column\nconst description = await table.getDescription();\nconsole.log('Distinct Values:', description.map(col => ({\n  columnName: col.name,\n  distinctCount: col.distinct\n}));\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the `column` option when calling the `buffer` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.buffer(\"bufferedGeom\", 1); // The method will attempt to find a geometry column automatically.\nawait sdb.done();\n```"}
{"prompt":"Can I round the standard deviation to a specific number of decimal places? How would I do that for the 'price' column, rounded to 2 decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst priceStdDev = await table.getStdDev(\"price\", { decimals: 2 });\nconsole.log(priceStdDev);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the offset parameter?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('value', 'previous_value');\n// Offset defaults to 1\nawait sdb.done();\n```"}
{"prompt":"How do I write JSON data with columns as arrays?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./output.json', { dataAsArrays: true });\nawait sdb.done();\n```"}
{"prompt":"How do I use `getVar` to calculate the variance of a column named 'sales' and round the result to one decimal place?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst salesVariance = await table.getVar(\"sales\", { decimals: 1 });\nconsole.log(salesVariance);\nawait sdb.done();\n```"}
{"prompt":"How do I round the Z-score values to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate Z-scores for 'score' rounded to 2 decimals\nawait table.zScore('score', 'scoreZScore', { decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"How can I write the database to a SQLite file without including metadata?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Do your magic here!\nawait sdb.writeDB('./my_exported_database.sqlite', { noMetaData: true });\nawait sdb.done();\n```"}
{"prompt":"How do I use the `logUniques` method with the `stringify` option?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logUniques(\"your_column\", { stringify: true });\nawait sdb.done();\n```"}
{"prompt":"What data types can be returned by getLastRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the last row and check its data types\nconst lastRow = await table.getLastRow();\nconsole.log(lastRow);\n\nawait sdb.done();\n```"}
{"prompt":"How can I specify a particular geometry column when retrieving geospatial data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get GeoJSON data from a specific geometry column named 'myGeometries'\nconst myGeomJson = await table.getGeoData('myGeometries');\nconsole.log(myGeomJson);\n\nawait sdb.done();\n```"}
{"prompt":"What if I want to keep the original geometry columns after intersection?","completion":"```ts\n// The original columns remain unchanged. You can access them alongside the new column.\nawait table.logTable({ columns: ['geomA', 'geomB', 'intersectGeom'] });\n```"}
{"prompt":"Is `getNbRows` a synchronous or asynchronous operation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst nbRows = await table.getNbRows(); // Using 'await' indicates it's asynchronous\nconsole.log(nbRows);\nawait sdb.done();\n```"}
{"prompt":"How do I simplify only the interior of the geometries while preserving the boundary?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Simplify geometries without modifying the boundary\nawait table.simplify(0.15, { simplifyBoundary: false });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to chain the right method with other operations on the same table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Chain right method with other operations\nawait table.right('productCode', 2);\nawait table.renameColumns({ productCode: 'lastTwoChars' });\nawait sdb.done();\n```"}
{"prompt":"How are missing or null values handled in the 'column' during outlier detection?","completion":"Missing or null values are typically excluded from calculations, but exact behavior depends on implementation details."}
{"prompt":"How do I handle date formatting for the x-axis?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-03-01'), value: 30 },\n  { date: new Date('2023-04-01'), value: 40 },\n];\n\nawait table.loadArray(data);\nawait table.logLineChart('date', 'value', {\n  formatX: (d) => new Date(d).toLocaleDateString(),\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I use getSum on a column that contains null or undefined values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// getSum will ignore null or undefined values in the column\nconst totalSum = await table.getSum('columnWithNulls');\nconsole.log(totalSum);\n\nawait sdb.done();\n```"}
{"prompt":"How can I store selected rows in a new table with a specific name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Store selected rows in a new table named 'top_data'\nconst topData = await table.selectRows(75, { outputTable: \"top_data\" });\nawait sdb.done();\n```"}
{"prompt":"What file types are supported for saving the database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// You can save to .db (DuckDB) or .sqlite (SQLite)\nawait sdb.writeDB(\"./my_database.db\"); // DuckDB\nawait sdb.writeDB(\"./my_database.sqlite\"); // SQLite\nawait sdb.done();\n```"}
{"prompt":"How can I ensure resources are released after using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data.csv\");\n// Always call done() to release resources.\nawait sdb.done();\n```"}
{"prompt":"How do I use the `intersection` method to find the overlapping areas between two geometry columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Compute the intersection of geometries in 'geometry1' and 'geometry2' columns,\n// storing the results in 'intersection_result'\nawait table.intersection(\"geometry1\", \"geometry2\", \"intersection_result\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I use `removeIntersection` to subtract the area of one geometry column from another?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove the intersection of 'geometryB' from 'geometryA', storing the result in 'geometryA_diff'\nawait table.removeIntersection(\"geometryA\", \"geometryB\", \"geometryA_diff\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I specify the delimiter for CSV files when loading data from a directory?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { delim: ',' });\nawait sdb.done();\n```"}
{"prompt":"I want to store the correlation results in a new table instead of overwriting the current one. How do I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst correlationTable = await table.correlations({ outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a geometry column when calling buffer?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method will automatically find the geometry column and create a buffer of 2 units\nawait table.buffer('autoBuffer', 2);\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with the first 10 rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nconst newTable = await table.selectRows(10, { outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"How do I remove duplicate rows from my table considering all columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeDuplicates();\nawait sdb.done();\n```"}
{"prompt":"How do I create a pie chart using writeChart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { category: 'A', value: 40 },\n  { category: 'B', value: 60 },\n];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      pie(plotData, {\n        angle: 'value',\n        fill: 'category',\n      }),\n    ],\n  });\n\nconst outputPath = './output/pieChart.png';\nawait table.writeChart(chartFunction, outputPath);\nawait sdb.done();\n```"}
{"prompt":"Can I use boolean values to replace NULLs?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Replace NULL values in 'booleanColumn' with false\nawait table.replaceNulls('booleanColumn', false);\nawait sdb.done();\n```"}
{"prompt":"How do I perform linear regression with a specific independent variable and all other numeric columns as dependent variables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions with 'column1' as x and all other numeric columns as y\nawait table.linearRegressions({\n  x: 'column1'\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I round the slope, intercept, and R-squared values to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.linearRegressions({ decimals: 2 });\n\nawait sdb.done();\n```"}
{"prompt":"Can I use `logTypes` after loading data into the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// After loading the data\nawait table.logTypes();\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the first row where a specific column equals a certain value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row where 'status' is 'Active'\nconst firstRowActive = await table.getFirstRow({\n  conditions: `status === 'Active'`\n});\nconsole.log(firstRowActive);\nawait sdb.done();\n```"}
{"prompt":"Can I use the result of intersect to filter rows?","completion":"```ts\n// After running intersect, you can filter rows where intersection is TRUE\nawait table.filter({ doIntersect: true });\n```"}
{"prompt":"How do I clone only specific columns from a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clone specific columns\nconst clonedTable = await table.cloneTable({\n  columns: ['name', 'age', 'city']\n});\nawait sdb.done();\n```"}
{"prompt":"Can I chain the left method with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract first 4 characters and then sort by the result\nawait table.left('sku', 4);\nawait table.sort('sku');\nawait sdb.done();\n```"}
{"prompt":"How do I fill NULL values in a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fill(\"myColumn\");\nawait sdb.done();\n```"}
{"prompt":"Is there a way to replace strings without modifying the original data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Create a copy of the table before making changes\nconst copiedTable = table.copy();\n\n// Replace strings in the copied table\nawait copiedTable.replace('columnName', { 'oldString': 'newString' });\n\n// Log both tables to compare\nawait table.logTable({ name: 'Original Table' });\nawait copiedTable.logTable({ name: 'Modified Table' });\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the last row where a specific column has a certain value? For example, how do I get the last row where the 'category' column is equal to 'Book'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst lastRowBooks = await table.getLastRow({\n  conditions: `category === 'Book'`,\n});\nconsole.log(lastRowBooks);\nawait sdb.done();\n```"}
{"prompt":"What happens if the `columnsFrom` column has duplicate values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// If 'Category' has duplicate values, the last value associated with that category will be used.\nawait table.wider(\"Category\", \"Value\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I calculate Z-scores within specific categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate Z-scores for 'salary' within each 'department'\nawait table.zScore('salary', 'salaryZScore', { categories: 'department' });\nawait sdb.done();\n```"}
{"prompt":"Can I use getValues to retrieve data from a numeric column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all values from the 'price' column\nconst prices = await table.getValues('price');\nconsole.log(prices); // e.g., [499.99, 29.99, 19.99]\n\nawait sdb.done();```"}
{"prompt":"How do I handle cases where the geometry column name is not obvious?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Specify the exact geometry column name to avoid ambiguity\nawait table.nbVertices('vertexCount', { column: 'geometryColumn' });\nawait sdb.done();\n```"}
{"prompt":"What kind of data does `getDescription` return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst description = await table.getDescription();\nconsole.log(typeof description);\nconsole.log(Array.isArray(description));\nawait sdb.done();\n```"}
{"prompt":"How do I compute proportions for a column named 'sales' and store them in 'sales_perc'?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute and store proportions\nawait table.proportionsVertical('sales', 'sales_perc');\nawait sdb.done();\n```"}
{"prompt":"How can I ensure all small multiples share the same y-axis scale in a dot chart?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Share the same y-axis scale across all small multiples\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  fixedScales: true\n});\nawait sdb.done();\n```"}
{"prompt":"Is it possible to filter data using comparison operators like >, <, >=, <=?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use comparison operators in conditions\nconst filteredData = await table.getData({ conditions: 'price > 10 && price <= 50' });\nconsole.log(filteredData);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I provide a column name that doesn't exist in the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsHorizontal(['NonExistentColumn']);\nawait sdb.done();\n```\n// The method will likely throw an error or ignore the non-existent column. It's best to ensure the column names are valid."}
{"prompt":"If two rows have the same value in the column used for ranking, what rank will they receive?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.ranks(\"score\", \"rank\"); // Rows with the same score will receive the same rank, and the next rank will be skipped.\nawait sdb.done();\n```"}
{"prompt":"How do I set fixed scales for small multiples in a dot chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: 10, category: 'A' },\n  { date: new Date('2023-02-01'), value: 20, category: 'A' },\n  { date: new Date('2023-01-01'), value: 15, category: 'B' },\n  { date: new Date('2023-02-01'), value: 25, category: 'B' },\n];\nawait table.loadArray(data);\nawait table.logDotChart('date', 'value', {\n  smallMultiples: 'category',\n  fixedScales: true\n});\nawait sdb.done();\n```"}
{"prompt":"What if I want to get all rows from a certain point at the bottom?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all rows from the last 20 rows where 'status' is 'completed'\nconst bottom20Completed = await table.getBottom(20, {\n  conditions: `status === 'completed'`,\n});\nconsole.log(bottom20Completed);\n\nawait sdb.done();\n```"}
{"prompt":"Can I use mathematical operations in the update expression?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add 10 to each value in 'score' column\nawait table.updateColumn('score', `score + 10`);\nawait sdb.done();\n```"}
{"prompt":"How do I handle missing values when accumulating?","completion":"```ts\n// Missing values will be treated as zero in the accumulation.\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.sort({ date: 'asc' });\nawait table.accumulate('sales', 'cumulativeSales');\n// Missing sales values will be treated as zero\nawait sdb.done();\n```"}
{"prompt":"Can I skip rows after I've already performed other operations on the table, like filtering?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.filter({ column: \"value\", operator: \"greater\", value: 10 });\nawait table.skip(2);\nawait sdb.done();\n```\n// Yes, you can skip rows after other operations. The skip method operates on the current state of the table."}
{"prompt":"How do I add a boolean column based on a condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a boolean column 'isAdult' where age is greater than or equal to 18\nawait table.addColumn('isAdult', 'boolean', 'age >= 18');\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with a specific name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst customers = sdb.newTable(\"customers\");\n// A table named 'customers' will be created.\nawait sdb.done();\n```"}
{"prompt":"Can I combine filtering and column selection when cloning a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"path/to/your/data.csv\");\n\nconst tableB = await tableA.cloneTable({\n  outputTable: \"filtered_data\",\n  conditions: `status = 'active' AND created_date >= '2023-01-01'`,\n  columns: [\"name\", \"status\", \"created_date\"],\n});\n\nawait sdb.done();\n```"}
{"prompt":"What data type should the `newColumn` be to store the boolean results?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The newColumn will store boolean values (TRUE or FALSE).\n// SimpleDB will automatically handle the data type.\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get the extent of a column that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// This will likely throw an error if the column 'nonexistent_column' doesn't exist.\n// You should handle this with a try-catch block in a production environment.\nconst nonexistentExtent = await table.getExtent(\"nonexistent_column\");\nconsole.log(nonexistentExtent);\nawait sdb.done();\n```"}
{"prompt":"What if my geometry column isn't named 'geometry'? How do I specify it?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.isClosedGeo(\"boundaryClosed\", { column: \"boundaryGeom\" });\nawait sdb.done();\n```"}
{"prompt":"How do I handle logging extents for multiple tables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Create and load first table\nconst table1 = sdb.newTable('table1');\nawait table1.loadData('path/to/data1.csv');\n// Create and load second table\nconst table2 = sdb.newTable('table2');\nawait table2.loadData('path/to/data2.csv');\n// Log extents for both tables\nawait table1.logExtent('column1');\nawait table2.logExtent('column2');\nawait sdb.done();\n```"}
{"prompt":"How do I add a column with the row number to my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column named 'rowNumber' with the row number for each row\nawait table.addRowNumber(\"rowNumber\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I convert a column from string to boolean?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'is_active' column to boolean type\nawait table.convert({ is_active: 'boolean' });\n\nawait sdb.done();\n```"}
{"prompt":"Can I customize the appearance of the chart using CSS with `writeChart`?","completion":"```ts\nimport { dot, plot } from '@observablehq/plot';\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: 'year', y: 'value' }),\n    ],\n  });\n\nconst outputPath = 'output/chart.png';\nconst style = 'background-color: lightblue;';\n\nawait table.writeChart(chartFunction, outputPath, { style });\nawait sdb.done();\n```"}
{"prompt":"How can I compute cumulative sums within specific categories, like by customer ID?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/orders.csv\");\n// Ensure the table is sorted by 'customer_id' and 'order_date' before accumulation\nawait table.sort({ customer_id: \"asc\", order_date: \"asc\" });\n// Compute cumulative sum of 'orders' within 'customer_id' categories\nawait table.accumulate(\"orders\", \"cumulativeOrders\", { categories: \"customer_id\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I handle missing columns when inserting data from multiple tables?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\nconst tableC = sdb.newTable();\nawait tableB.loadData(\"data/tableB.csv\");\nawait tableC.loadData(\"data/tableC.csv\");\n// Insert with column unification to handle missing columns\nawait tableA.insertTables([\"tableB\", \"tableC\"], { unifyColumns: true });\nawait sdb.done();\n```"}
{"prompt":"How can I replace NULL values in multiple columns with a string value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Replace NULL values in 'email' and 'phone' columns with 'N/A'\nawait table.replaceNulls([\"email\", \"phone\"], \"N/A\");\nawait sdb.done();\n```"}
{"prompt":"I have a column named 'revenue' and I want to divide it into deciles. How do I do that and store the results in a column called 'revenueDecile'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.quantiles(\"revenue\", 10, \"revenueDecile\");\nawait sdb.done();\n```"}
{"prompt":"What does the `raw` option do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  raw: true\n});\nawait sdb.done();\n```\n// The `raw` option prevents Google Sheets from attempting to guess the data type and formatting the values."}
{"prompt":"How do I get the data types of all columns in a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the data types of all columns\nconst dataTypes = await table.getTypes();\nconsole.log(dataTypes);\n\nawait sdb.done();\n```"}
{"prompt":"How can I handle cases where `getRow` returns undefined?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row with noCheck set to true and handle undefined\nconst flexibleRow = await table.getRow(`status = 'pending'`, { noCheck: true });\nif (flexibleRow) {\n  console.log(flexibleRow);\n} else {\n  console.log('No matching row found');\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I replace NULL values in multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Replace NULL values in 'columnA' and 'columnB' with the string \"N/A\"\nawait table.replaceNulls(['columnA', 'columnB'], 'N/A');\nawait sdb.done();\n```"}
{"prompt":"How do I keep multiple values in a single column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows where 'job' is 'accountant' or 'developer'\nawait table.keep({ job: ['accountant', 'developer'] });\nawait sdb.done();\n```"}
{"prompt":"Can I use logProjections() to debug my geospatial data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use logProjections() to debug geospatial data\nawait table.logProjections();\nawait sdb.done();\n```"}
{"prompt":"How can I reduce the precision of geometries in a specific column named 'geometry' to 2 decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Reduce the precision of geometries in the 'geometry' column to 2 decimal places\nawait table.reducePrecision(2, { column: \"geometry\" });\nawait sdb.done();\n```"}
{"prompt":"How do I specify the data type of columns when loading data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv', {\n  columnTypes: {\n    'id': 'number',\n    'name': 'string'\n  }\n});\nawait sdb.done();\n```"}
{"prompt":"Is there a limit to the number of tables I can create?","completion":"The documentation does not specify a limit, so you can create as many tables as needed."}
{"prompt":"How do I remove the intersection of two geometry columns and store the result in a new column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove the intersection of 'geomB' from 'geomA' and store in 'geomResult'\nawait table.removeIntersection('geomA', 'geomB', 'geomResult');\nawait sdb.done();\n```"}
{"prompt":"Can I remove rows with missing values in a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeMissing({ columns: \"columnName\" });\nawait sdb.done();\n```"}
{"prompt":"How do I use the `cache` method to store the results of loading and summarizing data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate correlations between all numeric columns in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.correlations();\nawait sdb.done();\n```"}
{"prompt":"How can I format the y-axis values in a dot chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n];\nawait table.loadArray(data);\nawait table.logDotChart('date', 'value', {\n  formatY: (d) => `$${d}`\n});\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the perimeter of polygons in kilometers and store it in a new column named 'perimeter_km'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.perimeter(\"perimeter_km\", { unit: \"km\" });\nawait sdb.done();\n```"}
{"prompt":"How can I handle conversion errors by replacing invalid values with NULL?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'value' to float, replacing invalid values with NULL\nawait table.convert({ value: 'float' }, { try: true });\n\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the skewness of a numeric column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the skewness of a numeric column\nconst skewness = await table.getSkew('numericColumn');\nconsole.log('Skewness:', skewness);\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the minimum date from a date column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get minimum date from a date column\nconst minDate = await table.getMin('date_column');\nconsole.log(`Earliest date: ${minDate}`);\n\nawait sdb.done();```"}
{"prompt":"How do I compute the area of geometries in square meters using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute area in square meters and store in 'area_m2'\nawait table.area('area_m2');\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a column name when calling flipCoordinates?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Flip coordinates in the default geometry column\nawait table.flipCoordinates();\nawait sdb.done();\n```"}
{"prompt":"How do I sort a single column, 'name', in ascending order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sort({ name: \"asc\" });\nawait sdb.done();\n```"}
{"prompt":"How do I write data from a SimpleTable to a file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myData');\nawait table.loadData('path/to/data.csv');\n// Write data to a parquet file\nawait table.writeData('output.parquet');\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the unique values from a column named 'country'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst uniqueCountries = await table.getUniques(\"country\");\nconsole.log(uniqueCountries);\nawait sdb.done();\n```"}
{"prompt":"Can I use the `points` method if my data doesn't have latitude and longitude columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// You need to have latitude and longitude columns in your data.\n// This example will not work without them.\n// await table.loadData(\"path/to/your/data.csv\");\n// await table.points(\"lat\", \"lon\", \"geom\");\nawait sdb.done();\n```"}
{"prompt":"How do I execute a custom SQL query without returning data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.customQuery(\n  'CREATE TABLE young_employees AS SELECT * FROM employees WHERE age > 30'\n);\nawait sdb.done();\n```"}
{"prompt":"How do I compute the centroid of geometries in my table and store the results in a new column named 'center'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.centroid(\"center\");\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `unit` option, what unit will the perimeter be calculated in?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// The default unit is meters ('m').\nawait table.perimeter(\"perimeter_m\");\nawait sdb.done();\n```"}
{"prompt":"How can I enable verbose logging for debugging?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n\nconst similarResults = await table.aiVectorSimilarity(\n  \"your search query\",\n  \"your embeddings column\",\n  5, // Number of results\n  {\n    verbose: true, // Enable verbose logging\n  },\n);\n\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I compute the length of line geometries in kilometers and store it in a new column named 'length_km'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.length(\"length_km\", { unit: \"km\" });\nawait sdb.done();\n```"}
{"prompt":"How do I compute the correlation between two specific columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute correlation between 'column1' and 'column2'\nawait table.correlations({ x: 'column1', y: 'column2' });\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join between two tables, overwriting the original table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\n\nawait tableA.crossJoin(tableB);\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use the `union` method with columns that don't have the same projection?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// This will likely result in an error or unexpected behavior, as the documentation\n// specifies that both columns must have the same projection.\n// The exact error message will depend on the underlying geometry library.\n// await table.union(\"geometry_column_1\", \"geometry_column_2\", \"combined_geometry\");\n\nawait sdb.done();\n```"}
{"prompt":"What is the difference between `newTable` and `createTable` in SimpleDB?","completion":"Both methods are used to create a new table. The code example shows `newTable`, which is the correct method to use.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait sdb.done();\n```"}
{"prompt":"How can I compute vertical proportions within specific categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute proportions for 'column1' within 'column2' categories\nawait table.proportionsVertical('column1', 'perc', {\n  categories: 'column2'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I replace NULL values in a single column with a specific value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Replace NULL values in 'column1' with 0\nawait table.replaceNulls('column1', 0);\nawait sdb.done();\n```"}
{"prompt":"How do I trim from the left side of a column named 'code'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.trim(\"code\", { method: \"leftTrim\" });\nawait sdb.done();\n```"}
{"prompt":"How would I handle a potential error if the `getSum` method fails?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\ntry {\n  const totalValue = await table.getSum(\"value\");\n  console.log(\"Total value:\", totalValue);\n} catch (error) {\n  console.error(\"An error occurred while calculating the sum:\", error);\n}\nawait sdb.done();\n```"}
{"prompt":"Is it possible to add metadata when writing a GeoJSON file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Write GeoJSON with metadata\nawait table.writeGeoData('./output.geojson', {\n  metadata: { source: 'SimpleDataAnalysis' }\n});\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate geometries using the default union method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Aggregate geometries using the default union method\nawait table.aggregateGeo('union');\nawait sdb.done();\n```"}
{"prompt":"Can I use more complex JavaScript conditions with the `conditions` option?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logTable({ conditions: `value > 5 && category === 'A'` });\nawait sdb.done();\n```"}
{"prompt":"If I don't need the query results, can I omit the `returnDataFrom` option?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.customQuery(\n  \"UPDATE my_table SET column1 = 'new_value' WHERE condition = true\",\n);\nawait sdb.done();\n```"}
{"prompt":"How do I fill holes in the default geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill holes in the default geometry column\nawait table.fillHoles();\nawait sdb.done();\n```"}
{"prompt":"How do I write the current state of the database to a DuckDB file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Do your magic here!\nawait sdb.writeDB('./my_exported_database.db');\nawait sdb.done();\n```"}
{"prompt":"How do I extract the first three characters from a string column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract the first three characters from the 'description' column\nawait table.left('description', 3);\nawait sdb.done();\n```"}
{"prompt":"How can I filter data using a SQL WHERE clause in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Filter data using a SQL WHERE clause\nconst filteredData = await table.getData({ conditions: 'category = \"Book\"' });\nconsole.log(filteredData);\n\nawait sdb.done();\n```"}
{"prompt":"How do I compute a rolling maximum with rounding?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling maximum of 'temperature' rounded to 1 decimal place\nawait table.rolling('temperature', 'rollingMaxTemp', 'max', 2, 2, {\n  decimals: 1\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I compute a rolling sum within specific categories, such as by customer ID?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/transactions.csv\");\n// Compute a rolling sum of 'transactions' within 'customer_id' categories\nawait table.rolling(\"transactions\", \"rollingSumTransactions\", \"sum\", 5, 0, {\n  categories: \"customer_id\",\n});\nawait sdb.done();\n```"}
{"prompt":"I have a geometry column named 'country'. How can I add a new geometry column that contains the centroid of each country?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"country\")`, {\n  projection: table.projections.country,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I rename a single column in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.renameColumns({ \"oldColumnName\": \"newColumnName\" });\nawait sdb.done();\n```"}
{"prompt":"Does `removeColumns` modify the original table in place?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove the 'tempColumn' column\nawait table.removeColumns(\"tempColumn\");\n\n// The table is modified in place. No new table is created.\n\nawait sdb.done();\n```"}
{"prompt":"How do I use Ollama with aiVectorSimilarity?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use Ollama for similarity search\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    ollama: true,\n    model: 'all-minilm' // Ensure this model is available in your Ollama setup\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"What data types are supported by the `setTypes` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Supported types:\n// \"integer\", \"float\", \"number\", \"string\", \"date\", \"time\", \"datetime\",\n// \"datetimeTz\", \"bigint\", \"double\", \"varchar\", \"timestamp\",\n// \"timestamp with time zone\", \"boolean\", \"geometry\"\n\nawait table.setTypes({\n  myColumn: \"integer\"\n});\nawait sdb.done();\n```"}
{"prompt":"What type of data does `unnestGeo` expect in the specified column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.unnestGeo(\"geometryColumn\"); // Expects a column containing multi-part geometries.\nawait sdb.done();\n```"}
{"prompt":"How can I prevent metadata from being written alongside the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Disable metadata creation\nawait sdb.writeDB('./my_exported_database.db', { noMetaData: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if I provide an empty object to renameColumns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Providing an empty object will result in no changes to column names\nawait table.renameColumns({});\nawait sdb.done();\n```"}
{"prompt":"How can I compute the perimeter of polygon geometries in kilometers?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute perimeter in kilometers and store in 'perimeter_km'\nawait table.perimeter('perimeter_km', { unit: 'km' });\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior of getGeoData regarding coordinate order?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// By default, coordinates are flipped to [longitude, latitude] if the projection is WGS84 or EPSG:4326\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\n\nawait sdb.done();\n```"}
{"prompt":"How do I trim a specific character from the beginning of a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Left-trim leading 'X' characters from 'code'\nawait table.trim('code', { character: 'X', method: 'leftTrim' });\nawait sdb.done();\n```"}
{"prompt":"What data type will the new column have after using isClosedGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The new column will be a boolean type (TRUE/FALSE)\nawait table.isClosedGeo('isClosed');\nawait sdb.done();\n```"}
{"prompt":"How do I enable DuckDB's external file cache?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB({ duckDbCache: true });\n\n// Continue with database operations\nawait sdb.done();\n```"}
{"prompt":"Can I specify projections when creating a new table? If so, how?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst locations = sdb.newTable(\"locations\", {\n  latitude: \"EPSG:4326\",\n  longitude: \"EPSG:4326\",\n});\n// This creates a table named 'locations' with specified projections for latitude and longitude.\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the skewness of a numeric column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst skew = await table.getSkew(\"numericColumn\");\nconsole.log(skew);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide any conditions to getData?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// If no conditions are provided, all data is returned\nconst allData = await table.getData();\nconsole.log(allData);\n\nawait sdb.done();\n```"}
{"prompt":"How can I specify the encoding of the files being loaded?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadDataFromDirectory(\"./my_data_directory\", { encoding: \"utf-16\" });\nawait sdb.done();\n```"}
{"prompt":"How do I sort data in a SimpleTable based on a specific column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myData');\nawait table.loadData('path/to/data.csv');\n// Sort the table by a column in descending order\nawait table.sort({ amount: 'desc' });\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the variance of a numeric column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the variance of a numeric column\nconst variance = await table.getVar('numericColumn');\nconsole.log(variance);\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the last 5 rows of a table in reverse order (last row first)?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst bottom5 = await table.getBottom(5);\nconsole.log(bottom5);\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows based on conditions in multiple columns simultaneously?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Remove rows where 'job' is 'accountant' or 'developer', AND 'city' is 'Montreal'\nawait table.remove({ job: [\"accountant\", \"developer\"], city: \"Montreal\" });\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to insert a row with a column that doesn't exist?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst rowWithExtraColumn = [{ letter: \"e\", number: 5, extra: \"value\" }];\n// The documentation doesn't specify the behavior. It's likely the extra column will be ignored or cause an error.\nawait table.insertRows(rowWithExtraColumn);\nawait sdb.done();\n```"}
{"prompt":"How do I replace a specific string in a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.replace(\"myColumn\", { \"oldValue\": \"newValue\" });\nawait sdb.done();\n```"}
{"prompt":"How do I convert a datetime with timezone information to a string?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'datetimeTzColumn' to string with timezone format\nawait table.convert({ datetimeTzColumn: 'string' }, { datetimeFormat: '%Y-%m-%d %H:%M:%S%Z' });\n\nawait sdb.done();\n```"}
{"prompt":"How do I generate a basic histogram for a column named 'sales'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logHistogram(\"sales\");\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where geometries do not intersect?","completion":"```ts\n// The result column 'doIntersect' will be FALSE for non-intersecting geometries.\n// You can filter these out or keep them as needed.\nawait table.intersect('geomA', 'geomB', 'doIntersect');\n```"}
{"prompt":"What happens if I don't provide a separator? Is there a default?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Concatenate 'street' and 'number' into 'address' with no separator\nawait table.concatenate(['street', 'number'], 'address'); // Uses an empty string as separator by default\n\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve a list of all the table names in my SimpleDB database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An array of table names\nawait sdb.done();\n```"}
{"prompt":"How do I store centroids in a new column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Store centroids in 'centerPoint' column\nawait table.centroid('centerPoint');\nawait sdb.done();\n```"}
{"prompt":"If I don't provide any options to `logColumns`, what will happen?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logColumns(); // Logs only column names\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table without specifying a name in SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst dataTable = sdb.newTable();\nawait sdb.done();\n```"}
{"prompt":"How do I set a timestamp with time zone data type?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  event_time: 'timestamp with time zone'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I specify the precision of coordinates when writing to GeoJSON?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Write GeoJSON with specific precision\nawait table.writeGeoData('./output_high_precision.geojson', {\n  precision: 6\n});\nawait sdb.done();\n```"}
{"prompt":"How do I log the data types of all columns in a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the data types of all columns in the table\nawait table.logTypes();\nawait sdb.done();\n```"}
{"prompt":"How can I specify a custom output table name when joining two tables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a left join and store results in 'joinedTable'\nconst joinedTable = await tableA.join(tableB, {\n  outputTable: 'joinedTable',\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I chain getMedian with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate median after filtering data\nawait table.filterRows({ column: 'category', value: 'A' });\nconst medianFiltered = await table.getMedian('numericColumn');\nconsole.log('Median after filter:', medianFiltered);\n\nawait sdb.done();\n```"}
{"prompt":"How do I round multiple columns to 1 decimal place using the ceiling method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Round 'columnA' and 'columnB' to 1 decimal place using ceiling method\nawait table.round(['columnA', 'columnB'], { decimals: 1, method: 'ceiling' });\nawait sdb.done();\n```"}
{"prompt":"Can I use Haversine or Spheroid methods for distance calculations in `joinGeo`?","completion":"Yes, you can specify the distance method as `haversine` or `spheroid`. Here's an example using Haversine with kilometers:"}
{"prompt":"What if I have columns with numbers in their names?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Example column name: 'Column2'\nawait table.loadData('path/to/your/data.csv');\nawait table.cleanColumnNames(); // Column name remains 'column2'\nawait sdb.done();\n```"}
{"prompt":"How do I write the table's data to a CSV file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.writeData('./output.csv');\nawait sdb.done();\n```"}
{"prompt":"Can I assign quantiles based on multiple category columns? For example, 'region' and 'year'.","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.quantiles(\"value\", 5, \"valueQuantile\", { categories: [\"region\", \"year\"] });\nawait sdb.done();\n```"}
{"prompt":"My geometries are stored in a column named 'shape'. How do I compute the centroid using that column and store the results in a column named 'center_point'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.centroid(\"center_point\", { column: \"shape\" });\nawait sdb.done();\n```"}
{"prompt":"How do I get the first row of a table without any filtering?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior of getSkew if no options are provided?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Default behavior: no rounding\nconst defaultSkewness = await table.getSkew('numericColumn');\nconsole.log('Default Skewness:', defaultSkewness);\n\nawait sdb.done();\n```"}
{"prompt":"How do I round the computed proportions to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Round proportions to 2 decimal places\nawait table.proportionsHorizontal(['Men', 'Women', 'NonBinary'], {\n  decimals: 2\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I clone a column into a new column with the same name as another existing column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will overwrite the existing 'newColumn' if it exists\nawait table.cloneColumn('originalColumn', 'newColumn');\nawait sdb.done();\n```"}
{"prompt":"Is it possible to filter based on date values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Filter rows where 'lastPurchaseDate' is on or after '2023-01-01'\nawait table.filter(`lastPurchaseDate >= '2023-01-01'`);\nawait sdb.done();\n```"}
{"prompt":"How can I replace multiple strings in multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Replace \"kilograms\" with \"kg\" and \"liters\" with \"l\" in 'column1' and 'column2'\nawait table.replace([\"column1\", \"column2\"], {\n  \"kilograms\": \"kg\",\n  \"liters\": \"l\",\n});\nawait sdb.done();\n```"}
{"prompt":"Can I convert multiple columns to uppercase at the same time?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert multiple columns to uppercase\nawait table.upper(['column1', 'column2']);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column when calling reducePrecision?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method will automatically find the geometry column and reduce precision to 4 decimal places\nawait table.reducePrecision(4);\nawait sdb.done();\n```"}
{"prompt":"Can I mix table names and SimpleTable instances when removing multiple tables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst employeesTable = sdb.newTable('employees');\nawait sdb.removeTables(['customers', employeesTable]);\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to clone a column that doesn't exist in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will throw an error if 'nonExistentColumn' doesn't exist\nawait table.cloneColumn('nonExistentColumn', 'newColumn');\nawait sdb.done();\n```"}
{"prompt":"How do I use the `cleanColumnNames` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.cleanColumnNames();\nawait sdb.done();\n```"}
{"prompt":"How can I convert a column from string to date using a specific format?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'dateStr' to date using format 'YYYY-MM-DD'\nawait table.convert({ dateStr: 'date' }, { datetimeFormat: '%Y-%m-%d' });\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use `removeIntersection` with columns that have different projections?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// This will likely result in an error or unexpected behavior, as the documentation states\n// that both columns must have the same projection.\n// The following line is for demonstration purposes only and should not be executed\n// if the columns have different projections.\n// await table.removeIntersection(\"geometryA\", \"geometryB\", \"geometryA_diff\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I get the data types of each column using getDescription?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get and log the data types of each column\nconst description = await table.getDescription();\nconsole.log('Data Types:', description.map(col => ({\n  columnName: col.name,\n  dataType: col.type\n}));\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the variance without rounding?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// By default, getVar does not round the result\nconst variance = await table.getVar('numericColumn');\nconsole.log(variance);\n\nawait sdb.done();\n```"}
{"prompt":"What if the objects in my array have different properties?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Array with inconsistent object properties\nconst data = [\n  { letter: 'a', number: 1 },\n  { letter: 'b' }, // Missing 'number' property\n];\nawait table.loadArray(data);\n\nawait sdb.done();"}
{"prompt":"Is there a way to check the row count before and after data processing?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check row count before processing\nconst nbRowsBefore = await table.getNbRows();\nconsole.log(`Rows before processing: ${nbRowsBefore}`);\n// Perform some data operations here...\n// Check row count after processing\nconst nbRowsAfter = await table.getNbRows();\nconsole.log(`Rows after processing: ${nbRowsAfter}`);\nawait sdb.done();\n```"}
{"prompt":"Can I apply outlier detection to multiple columns at once?","completion":"No, the method is designed for a single column at a time. You would need to call it separately for each column."}
{"prompt":"Is it possible to clone a column with an offset of zero?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.cloneColumnWithOffset('value', 'same_value', { offset: 0 });\n// Creates a copy of the column without any offset\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the column names from my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst columns = await table.getColumns();\nconsole.log(columns); // This will print an array of column names\nawait sdb.done();\n```"}
{"prompt":"How can I check the result of a concatenate operation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// After concatenating, you can log the table to see the new column\nawait table.concatenate(['firstName', 'lastName'], 'fullName');\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I write the data from a SimpleTable to a CSV file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.writeData(\"./output.csv\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to select a column that doesn't exist in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Attempting to select a non-existent column will result in an error\ntry {\n  await table.selectColumns(['nonExistentColumn']);\n} catch (error) {\n  console.error('Error:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"How can I load data from a CSV file into a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait sdb.done();\n```"}
{"prompt":"How do I load a shapefile and specify both the original projection and reproject it to WGS84?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.shp.zip', { from: 'EPSG:3857', toWGS84: true });\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"How do I handle the file path when writing the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Provide an absolute or relative path to the output file\nawait sdb.writeDB('./my_exported_database.db');\nawait sdb.done();\n```"}
{"prompt":"Can I log column types along with the data when using logTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logTable({ nbRowsToLog: 10, types: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to getMax on a non-existent column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempting to get max on a non-existent column will throw an error\ntry {\n  const maxValue = await table.getMax('non_existent_column');\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();```"}
{"prompt":"Can I chain reducePrecision with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Yes, you can chain operations\nawait table.reducePrecision(3).then(() => {\n  // Do more operations here\n});\nawait sdb.done();\n```"}
{"prompt":"How can I add multiple layers to my map?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [\n      geo(geoJsonData, { fill: 'lightblue', stroke: 'black' }),\n      geo(geoJsonData, { fill: null, stroke: 'red', strokeWidth: 2 })\n    ]\n  });\n};\n\nawait table.writeMap(mapFunction, './output/multi_layer_map.png');\nawait sdb.done();\n```"}
{"prompt":"How do I specify the table name for debugging when executing a custom query?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.customQuery(\n  'SELECT * FROM employees',\n  { table: 'employees' }\n);\nawait sdb.done();\n```"}
{"prompt":"I have a column named 'shape' containing polygon geometries. How do I fill the holes in those geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fillHoles(\"shape\");\nawait sdb.done();\n```"}
{"prompt":"If I want to find the 25th percentile of a column named 'test_score', do I need to specify any options?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst firstQuartile = await table.getQuantile(\"test_score\", 0.25);\nconsole.log(firstQuartile);\nawait sdb.done();\n```"}
{"prompt":"How do I set the number of rows to display when logging a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  nbRowsToLog: 15\n});\n// Will log 15 rows by default.\nawait sdb.done();\n```"}
{"prompt":"How do I load data from a single CSV file into a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\nawait sdb.done();\n```"}
{"prompt":"How do I write my table data to a Google Sheet using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Write data to Google Sheet\nawait table.toSheet('https://docs.google.com/spreadsheets/d/.../edit#gid=0');\nawait sdb.done();\n```"}
{"prompt":"What data type will the `getMax` function return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst maxValue = await table.getMax(\"someColumn\");\nconsole.log(typeof maxValue); // Could be string, number, boolean, Date, or null\nawait sdb.done();\n```"}
{"prompt":"What if I want to check containment in reverse, i.e., if polygons are inside points?","completion":"```ts\n// The inside method checks if geometries in column1 are inside those in column2\n// To reverse the check, simply swap column1 and column2\nawait table.inside('polygonGeom', 'pointColumn', 'isInsidePoint');\n```"}
{"prompt":"What happens if I try to replace NULL values in a column that doesn't exist?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will attempt to replace NULL values in a non-existent column\nawait table.replaceNulls('nonExistentColumn', 'value'); // No error is thrown, but no changes are made\nawait sdb.done();\n```"}
{"prompt":"How do I summarize a single column ('sales') with all available summary operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.summarize({ values: 'sales' });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to know how many rows were skipped?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Skip 5 rows and log the number skipped\nconst nbRowsToSkip = 5;\nconsole.log(`Skipping ${nbRowsToSkip} rows`);\nawait table.skip(nbRowsToSkip);\nawait sdb.done();\n```"}
{"prompt":"How do I get the top 5 rows from a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst top5 = await table.getTop(5);\nconsole.log(top5);\nawait sdb.done();\n```"}
{"prompt":"What is the expected order of coordinates in the new geometry column created by the `points` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.points(\"lat\", \"lon\", \"geom\");\n// The geometries will have [latitude, longitude] axis order.\nawait sdb.done();\n```"}
{"prompt":"Can I use `typeGeo` multiple times to create multiple columns with different geometry types?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column 'geometryType1'\nawait table.typeGeo(\"geometryType1\");\n\n// Add another new column 'geometryType2'\nawait table.typeGeo(\"geometryType2\", { column: \"anotherGeomColumn\" });\n\nawait sdb.done();\n```"}
{"prompt":"Can I load an array of objects with special characters in property names?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Array with special characters in property names\nconst data = [\n  { 'first name': 'Alice', age: 30 },\n  { 'last name': 'Smith', age: 25 },\n];\nawait table.loadArray(data);\n\nawait sdb.done();"}
{"prompt":"Can I select multiple tables by passing an array of `SimpleTable` instances?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable(\"table1\");\nconst table2 = sdb.newTable(\"table2\");\n// ... load data into tables ...\nawait sdb.selectTables([table1, table2]);\nawait sdb.done();\n```"}
{"prompt":"Can I specify different column names for latitude and longitude?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Extract latitude and longitude into 'my_latitude' and 'my_longitude' columns.\nawait table.latLon(\"geom\", \"my_latitude\", \"my_longitude\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I use getValues to retrieve values from multiple columns at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get values from multiple columns by calling getValues for each column\nconst productNames = await table.getValues('productName');\nconst prices = await table.getValues('price');\nconsole.log(productNames); // e.g., ['Laptop', 'Mouse', 'Keyboard']\nconsole.log(prices); // e.g., [499.99, 29.99, 19.99]\n\nawait sdb.done();```"}
{"prompt":"How do I convert multiple columns to different types in one operation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'price' to float, 'quantity' to integer, and 'name' to string\nawait table.convert({\n  price: \"float\",\n  quantity: \"integer\",\n  name: \"string\",\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"I've created a `SimpleTable` instance called `products`. How can I use this instance to select only that table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst productsTable = sdb.newTable(\"products\");\n// ... load data into productsTable ...\nawait sdb.selectTables(productsTable);\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve a single row from the table using `getRow` with SQL syntax?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row where 'name' is 'John'\nconst johnsRow = await table.getRow(`name = 'John'`);\nconsole.log(johnsRow);\n\nawait sdb.done();\n```"}
{"prompt":"Can I specify which geometry column to use when counting vertices?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Count vertices in a specific geometry column 'myGeometry'\nawait table.nbVertices('vertexCount', { column: 'myGeometry' });\nawait sdb.done();\n```"}
{"prompt":"Can I calculate the perimeter without specifying the geometry column if it's the only geometry column in the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// If there's only one geometry column, the method will automatically detect it.\nawait table.perimeter(\"perimeter_m\");\nawait sdb.done();\n```"}
{"prompt":"How do I get the minimum value from a specific column in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the minimum value from a specific column\nconst minValue = await table.getMin('column_name');\nconsole.log(`The minimum value is: ${minValue}`);\n\nawait sdb.done();```"}
{"prompt":"How does `longer` affect the original columns that were stacked?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Original columns are removed after stacking\nawait table.longer(['2021', '2022', '2023'], 'year', 'employees'); // Columns 2021, 2022, 2023 are no longer present\n\nawait sdb.done();\n```"}
{"prompt":"What if my geometry column has a different name than the default? How do I specify it?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Reduce the precision of geometries in the 'myGeom' column to 2 decimal places\nawait table.reducePrecision(2, { column: \"myGeom\" });\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to check for the presence of a column in a case-sensitive manner?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check for exact column name match\nconst hasExactColumn = await table.hasColumn('Name');\nconsole.log('Does the table have an exact case-sensitive column?', hasExactColumn);\n\nawait sdb.done();\n```"}
{"prompt":"How do I replace `NULL` values in a single column with a number?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.replaceNulls(\"myColumn\", 0);\nawait sdb.done();\n```"}
{"prompt":"How do I select multiple tables by name in SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.selectTables(['customers', 'products']); // Selects both 'customers' and 'products' tables\nawait sdb.done();\n```"}
{"prompt":"How do I specify the data to load if I have an array of objects?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst myData = [\n  { product: \"apple\", price: 1.0 },\n  { product: \"banana\", price: 0.5 },\n];\n\nawait table.loadArray(myData);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to visualize the intersecting geometries?","completion":"```ts\n// After computing intersections, you can export the data for visualization\nawait table.writeData('intersect_results.csv');\n```"}
{"prompt":"How can I create a new table to store the results of the aggregation instead of overwriting the current table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst newTable = await table.aggregateGeo(\"union\", { outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that a specific column exists in my table before performing operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Check for specific column existence\nconst columns = await table.getColumns();\nif (columns.includes('requiredColumn')) {\n  console.log('Required column exists, proceeding...');\n} else {\n  console.error('Missing required column!');\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I select a table using its SimpleTable instance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst employeesTable = sdb.newTable('employees');\nawait sdb.selectTables(employeesTable); // Selects the table using its instance\nawait sdb.done();\n```"}
{"prompt":"Can I cache multiple operations in a single `cache` call?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData('items.csv');\n  await table.filter({ price: { $gt: 100 } });\n  await table.summarize({\n    values: 'price',\n    categories: 'department',\n    summaries: ['sum'],\n  });\n});\n\nawait sdb.done();\n```"}
{"prompt":"Can I set boolean data types using setTypes?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  is_active: 'boolean'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I specify the file type if it's not automatically detected?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load data from a file, explicitly specifying the file type as JSON\nawait table.loadData(\"./data.txt\", { fileType: \"json\" });\n\nawait sdb.done();\n```"}
{"prompt":"If the column I specify in `getMax` doesn't exist, what will happen?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst maxNonExistent = await table.getMax(\"nonExistentColumn\");\nconsole.log(maxNonExistent); // Will likely return null\nawait sdb.done();\n```"}
{"prompt":"How do I save the entire database to a file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Assuming you have already populated the database with tables\nawait sdb.writeDB(\"./my_database.db\");\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a column name, how does `fillHoles` determine which column contains the geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fillHoles(); // The method automatically attempts to find a geometry column.\nawait sdb.done();\n```"}
{"prompt":"How do I specify a different column for geometries when computing the area?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute area using 'myGeom' column and store in 'geom_area'\nawait table.area('geom_area', { column: 'myGeom' });\nawait sdb.done();\n```"}
{"prompt":"How can I create a geometry column using an existing geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a new geometry column 'centroid' using the centroid of an existing 'country' geometry column\nawait table.addColumn('centroid', 'geometry', `ST_Centroid(\"country\")`, {\n  projection: table.projections.country,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows with missing values in a single column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows with missing values in 'specificColumn'\nawait table.removeMissing({ columns: 'specificColumn' });\nawait sdb.done();\n```"}
{"prompt":"How can I specify a different AI model for aiVectorSimilarity?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use a specific model for similarity search\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    model: 'text-embedding-3-small',\n    cache: true\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I remove a single table from the database using its name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// Assuming a table named 'orders' exists\nawait sdb.removeTables(\"orders\");\nawait sdb.done();\n```"}
{"prompt":"How do I convert multiple columns to uppercase?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.upper(['columnA', 'columnB']);\nawait sdb.done();\n```"}
{"prompt":"Can I chain the intersection operation with other operations?","completion":"```ts\n// Yes, you can chain operations. For example, compute intersection and then summarize.\nawait table.intersection('geomA', 'geomB', 'intersect').summarize({\n  values: 'area',\n  categories: 'intersect'\n});\n```"}
{"prompt":"Can I use getMax on a date column to find the most recent date?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Find the most recent date in a column\nconst latestDate = await table.getMax('date_column');\nconsole.log('Latest date:', latestDate);\n\nawait sdb.done();```"}
{"prompt":"How do I get the maximum value from a specific column in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the maximum value from a specific column\nconst maxValue = await table.getMax('column_name');\nconsole.log('Maximum value:', maxValue);\n\nawait sdb.done();```"}
{"prompt":"How do I use the `latLon` method to extract latitude and longitude?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Assuming your geometry column is named 'location'\nawait table.latLon(\"location\", \"latitude\", \"longitude\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I check what types of geometries are in my data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add a column to store geometry types and log the results\nawait table.typeGeo('geometryType');\nawait table.logTable({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"What does the `isValidGeo` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Check if geometries are valid and store results in a new 'isValid' column\nconst result = await table.isValidGeo(\"isValid\");\n\n// The result is undefined, but the method returns a promise that resolves when the validity check is complete.\nconsole.log(result); // Output: undefined\n\nawait sdb.done();\n```"}
{"prompt":"How do I summarize 'sales' by 'region' with specific summary operations (mean and sum)?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.summarize({ values: 'sales', categories: 'region', summaries: ['mean', 'sum'] });\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column to a bigint type using SQL types?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Convert 'id' to bigint (SQL type)\nawait table.convert({ id: \"bigint\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What if I want to keep some columns unchanged while restructuring?","completion":"The `wider` method will automatically keep all other columns as they are. For example, if your table has a column like 'Region', it will remain in the final wide format table.\n```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Restructure the table by pivoting 'Year' into new columns with 'Employees' as values\n// The 'Region' column will remain unchanged\nawait table.wider('Year', 'Employees');\nawait sdb.done();\n```"}
{"prompt":"How do I rank values within specific categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rank 'salary' within each 'department'\nawait table.ranks('salary', 'salaryRank', { categories: 'department' });\nawait sdb.done();\n```"}
{"prompt":"What data types are supported by reducePrecision?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// The method works with geometry columns containing coordinates as numbers\nawait table.reducePrecision(3);\nawait sdb.done();\n```"}
{"prompt":"How can I assign ranks in descending order for a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nawait table.ranks(\"score\", \"descRank\", { order: \"desc\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I select a specific number of random rows from my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sample(50); // Selects 50 random rows\nawait sdb.done();\n```"}
{"prompt":"What does the `ttl` option in the `cache` method do?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// ttl: 60 means the cached data will be refreshed if it's older than 60 seconds.\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n}, { ttl: 60 });\n\nawait sdb.done();\n```"}
{"prompt":"How do I get the number of rows in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logNbRows();\nawait sdb.done();\n```"}
{"prompt":"What does `removeIntersection` return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// removeIntersection returns a Promise that resolves when the geometries have been processed.\nconst promise = await table.removeIntersection(\"geomA\", \"geomB\", \"geomA_minus_geomB\");\n\n// You can await the promise to ensure the operation is complete before proceeding.\nawait promise;\n\nawait sdb.done();\n```"}
{"prompt":"How can I aggregate geometries by multiple categories?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Aggregate geometries by multiple categories 'country' and 'region'\nawait table.aggregateGeo('union', { categories: ['country', 'region'] });\nawait sdb.done();\n```"}
{"prompt":"What happens if a column has only NULL values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.fill(\"myColumn\");\nawait sdb.done();\n```\n//The fill method will not change the column, as there is no previous non-NULL value to use."}
{"prompt":"Can I add a new column to the table using `updateWithJS`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    newColumn: 'someValue',\n  }));\n  return modifiedRows;\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I compute distances and control the number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute distance with 1 decimal place\nawait table.distance('geomA', 'geomB', 'distance_rounded', {\n  decimals: 1\n});\nawait sdb.done();\n```"}
{"prompt":"How do I log the first 15 rows and also include the column types?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logTable({ nbRowsToLog: 15, types: true });\nawait sdb.done();\n```"}
{"prompt":"What is returned by the `logProjections` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\nconst result = await table.logProjections(); // The method returns the SimpleTable instance.\nconsole.log(result === table); // This will print true.\nawait sdb.done();\n```"}
{"prompt":"After loading data, how do I use `logExtent` to find the range of values in a column called 'population'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logExtent(\"population\");\nawait sdb.done();\n```"}