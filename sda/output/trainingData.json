[
  {
    "question": "How do I install the Simple Data Analysis library using Deno?",
    "answer": "Use the following command to add the library to your Deno project:\n```bash\n# Deno installation command\n\nden add jsr:@nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I install the library using Node.js?",
    "answer": "Use the following command to add the library to your Node.js project:\n```bash\n# Node.js installation command\n\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and a SimpleTable?",
    "answer": "Here’s how to create a SimpleDB instance, create a table, and load data:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"path/to/your/data.csv\");\n// Perform analysis here\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I load a CSV file into a table?",
    "answer": "Use the `loadData` method on the table instance to load a CSV file:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// Load the CSV file asynchronously\nawait table.loadData(\"./sales.csv\");\n// You can now work with the loaded data\nawait sdb.done();\n```"
  },
  {
    "question": "How do I close the SimpleDB instance after operations?",
    "answer": "Call `await sdb.done()` to clean up resources after you finish working with the database:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create a table and load data\nconst table = sdb.newTable(\"exampleTable\");\nawait table.loadData(\"./example.csv\");\n// Perform analysis here\n// Close the database instance\nawait sdb.done();\n```"
  },
  {
    "question": "How do I specify a custom table name when creating a SimpleTable?",
    "answer": "Pass the desired table name as an argument to `newTable`:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create a table named \"customTable\"\nconst table = sdb.newTable(\"customTable\");\nawait table.loadData(\"./data.csv\");\nawait sdb.done();\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Deno?",
    "answer": "Use the following command to add the library with Deno:\\n\\n```bash\\ndenod add jsr:@nshiab/simple-data-analysis\\n```"
  },
  {
    "question": "How do I install the library using Node.js?",
    "answer": "Use the following command to add the library with Node.js:\\n\\n```bash\\nnpx jsr add @nshiab/simple-data-analysis\\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and a SimpleTable?",
    "answer": "Create a SimpleDB instance and a SimpleTable as follows:\\n\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"myTable\");\\n// Load data into the table\\nawait table.loadData(\"path/to/your/data.csv\");\\n// Perform operations here\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I load a CSV file into a table?",
    "answer": "Load a CSV file into a table using the loadData method:\\n\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"myTable\");\\n// Load data from the CSV file\\nawait table.loadData(\"path/to/your/data.csv\");\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I specify a custom table name when creating a table?",
    "answer": "Specify a custom table name by passing it to newTable:\\n\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// Create a table with a custom name\\nconst table = sdb.newTable(\"salesData\");\\n// Load data into the table\\nawait table.loadData(\"sales.csv\");\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I properly close the SimpleDB instance after operations?",
    "answer": "Call the done method to close the SimpleDB instance:\\n\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// Create a table and load data\\nconst table = sdb.newTable(\"myTable\");\\nawait table.loadData(\"data.csv\");\\n// Perform analysis here\\n// Close the SimpleDB instance\\nawait sdb.done();\\n```"
  },
  {
    "question": "What is the minimal code to load data and then close the instance?",
    "answer": "The minimal example to load data and close the instance is:\\n\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// Create a table and load data\\nconst table = sdb.newTable(\"myTable\");\\nawait table.loadData(\"path/to/your/data.csv\");\\n// Close the SimpleDB instance\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library with Deno?",
    "answer": "Use the Deno add command:\n```\n# Install the library with Deno\n\nden add jsr:@nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library with Node.js?",
    "answer": "Use the npx jsr add command:\n```\n# Install the library with Node.js\n\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a SimpleDB instance?",
    "answer": "Instantiate the SimpleDB class:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n```"
  },
  {
    "question": "How do I create a SimpleTable?",
    "answer": "Create a table from a SimpleDB instance:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I load data into a SimpleTable?",
    "answer": "Load a CSV file into the table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"path/to/your/data.csv\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I close the SimpleDB instance?",
    "answer": "Call the done method to clean up resources:\n```\nawait sdb.done();\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library with Deno?",
    "answer": "Install the library with Deno using the following command:\n```\nbash\n\ndeno add jsr:@nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I install the library with Node.js?",
    "answer": "Install the library with Node.js using the following command:\n```\nbash\n\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and a SimpleTable?",
    "answer": "Here's how to create a SimpleDB instance and a SimpleTable named 'myTable':\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable('myTable');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I load a CSV file into a SimpleTable?",
    "answer": "Here's how to load a CSV file into the table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable('myTable');\n// We load data from the file\nawait table.loadData('path/to/your/data.csv');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I close the SimpleDB instance after analysis?",
    "answer": "To clean up resources after analysis, call done on the SimpleDB instance:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// ... perform analysis ...\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance that uses an in-memory database?",
    "answer": "Here’s how to create a SimpleDB instance that runs entirely in memory:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a SimpleDB instance that stores data in a file and overwrites it if it already exists?",
    "answer": "You can pass the `file` and `overwrite` options to the constructor:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that writes to a file and overwrites it\nconst sdb = new SimpleDB({\n  file: \"./my-database.duckdb\",\n  overwrite: true,\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable logging of the total execution duration for all queries?",
    "answer": "Set the `logDuration` flag when creating the instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  logDuration: true,\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How can I limit the number of rows shown when logging a table?",
    "answer": "Use the `nbRowsToLog` option to specify how many rows to display:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  nbRowsToLog: 5,\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How do I limit the number of characters shown for text cells when logging?",
    "answer": "Set the `nbCharactersToLog` option to cap the text length:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 50,\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How can I include data types in the table logs?",
    "answer": "Enable the `types` flag to show column data types:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  types: true,\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable verbose cache-related logging?",
    "answer": "Set the `cacheVerbose` option to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  cacheVerbose: true,\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable debugging information in the logs?",
    "answer": "Pass the `debug` flag to the constructor:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  debug: true,\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How do I use DuckDB’s external file cache with SimpleDB?",
    "answer": "Set the `duckDbCache` option to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  duckDbCache: true,\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How can I display a progress bar for long-running operations?",
    "answer": "Enable the `progressBar` flag when creating the instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  progressBar: true,\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance that uses a file and overwrites it if it already exists?",
    "answer": "Create the instance with the `file` and `overwrite` options, then perform operations and close the database.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a file and overwrite flag\nconst sdb = new SimpleDB({\n  file: \"mydatabase.duckdb\",\n  overwrite: true,\n});\n// Create a new table and load data\nconst table = sdb.newTable(\"sales\");\nawait table.loadData(\"./sales.csv\");\n// Log the table to verify\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable logging of the total execution duration and limit the number of rows shown when logging a table?",
    "answer": "Set `logDuration` to true and `nbRowsToLog` to the desired number.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  logDuration: true,\n  nbRowsToLog: 10,\n});\nconst table = sdb.newTable(\"orders\");\nawait table.loadData(\"./orders.csv\");\nawait table.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How do I limit the number of characters displayed for text cells and include data types in the log output?",
    "answer": "Use `nbCharactersToLog` and `types` options.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 50,\n  types: true,\n});\nconst table = sdb.newTable(\"customers\");\nawait table.loadData(\"./customers.csv\");\nawait table.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable verbose cache messages and debugging information?",
    "answer": "Set `cacheVerbose` and `debug` to true.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  cacheVerbose: true,\n  debug: true,\n});\nconst table = sdb.newTable(\"inventory\");\nawait table.loadData(\"./inventory.csv\");\nawait table.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How do I use DuckDB's external file cache and display a progress bar for long-running operations?",
    "answer": "Enable `duckDbCache` and `progressBar` options.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB({\n  duckDbCache: true,\n  progressBar: true,\n});\nconst table = sdb.newTable(\"bigdata\");\nawait table.loadData(\"./bigdata.csv\");\nawait table.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "What is the proper way to close a SimpleDB instance after performing operations?",
    "answer": "Call `await sdb.done()` to cleanly shut down the database.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"temp\");\nawait table.loadData(\"./temp.csv\");\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create an in-memory SimpleDB instance?",
    "answer": "Here’s how to create an in-memory SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance in memory\nconst sdb = new SimpleDB();\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a SimpleDB that writes to a file and overwrites it if it already exists?",
    "answer": "You can specify the file path and set overwrite to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that writes to a file and overwrites it\nconst sdb = new SimpleDB({\n  file: 'my-database.duckdb',\n  overwrite: true\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable logging of the total execution duration?",
    "answer": "Set the logDuration option to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that logs execution duration\nconst sdb = new SimpleDB({\n  logDuration: true\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I set the number of rows displayed when logging a table?",
    "answer": "Use the nbRowsToLog option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that logs only the first 10 rows\nconst sdb = new SimpleDB({\n  nbRowsToLog: 10\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How do I limit the number of characters shown for text-based cells?",
    "answer": "Set nbCharactersToLog to the desired limit:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that truncates text cells to 50 characters\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 50\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I include data types when logging a table?",
    "answer": "Enable the types flag:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that logs data types\nconst sdb = new SimpleDB({\n  types: true\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable verbose cache-related messages?",
    "answer": "Set cacheVerbose to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with verbose cache logging\nconst sdb = new SimpleDB({\n  cacheVerbose: true\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable debugging information?",
    "answer": "Set the debug option to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with debugging enabled\nconst sdb = new SimpleDB({\n  debug: true\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How do I use DuckDB's external file cache?",
    "answer": "Enable duckDbCache:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that uses DuckDB's external cache\nconst sdb = new SimpleDB({\n  duckDbCache: true\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I display a progress bar for long-running operations?",
    "answer": "Set progressBar to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that shows a progress bar\nconst sdb = new SimpleDB({\n  progressBar: true\n});\n// ... perform operations ...\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance that uses an in-memory database?",
    "answer": "Create a SimpleDB instance without passing a file path, which defaults to an in-memory database.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with default in-memory settings\nconst sdb = new SimpleDB();\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I store my database in a file named \"mydb.duckdb\"?",
    "answer": "Pass the `file` option to the constructor to specify a database file.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that writes to mydb.duckdb\nconst sdb = new SimpleDB({ file: \"mydb.duckdb\" });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if the database file already exists and I want to overwrite it?",
    "answer": "Set the `overwrite` flag to true when creating the instance.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Overwrite existing mydb.duckdb if it exists\nconst sdb = new SimpleDB({ file: \"mydb.duckdb\", overwrite: true });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable logging of the total execution duration for all queries?",
    "answer": "Use the `logDuration` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Log total execution duration\nconst sdb = new SimpleDB({ logDuration: true });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "I want to see only the first 10 rows when logging a table. How do I set that?",
    "answer": "Set `nbRowsToLog` to the desired number.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Log only the first 10 rows of any table\nconst sdb = new SimpleDB({ nbRowsToLog: 10 });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I limit the number of characters shown for text cells when logging?",
    "answer": "Use the `nbCharactersToLog` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Show at most 50 characters per text cell\nconst sdb = new SimpleDB({ nbCharactersToLog: 50 });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "Do I get data type information when I log a table?",
    "answer": "Enable the `types` flag to include data types in the log output.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Include data types in table logs\nconst sdb = new SimpleDB({ types: true });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "How can I see detailed cache-related messages during execution?",
    "answer": "Set `cacheVerbose` to true.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Log verbose cache messages\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "I need debugging information while working with SimpleDB. How do I enable it?",
    "answer": "Use the `debug` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Enable debugging logs\nconst sdb = new SimpleDB({ debug: true });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use DuckDB's external file cache with SimpleDB?",
    "answer": "Set the `duckDbCache` flag to true.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Enable DuckDB external file cache\nconst sdb = new SimpleDB({ duckDbCache: true });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "How do I display a progress bar for long-running operations?",
    "answer": "Enable the `progressBar` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Show progress bar for long queries\nconst sdb = new SimpleDB({ progressBar: true });\n// ... perform operations here ...\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table with a default name?",
    "answer": "You can call newTable without arguments to get a table with a default name.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create a table with a specific name?",
    "answer": "Pass a string to newTable to give the table a custom name.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table with a specific name\\nconst employees = sdb.newTable(\"employees\");\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "What happens if I don't provide a name?",
    "answer": "If no name is provided, SimpleDB generates names like 'table1', 'table2', etc.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table with a default name\\nconst table = sdb.newTable();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I provide geospatial projections when creating a table?",
    "answer": "You can pass a projections object mapping column names to projection strings when creating a table.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table with projections for latitude and longitude\\nconst geoTable = sdb.newTable(\"geo\", { latitude: \"EPSG:4326\", longitude: \"EPSG:4326\" });\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "After creating a table, how can I load CSV data into it?",
    "answer": "After creating a table, you can use its methods like loadData to load CSV data.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"sales\");\\n// Load data from a CSV file\\nawait table.loadData(\"./sales.csv\");\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "Can I create multiple tables in the same SimpleDB instance?",
    "answer": "Yes, you can create multiple tables by calling newTable multiple times.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// Create first table\\nconst users = sdb.newTable(\"users\");\\n// Create second table\\nconst orders = sdb.newTable(\"orders\");\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create a table with a default name?",
    "answer": "Use newTable without arguments.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// No additional code needed\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create a table with a custom name?",
    "answer": "Pass a string to newTable to set a custom name.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"employees\");\\n// No additional code needed\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create a table with geospatial projections?",
    "answer": "Provide a projections object mapping column names to projection strings.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"geo\", { \"location\": \"EPSG:4326\" });\\n// No additional code needed\\nawait sdb.done();\\n```"
  },
  {
    "question": "What happens if I omit the name argument?",
    "answer": "If you omit the name, SimpleDB generates a default name like \"table1\".\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// No additional code needed\\nawait sdb.done();\\n```"
  },
  {
    "question": "Can I pass an empty projections object?",
    "answer": "You can pass an empty projections object; the table will have no projections.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"noProj\", {});\\n// No additional code needed\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create a table with a default name?",
    "answer": "Create a table with a default name:\\n\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create a table with a specific name?",
    "answer": "Create a table with a specific name:\\n\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// We create a new table named 'employees'\\nconst table = sdb.newTable('employees');\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create a table with geospatial projections?",
    "answer": "Create a table with geospatial projections:\\n\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// We create a new table with a projection for the 'location' column\\nconst table = sdb.newTable('geo', { location: 'EPSG:4326' });\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create multiple tables sequentially?",
    "answer": "Create multiple tables sequentially:\\n\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// Create first table\\nconst table1 = sdb.newTable('first');\\n// Create second table\\nconst table2 = sdb.newTable('second');\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I create a table without specifying a name?",
    "answer": "Here’s how you can create a table with a default name:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with a default name\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table with a specific name?",
    "answer": "Here’s how you can create a table with a specific name:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table named \"employees\"\nconst employees = sdb.newTable('employees');\n// Load data into the table\nawait employees.loadData('./employees.csv');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table with geospatial projections?",
    "answer": "Here’s how you can create a table with geospatial projections:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table named \"geo\" with a projection mapping\nconst geoTable = sdb.newTable('geo', { location: 'EPSG:4326' });\n// Load geospatial data into the table\nawait geoTable.loadGeoData('./geo.geojson');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create multiple tables and differentiate them?",
    "answer": "Here’s how you can create multiple tables and differentiate them:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two distinct tables\nconst table1 = sdb.newTable('table1');\nconst table2 = sdb.newTable('table2');\n// Load data into each table\nawait table1.loadData('./data1.csv');\nawait table2.loadData('./data2.csv');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve an existing table by name?",
    "answer": "You can use the `getTable` method to fetch a table.\\n\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Retrieve the \"employees\" table\\nconst employees = await sdb.getTable(\"employees\");\\n// Do something with the table, e.g., log its contents\\nawait employees.logTable();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  "",
  {
    "question": "What does the `getTable` method return?",
    "answer": "It returns a Promise that resolves to a `SimpleTable` instance.\\n\\n```ts\\nimport { SimpleDB, SimpleTable } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Retrieve the table and store it in a variable typed as SimpleTable\\nconst table: SimpleTable = await sdb.getTable(\"sales\");\\n// Use the table...\\nawait sdb.done();\\n```"
  },
  "",
  {
    "question": "How can I use the retrieved table to load new data and log it?",
    "answer": "After retrieving the table, you can call its methods like `loadData` and `logTable`.\\n\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Retrieve the \"orders\" table\\nconst orders = await sdb.getTable(\"orders\");\\n// Load new data into the table\\nawait orders.loadData(\"./new-orders.csv\");\\n// Log the updated table\\nawait orders.logTable();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I retrieve an existing SimpleTable instance by name?",
    "answer": "Retrieve a table by calling `getTable` with the table name.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"employees\" table\nconst employees = await sdb.getTable(\"employees\");\n// Use the table (e.g., log its contents)\nawait employees.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if I try to get a table that does not exist?",
    "answer": "`getTable` will reject the promise; you should handle it with try/catch.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\ntry {\n  const nonExistent = await sdb.getTable(\"nonexistent\");\n} catch (err) {\n  console.error(\"Table not found:\", err.message);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "After retrieving a table, how can I perform operations on it?",
    "answer": "Once you have the `SimpleTable` instance, you can call its methods like `logTable` or `summarize`.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst sales = await sdb.getTable(\"sales\");\nawait sales.summarize({\n  values: \"amount\",\n  categories: \"region\",\n  summaries: [\"sum\", \"count\"],\n  decimals: 2,\n});\nawait sales.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "Can I retrieve multiple tables in a single operation?",
    "answer": "You can call `getTable` multiple times sequentially to obtain several tables.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst users = await sdb.getTable(\"users\");\nconst orders = await sdb.getTable(\"orders\");\nawait users.logTable();\nawait orders.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table exists before attempting to retrieve it?",
    "answer": "Attempt to get the table and catch the error if it does not exist.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nlet table;\ntry {\n  table = await sdb.getTable(\"products\");\n} catch {\n  console.log(\"Table 'products' does not exist.\");\n}\nif (table) {\n  await table.logTable();\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve an existing table named \"employees\"?",
    "answer": "You can retrieve a table by calling getTable with the table name.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"employees\" table\nconst employees = await sdb.getTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "After retrieving a table, how can I log its contents?",
    "answer": "Once you have the table instance, you can call its logTable method.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"sales\" table\nconst sales = await sdb.getTable(\"sales\");\n// Log the table contents\nawait sales.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I use getTable with promise chaining instead of async/await?",
    "answer": "You can handle the promise returned by getTable using .then and .finally.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"customers\" table using promise chaining\nsdb.getTable(\"customers\")\n  .then(async (customers) => {\n    // Do something with the table\n    await customers.logTable();\n  })\n  .finally(async () => {\n    // Close the database\n    await sdb.done();\n  });\n```"
  },
  {
    "question": "Can I retrieve a table inside a function and perform operations on it?",
    "answer": "Yes, you can wrap the getTable call inside an async function and then use the table instance.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n\nasync function processTable() {\n  // Retrieve the \"orders\" table\n  const orders = await sdb.getTable(\"orders\");\n  // Perform operations\n  await orders.summarize({\n    values: \"amount\",\n    categories: \"status\",\n    summaries: [\"sum\"],\n    decimals: 2,\n  });\n  // Log results\n  await orders.logTable();\n}\n\n// Call the function\nawait processTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve an existing table named \"employees\" from the database?",
    "answer": "Use the `getTable` method to fetch the table.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"employees\" table\nconst employees = await sdb.getTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I view the contents of a table after retrieving it?",
    "answer": "Call the `logTable` method on the retrieved SimpleTable instance.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"employees\" table\nconst employees = await sdb.getTable(\"employees\");\n// Log the table contents\nawait employees.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I load new CSV data into an existing table after retrieving it?",
    "answer": "Use the `loadData` method on the retrieved SimpleTable instance.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"employees\" table\nconst employees = await sdb.getTable(\"employees\");\n// Load new data into the table\nawait employees.loadData(\"./new-employees.csv\");\n// Log the updated table\nawait employees.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table by name?",
    "answer": "Here's how to remove a single table by name:\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// Remove the table named \"employees\"\\nawait sdb.removeTables(\"employees\");\\n// Close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I remove multiple tables by name?",
    "answer": "Here's how to remove multiple tables by name:\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// Remove tables \"customers\" and \"products\"\\nawait sdb.removeTables([\"customers\", \"products\"]);\\n// Close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I remove a table using a SimpleTable instance?",
    "answer": "Here's how to remove a table using a SimpleTable instance:\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// Create a new table instance\\nconst employeesTable = sdb.newTable(\"employees\");\\n// ... load data or perform operations ...\\n// Remove the table using the instance\\nawait sdb.removeTables(employeesTable);\\n// Close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I remove a single table by its name?",
    "answer": "Here's how to remove a single table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove multiple tables at once?",
    "answer": "Here's how to remove multiple tables by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I remove a table using a SimpleTable instance instead of its name?",
    "answer": "Here's how to remove a table using a SimpleTable instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table instance\nconst employeesTable = sdb.newTable(\"employees\");\n// ... load data or perform operations ...\n// Remove the table using the instance\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table by name?",
    "answer": "You can call removeTables with the table name. Example:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.removeTables(\"employees\");\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove multiple tables at once?",
    "answer": "Pass an array of table names to removeTables. Example:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.removeTables([\"customers\", \"products\"]);\nawait sdb.done();\n```"
  },
  {
    "question": "Can I remove a table using a SimpleTable instance?",
    "answer": "Yes, provide the SimpleTable instance to removeTables. Example:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst employeesTable = sdb.newTable(\"employees\");\nawait employeesTable.loadData(\"./employees.csv\");\nawait sdb.removeTables(employeesTable);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table by its name?",
    "answer": "You can call `removeTables` with the table name as a string.\n\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove multiple tables at once?",
    "answer": "Pass an array of table names to `removeTables`.\n\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I remove a table using a SimpleTable instance?",
    "answer": "Yes, provide the SimpleTable instance to `removeTables`.\n\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table instance\nconst employeesTable = sdb.newTable(\"employees\");\n// ... load data or perform operations if needed ...\n// Remove the table using the instance\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I keep only a single table by its name?",
    "answer": "To keep only the 'employees' table, you can call selectTables with the table name. This will remove all other tables from the database.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We select the 'employees' table, removing all others\nawait sdb.selectTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I keep multiple tables at once?",
    "answer": "To keep multiple tables, pass an array of table names to selectTables.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We select 'customers' and 'products', removing all other tables\nawait sdb.selectTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use a SimpleTable instance with selectTables?",
    "answer": "selectTables also accepts SimpleTable instances. First create the table, load data, then pass the instance.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table instance\nconst employeesTable = sdb.newTable(\"employees\");\n// Load data into the table (example path)\nawait employeesTable.loadData(\"./employees.csv\");\n// Keep only this table\nawait sdb.selectTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a single table by its name using `selectTables`?",
    "answer": "Here’s how to keep only the \"employees\" table and remove all others:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Select a single table by name, removing all other tables\nawait sdb.selectTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I keep multiple tables and drop the rest?",
    "answer": "You can pass an array of table names to keep only those tables:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Select multiple tables by name, removing all other tables\nawait sdb.selectTables([\"customers\", \"products\"]);\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use a `SimpleTable` instance instead of a table name?",
    "answer": "Yes, you can pass a `SimpleTable` instance directly:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst employeesTable = sdb.newTable(\"employees\");\n// ... load data into employeesTable ...\nawait sdb.selectTables(employeesTable);\nawait sdb.done();\n```"
  },
  {
    "question": "What happens to tables that are not listed in the `selectTables` call?",
    "answer": "All tables not specified are removed from the database. For example, if you only keep \"orders\", all other tables are dropped:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.selectTables(\"orders\");\nawait sdb.done();\n```"
  },
  {
    "question": "Is it possible to mix table names and `SimpleTable` instances in the same call?",
    "answer": "Yes, you can mix both types in the array:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst salesTable = sdb.newTable(\"sales\");\nawait sdb.selectTables([\"customers\", salesTable]);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a single table by name?",
    "answer": "Here’s how to select a single table by name:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Select a single table by name, removing all other tables\\nawait sdb.selectTables('employees');\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I select multiple tables by name?",
    "answer": "Here’s how to select multiple tables by name:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Select multiple tables by name, removing all other tables\\nawait sdb.selectTables(['customers', 'products']);\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I select a table using a SimpleTable instance?",
    "answer": "Here’s how to select a table using a SimpleTable instance:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Create a new table instance\\nconst employeesTable = sdb.newTable('employees');\\n// Load data into the table (example)\\nawait employeesTable.loadData('./employees.csv');\\n// Select the table using the instance\\nawait sdb.selectTables(employeesTable);\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "Can I pass a mix of table names and SimpleTable instances to selectTables?",
    "answer": "Here’s how to pass a mix of table names and SimpleTable instances:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Create a table instance\\nconst salesTable = sdb.newTable('sales');\\nawait salesTable.loadData('./sales.csv');\\n// Select a mix of a name and an instance\\nawait sdb.selectTables(['customers', salesTable]);\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "What happens to tables that are not selected?",
    "answer": "After calling selectTables, only the specified tables remain in the database; all others are removed. For example, if you select only the 'employees' table, attempting to access 'customers' will result in an error because it has been removed.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Load two tables\\nconst employeesTable = sdb.newTable('employees');\\nawait employeesTable.loadData('./employees.csv');\\nconst customersTable = sdb.newTable('customers');\\nawait customersTable.loadData('./customers.csv');\\n// Select only the employees table\\nawait sdb.selectTables('employees');\\n// Trying to log the customers table will throw an error\\ntry {\\n  await customersTable.logTable();\\n} catch (e) {\\n  console.error('Customers table has been removed:', e.message);\\n}\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I select a single table by name?",
    "answer": "Here is how you can select a single table by name:\\n```// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst dummyTable = sdb.newTable();\\nawait sdb.selectTables(\"employees\");\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I select multiple tables by name?",
    "answer": "Here is how you can select multiple tables by name:\\n```// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst dummyTable = sdb.newTable();\\nawait sdb.selectTables([\"customers\", \"products\"]);\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I select a table using a SimpleTable instance?",
    "answer": "Here is how you can select a table using a SimpleTable instance:\\n```// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst employeesTable = sdb.newTable(\"employees\");\\n// ... load data if needed ...\\nawait sdb.selectTables(employeesTable);\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I select multiple tables using a mix of names and SimpleTable instances?",
    "answer": "Here is how you can select multiple tables using a mix of names and SimpleTable instances:\\n```// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create tables\\nconst customersTable = sdb.newTable(\"customers\");\\nconst ordersTable = sdb.newTable(\"orders\");\\nawait sdb.selectTables([customersTable, \"products\"]);\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I select tables after loading data into multiple tables?",
    "answer": "Here is how you can select tables after loading data into multiple tables:\\n```// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create tables\\nconst customers = sdb.newTable(\"customers\");\\nconst orders = sdb.newTable(\"orders\");\\n// Load data into tables\\nawait customers.loadData(\"./customers.csv\");\\nawait orders.loadData(\"./orders.csv\");\\n// Now keep only the customers table\\nawait sdb.selectTables(\"customers\");\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I retrieve all table names from the database?",
    "answer": "Here’s how to retrieve all table names:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\nawait sdb.done();\n```"
  },
  {
    "question": "What order are the table names returned in?",
    "answer": "The returned array is sorted alphabetically. Here’s an example that prints the names in order:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\n// The array is already sorted alphabetically\nconsole.log('Sorted table names:', tableNames);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I handle the promise returned by getTableNames?",
    "answer": "You can handle the promise with async/await or .then. Here’s an example using .then:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Using .then to handle the promise\nsdb.getTableNames()\n  .then((names) => {\n    console.log('Table names:', names);\n  })\n  .finally(() => {\n    sdb.done();\n  });\n```"
  },
  {
    "question": "What happens if there are no tables in the database?",
    "answer": "If there are no tables, the method resolves to an empty array. Here’s how you can check for that:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nif (tableNames.length === 0) {\n  console.log('No tables found.');\n} else {\n  console.log('Tables:', tableNames);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve all table names from the database?",
    "answer": "Use the `getTableNames` method to fetch an array of table names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // e.g., [\"employees\", \"customers\"]\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does `getTableNames` return if there are no tables in the database?",
    "answer": "It resolves to an empty array:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // []\nawait sdb.done();\n```"
  },
  {
    "question": "How can I iterate over each table name and perform an action?",
    "answer": "Loop through the array returned by `getTableNames`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nfor (const name of tableNames) {\n  console.log(`Processing table: ${name}`);\n  // Example action: create a new table instance\n  const table = sdb.newTable(name);\n  // ... perform operations on table\n}\nawait sdb.done();\n```"
  },
  {
    "question": "Are the table names returned sorted alphabetically?",
    "answer": "Yes, the method guarantees alphabetical order; you can verify by printing:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Should be sorted alphabetically\nawait sdb.done();\n```"
  },
  {
    "question": "How can I handle errors when calling `getTableNames`?",
    "answer": "Wrap the call in a try/catch block to catch any promise rejections:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\ntry {\n  const tableNames = await sdb.getTableNames();\n  console.log(tableNames);\n} catch (err) {\n  console.error(\"Failed to get table names:\", err);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How can I use `getTableNames` to load data into each table?",
    "answer": "After retrieving the names, load data into each table using `loadData`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nfor (const name of tableNames) {\n  const table = sdb.newTable(name);\n  await table.loadData(`./data/${name}.csv`);\n  console.log(`Loaded data into ${name}`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve all table names from the database?",
    "answer": "Here’s how to retrieve all table names from the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: [\"employees\", \"customers\"]\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a specific table exists in the database?",
    "answer": "Here’s how to check if a specific table exists in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nconst tableToCheck = \"orders\";\nconst exists = tableNames.includes(tableToCheck);\nconsole.log(`Table ${tableToCheck} exists: ${exists}`);\nawait sdb.done();\n```"
  },
  {
    "question": "How can I iterate over all tables and perform an operation on each?",
    "answer": "Here’s how to iterate over all tables and perform an operation on each:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nfor (const name of tableNames) {\n  console.log(`Processing table: ${name}`);\n  // Example: load the table data\n  const table = sdb.newTable(name);\n  await table.loadData(`./${name}.csv`);\n  await table.logTable();\n}\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if there are no tables in the database?",
    "answer": "Here’s what happens when there are no tables in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nif (tableNames.length === 0) {\n  console.log(\"No tables found in the database.\");\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How can I use the table names to load data into a SimpleTable?",
    "answer": "Here’s how to use the table names to load data into a SimpleTable:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nfor (const name of tableNames) {\n  const table = sdb.newTable(name);\n  await table.loadData(`./${name}.csv`);\n  await table.logTable();\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all table names from the database?",
    "answer": "You can call the `getTableNames` method and log the result:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve all table names\nconst tableNames = await sdb.getTableNames();\n// Log the table names\nconsole.log(tableNames); // e.g., [\"employees\", \"customers\"]\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Are the table names returned by `getTableNames` sorted?",
    "answer": "Yes, the method returns the names sorted alphabetically:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\n// Verify sorting\nconsole.log(tableNames); // Output will be alphabetically sorted\nawait sdb.done();\n```"
  },
  {
    "question": "What does `getTableNames` return if there are no tables in the database?",
    "answer": "It returns an empty array:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // []\nawait sdb.done();\n```"
  },
  {
    "question": "How can I use the list of table names to perform operations on each table?",
    "answer": "You can iterate over the array and call methods on each table name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nfor (const name of tableNames) {\n  // Example: log the name of each table\n  console.log(`Table: ${name}`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I log all table names in my SimpleDB instance?",
    "answer": "Here’s how to log all table names after creating tables:\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a couple of tables\\nconst table1 = sdb.newTable(\"employees\");\\nconst table2 = sdb.newTable(\"customers\");\\n// We log all table names\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "What happens if I call logTableNames before creating any tables?",
    "answer": "If you call logTableNames before creating tables, it will log an empty array:\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// No tables created yet\\nawait sdb.logTableNames(); // Should log: SimpleDB - Tables:  []\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "Can I log table names after adding a new table?",
    "answer": "Yes, you can log after each newTable call:\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Create a table\\nconst table = sdb.newTable(\"orders\");\\n// Log names now\\nawait sdb.logTableNames();\\n// Add another table\\nconst table2 = sdb.newTable(\"products\");\\n// Log again\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I handle the async nature of logTableNames?",
    "answer": "Use await to wait for the promise to resolve:\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Create a table\\nsdb.newTable(\"sales\");\\n// Await the logging\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How can I see the logged table names in the console?",
    "answer": "The method prints to console; after calling it you’ll see the output:\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Create tables\\nsdb.newTable(\"employees\");\\nsdb.newTable(\"customers\");\\n// Log names\\nawait sdb.logTableNames(); // Console: SimpleDB - Tables:  [\"customers\",\"employees\"]\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I log all table names in my SimpleDB instance?",
    "answer": "Use the `logTableNames` method after creating or loading tables. It prints the names to the console.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a couple of tables\nconst table1 = sdb.newTable(\"employees\");\nconst table2 = sdb.newTable(\"customers\");\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Does `logTableNames` return the table names or just log them?",
    "answer": "It only logs the names; the method returns a Promise that resolves to void.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.logTableNames(); // No return value, just console output\nawait sdb.done();\n```"
  },
  {
    "question": "Can I capture the logged table names programmatically?",
    "answer": "No, `logTableNames` does not expose the names; you would need to query the internal state or use another method.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.logTableNames(); // Output is only to console\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if there are no tables in the database?",
    "answer": "The method will log an empty array, indicating no tables.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.logTableNames(); // Logs: SimpleDB - Tables: []\nawait sdb.done();\n```"
  },
  {
    "question": "How can I use `logTableNames` after creating a new table?",
    "answer": "Call it after creating the table to see the updated list.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"orders\");\nawait sdb.logTableNames(); // Includes \"orders\"\nawait sdb.done();\n```"
  },
  {
    "question": "Is the output sorted alphabetically by default?",
    "answer": "Yes, the method sorts the table names alphabetically before logging.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst t1 = sdb.newTable(\"zeta\");\nconst t2 = sdb.newTable(\"alpha\");\nawait sdb.logTableNames(); // Logs: [\"alpha\",\"zeta\"]\nawait sdb.done();\n```"
  },
  {
    "question": "How do I log all table names in my SimpleDB instance?",
    "answer": "Use the logTableNames method after initializing SimpleDB. It will print all table names sorted alphabetically.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Log all table names to the console\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "What does the output of logTableNames look like?",
    "answer": "logTableNames logs a message like 'SimpleDB - Tables:  [\"employees\",\"customers\"]' to the console.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Log all table names to the console\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "Does logTableNames sort the table names alphabetically?",
    "answer": "Yes, the method sorts the names alphabetically before logging.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Log all table names to the console\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "Can I use logTableNames after creating new tables?",
    "answer": "Yes, you can call it anytime after tables are created.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"employees\");\\n// Log all table names to the console\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "What happens if there are no tables in the database when I call logTableNames?",
    "answer": "It logs 'SimpleDB - Tables:  []' indicating no tables.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Log all table names to the console (none exist)\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I log all table names in my SimpleDB instance?",
    "answer": "Here’s how to log all table names in your SimpleDB instance:\\n\\n```ts\\n// Import the SimpleDB class\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\n// Create a new SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Log all table names to the console\\nawait sdb.logTableNames();\\n// Close the database connection\\nawait sdb.done();\\n```"
  },
  {
    "question": "What output format does logTableNames produce?",
    "answer": "To see the exact output format of logTableNames, run the following code and observe the console:\\n\\n```ts\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nawait sdb.logTableNames(); // Expected output: SimpleDB - Tables:  [\\\"employees\\\",\\\"customers\\\"]\\nawait sdb.done();\\n```"
  },
  {
    "question": "How can I log table names after creating a new table?",
    "answer": "After creating a new table, you can immediately log the table names to verify it was added:\\n\\n```ts\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Create a new table named \\\"employees\\\"\\nconst table = sdb.newTable(\\\"employees\\\");\\nawait sdb.logTableNames(); // Should include \\\"employees\\\"\\nawait sdb.done();\\n```"
  },
  {
    "question": "What happens if there are no tables in the database?",
    "answer": "If there are no tables in the database, logTableNames will output an empty array:\\n\\n```ts\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nawait sdb.logTableNames(); // Expected output: SimpleDB - Tables:  []\\nawait sdb.done();\\n```"
  },
  {
    "question": "Does logTableNames sort the table names alphabetically?",
    "answer": "Because logTableNames sorts the table names alphabetically, you can confirm this by creating tables in any order:\\n\\n```ts\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Create tables out of order\\nsdb.newTable(\\\"zeta\\\");\\nsdb.newTable(\\\"alpha\\\");\\nsdb.newTable(\\\"gamma\\\");\\nawait sdb.logTableNames(); // Expected output: SimpleDB - Tables:  [\\\"alpha\\\",\\\"gamma\\\",\\\"zeta\\\"]\\nawait sdb.done();\\n```"
  },
  {
    "question": "How do I retrieve all tables in the database?",
    "answer": "You can call `getTables()` on your `SimpleDB` instance to get an array of all `SimpleTable` objects. Here’s a complete example that creates a table, then fetches all tables and logs them:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load some data into the table (optional)\nawait table.loadData(\"./data.csv\");\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the retrieved tables\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "How can I check if there are any tables before performing operations?",
    "answer": "You can check the length of the array returned by `getTables()`. If it’s zero, there are no tables. Here’s an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Get all tables\nconst tables = await sdb.getTables();\nif (tables.length === 0) {\n  console.log(\"No tables found in the database.\");\n} else {\n  console.log(`Found ${tables.length} table(s).`);\n}\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "How can I iterate over each table and perform an action, such as logging its name?",
    "answer": "You can loop through the array returned by `getTables()` and access each table’s properties. Assuming each `SimpleTable` has a `name` property, here’s how you could log it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create a couple of tables for demonstration\nsdb.newTable(\"table1\");\nsdb.newTable(\"table2\");\n// Retrieve all tables\nconst tables = await sdb.getTables();\n// Iterate and log each table’s name\nfor (const tbl of tables) {\n  console.log(`Table name: ${tbl.name}`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve all SimpleTable instances from the database?",
    "answer": "Here’s how to get all tables and log them:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve all tables\nconst tables = await sdb.getTables();\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check whether the database contains any tables?",
    "answer": "You can check the length of the returned array:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\nif (tables.length === 0) {\n  console.log(\"No tables found\");\n} else {\n  console.log(`Found ${tables.length} tables`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I iterate over each table and perform an operation, such as logging its contents?",
    "answer": "Iterate over the array and call a method on each table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\nfor (const table of tables) {\n  // Assuming each table has a logTable method\n  await table.logTable();\n}\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use the array of tables to filter for a specific table?",
    "answer": "Yes, you can filter the array based on a property (e.g., name) if available:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\nconst target = tables.find(t => t.name === \"salesTable\");\nif (target) {\n  console.log(\"Found salesTable\");\n} else {\n  console.log(\"salesTable not found\");\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I handle the promise returned by getTables without using async/await?",
    "answer": "You can use then/catch to handle the promise:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nsdb.getTables()\n  .then(tables => {\n    console.log(tables);\n  })\n  .catch(err => {\n    console.error(\"Error retrieving tables:\", err);\n  })\n  .finally(async () => {\n    await sdb.done();\n  });\n```"
  },
  {
    "question": "How can I retrieve all tables in the SimpleDB instance?",
    "answer": "Here is how you can retrieve all tables:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the number of tables\nconsole.log(`Found ${tables.length} tables`);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if there are any tables in the database?",
    "answer": "You can check the length of the array returned by getTables:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Get all tables\nconst tables = await sdb.getTables();\n// Check if any tables exist\nif (tables.length === 0) {\n  console.log(\"No tables found.\");\n} else {\n  console.log(`There are ${tables.length} tables.`);\n}\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I iterate over all tables and perform an operation on each?",
    "answer": "You can loop through the array returned by getTables and call a method on each table (replace `someMethod` with an actual method you want to use):\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Get all tables\nconst tables = await sdb.getTables();\n// Iterate over each table\nfor (const table of tables) {\n  // Example operation: log the table (assuming a logTable method exists)\n  // await table.logTable();\n  console.log(`Processing table: ${table}`);\n}\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all tables in the SimpleDB instance?",
    "answer": "You can call the `getTables` method to get an array of all SimpleTable instances.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve all tables\nconst tables = await sdb.getTables();\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if there are no tables in the database?",
    "answer": "After calling `getTables`, you can check the length of the returned array.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\nif (tables.length === 0) {\n  console.log('No tables found.');\n} else {\n  console.log(`Found ${tables.length} tables.`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How can I iterate over each table and log its name?",
    "answer": "Use a `for...of` loop to iterate over the array returned by `getTables` and access each table’s `name` property.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\nfor (const table of tables) {\n  console.log(`Table name: ${table.name}`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How can I find a specific table by its name after retrieving all tables?",
    "answer": "Filter the array returned by `getTables` to locate the table with the desired name.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\nconst targetName = 'sales';\nconst targetTable = tables.find(t => t.name === targetName);\nif (targetTable) {\n  console.log(`Found table: ${targetTable.name}`);\n} else {\n  console.log(`Table ${targetName} not found.`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I check if a table named \"employees\" exists?",
    "answer": "You can call `hasTable` with the table name and await the result:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"employees\" exists\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "Can I pass a SimpleTable instance to hasTable?",
    "answer": "Yes, you can pass a SimpleTable instance directly:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if this table instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "What does hasTable return if the table does not exist?",
    "answer": "If the table is not present, the promise resolves to `false`:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Attempt to check a non‑existent table\nconst exists = await sdb.hasTable(\"nonexistent_table\");\nconsole.log(exists); // Output: false\n// We close everything\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "Do I need to await the result of hasTable?",
    "answer": "Yes, `hasTable` is asynchronous and returns a promise, so you should await it:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Await the boolean result\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(exists);\n// We close everything\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "How can I use the boolean result to conditionally create a table?",
    "answer": "You can use an `if` statement to create the table only if it doesn't exist:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if the table exists\nconst exists = await sdb.hasTable(\"employees\");\nif (!exists) {\n  // Create the table because it doesn't exist\n  const table = sdb.newTable(\"employees\");\n  console.log(\"Table created.\");\n} else {\n  console.log(\"Table already exists.\");\n}\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named \"employees\" exists in the database?",
    "answer": "You can call `hasTable` with the table name as a string. Here’s how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"employees\" exists\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "How can I check if a SimpleTable instance exists in the database?",
    "answer": "Pass the SimpleTable instance to `hasTable`. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if this instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "What happens if I pass an invalid type to `hasTable`, such as a number?",
    "answer": "`hasTable` expects a string or SimpleTable; passing an invalid type will result in a TypeScript compile error or runtime exception. Example of a runtime error:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\ntry {\n  // @ts-expect-error: invalid type\n  const result = await sdb.hasTable(123 as any);\n  console.log(result);\n} catch (e) {\n  console.error(\"Error:\", e.message);\n}\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "Can I use `hasTable` after dropping a table to confirm it no longer exists?",
    "answer": "Yes, call `hasTable` after dropping. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"temp_table\");\nawait table.loadData(\"./temp.csv\");\nawait table.drop(); // Drop the table\nconst existsAfterDrop = await sdb.hasTable(\"temp_table\");\nconsole.log(existsAfterDrop); // Output: false\nawait sdb.done();\n```"
  },
  "",
  {
    "question": "How can I create a table only if it does not already exist?",
    "answer": "Use `hasTable` in a conditional before creating. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableName = \"orders\";\nconst exists = await sdb.hasTable(tableName);\nif (!exists) {\n  const table = sdb.newTable(tableName);\n  await table.loadData(\"./orders.csv\");\n  console.log(`Table ${tableName} created.`);\n} else {\n  console.log(`Table ${tableName} already exists.`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I check if a table named \"employees\" exists in the database?",
    "answer": "To check if a table named \"employees\" exists, call hasTable with the table name.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\nconst exists = await sdb.hasTable('employees');\nconsole.log(exists); // true or false\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a SimpleTable instance exists in the database?",
    "answer": "You can pass a SimpleTable instance to hasTable to verify its existence.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\nconst myTable = sdb.newTable('my_data');\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // true or false\nawait sdb.done();\n```"
  },
  {
    "question": "What does hasTable return if the table does not exist?",
    "answer": "If the table is missing, hasTable resolves to false.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\nconst exists = await sdb.hasTable('nonexistent_table');\nif (!exists) {\n  console.log('Table does not exist.');\n} else {\n  console.log('Table exists.');\n}\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use hasTable in a conditional statement to create a table only if it doesn't exist?",
    "answer": "Yes, you can use an if statement to create the table only when hasTable returns false.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\nconst exists = await sdb.hasTable('new_table');\nif (!exists) {\n  // Create the table only if it doesn't exist\n  const table = sdb.newTable('new_table');\n  console.log('Created new table.');\n} else {\n  console.log('Table already exists.');\n}\nawait sdb.done();\n```"
  },
  {
    "question": "How do I handle the promise returned by hasTable?",
    "answer": "hasTable returns a Promise<boolean>, so you need to await it or use .then.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Using await\nconst exists = await sdb.hasTable('employees');\nconsole.log('Using await:', exists);\n// Using then\nsdb.hasTable('employees').then((exists) => {\n  console.log('Using then:', exists);\n});\nawait sdb.done();\n```"
  },
  {
    "question": "How do I check if a table named \"sales\" exists in the database?",
    "answer": "You can call `hasTable` with the table name as a string.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"sales\" exists\nconst exists = await sdb.hasTable(\"sales\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I check existence using a SimpleTable instance instead of a name?",
    "answer": "Yes, you can pass a SimpleTable instance to `hasTable`.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if this table instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does `hasTable` return if the table does not exist?",
    "answer": "It resolves to `false`.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst exists = await sdb.hasTable(\"nonexistent_table\");\nconsole.log(exists); // Output: false\nawait sdb.done();\n```"
  },
  {
    "question": "How can I use the boolean result to conditionally load data?",
    "answer": "You can use an `if` statement to decide whether to load data.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableName = \"sales\";\nif (await sdb.hasTable(tableName)) {\n  // Table exists, load data\n  const table = sdb.newTable(tableName);\n  await table.loadData(\"./sales.csv\");\n  await table.logTable();\n} else {\n  console.log(`Table ${tableName} does not exist.`);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "Is `hasTable` synchronous or asynchronous?",
    "answer": "`hasTable` is asynchronous and returns a `Promise<boolean>`.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst result = await sdb.hasTable(\"sales\");\nconsole.log(typeof result); // Output: \"boolean\"\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance?",
    "answer": "Here's how you can create a SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table from the SimpleDB instance?",
    "answer": "Here's how you can create a table from the SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I load a CSV file into the table?",
    "answer": "Here's how you can load a CSV file into the table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I close the SimpleDB instance?",
    "answer": "Here's how you can close the SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and a table?",
    "answer": "Here's how to create a SimpleDB instance and a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I load a CSV file into the table?",
    "answer": "Here's how to load a CSV file into the table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I close the database when I'm done?",
    "answer": "Here's how to close the database when you're finished:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\n// ... (other operations)\n// Close the database\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and a table?",
    "answer": "Here's how to create a SimpleDB instance and a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table named \"myTable\"\nconst table = sdb.newTable(\"myTable\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I load a CSV file into the table?",
    "answer": "Here's how to load a CSV file into the table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the CSV file\nawait table.loadData(\"./data.csv\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I close the SimpleDB instance after finishing my analysis?",
    "answer": "You should call the `done` method on the SimpleDB instance. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// ... (other operations)\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a new table and load a CSV file?",
    "answer": "Here's how you can create a new table and load a CSV file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"path/to/your/data.csv\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I close the database after I'm done?",
    "answer": "Here's how you can close the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance that uses an in-memory database?",
    "answer": "You can create an in-memory SimpleDB instance by not providing any options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance (in-memory by default)\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I specify a database file path when creating a SimpleDB instance?",
    "answer": "You can specify a database file path using the `file` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a database file\nconst sdb = new SimpleDB({ file: \"./mydatabase.duckdb\" });\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I set the number of rows to log when using `logTable`?",
    "answer": "You can set the number of rows to log using the `nbRowsToLog` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with 10 rows to log\nconst sdb = new SimpleDB({ nbRowsToLog: 10 });\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable logging of data types when logging a table?",
    "answer": "You can enable data type logging by setting `types` to `true`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with data types enabled\nconst sdb = new SimpleDB({ types: true });\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I set the maximum number of characters to display for text cells?",
    "answer": "You can set the maximum characters for text cells using `nbCharactersToLog`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with 50 characters max for text\nconst sdb = new SimpleDB({ nbCharactersToLog: 50 });\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I specify a database file to persist data?",
    "answer": "Set the `file` option to specify a database file path. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a database file\nconst sdb = new SimpleDB({\n  file: \"./mydatabase.db\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I configure SimpleDB to overwrite an existing database file?",
    "answer": "Set the `overwrite` option to `true` to overwrite existing files. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with overwrite enabled\nconst sdb = new SimpleDB({\n  overwrite: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable logging of the total execution duration?",
    "answer": "Set the `logDuration` option to `true` to log execution duration. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with duration logging\nconst sdb = new SimpleDB({\n  logDuration: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I set the number of rows to display when logging a table?",
    "answer": "Set the `nbRowsToLog` option to control logged row count. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with row limit\nconst sdb = new SimpleDB({\n  nbRowsToLog: 10\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I set the maximum number of characters to display for text cells?",
    "answer": "Set the `nbCharactersToLog` option to limit text cell display. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with character limit\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 50\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I include data types when logging a table?",
    "answer": "Set the `types` option to `true` to include data types in logs. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with type logging\nconst sdb = new SimpleDB({\n  types: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable verbose cache logging?",
    "answer": "Set the `cacheVerbose` option to `true` for detailed cache messages. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with verbose cache logging\nconst sdb = new SimpleDB({\n  cacheVerbose: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable debugging information?",
    "answer": "Set the `debug` option to `true` to enable debugging output. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with debug mode\nconst sdb = new SimpleDB({\n  debug: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I use DuckDB's external file cache?",
    "answer": "Set the `duckDbCache` option to `true` to enable DuckDB's external cache. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with DuckDB cache\nconst sdb = new SimpleDB({\n  duckDbCache: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I display a progress bar for long-running operations?",
    "answer": "Set the `progressBar` option to `true` to show progress bars. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with progress bar\nconst sdb = new SimpleDB({\n  progressBar: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance that uses an in-memory database?",
    "answer": "Here's how to create an in-memory SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with in-memory database (no file specified)\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I specify a database file path for SimpleDB?",
    "answer": "Here's how to set a database file path:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a database file\nconst sdb = new SimpleDB({\n  file: \"./my_database.db\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I set the number of rows to display when logging a table?",
    "answer": "Here's how to set the number of rows to log:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with 5 rows to log\nconst sdb = new SimpleDB({\n  nbRowsToLog: 5\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable data type logging when displaying table data?",
    "answer": "Here's how to enable data type logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with data types logging enabled\nconst sdb = new SimpleDB({\n  types: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable debugging information for SimpleDB operations?",
    "answer": "Here's how to enable debugging information:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with debugging enabled\nconst sdb = new SimpleDB({\n  debug: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance that uses an in-memory database?",
    "answer": "Here's how you can create a SimpleDB instance that uses an in-memory database by not specifying a file path.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance (in-memory by default)\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I specify a database file to use for persistent storage?",
    "answer": "Here's how you can specify a database file path for persistent storage using the `file` option.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a file path\nconst sdb = new SimpleDB({ file: \"mydata.db\" });\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I set the number of rows to display when logging a table?",
    "answer": "Here's how you can set the number of rows to log using the `nbRowsToLog` option.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with row logging configuration\nconst sdb = new SimpleDB({ nbRowsToLog: 5 });\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable data type logging when printing table results?",
    "answer": "Here's how you can enable data type logging by setting `types: true` in the options.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with data type logging enabled\nconst sdb = new SimpleDB({ types: true });\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable a progress bar for long-running database operations?",
    "answer": "Here's how you can enable a progress bar using the `progressBar` option.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with progress bar enabled\nconst sdb = new SimpleDB({ progressBar: true });\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a new table without specifying a name?",
    "answer": "Here's how you can create a new table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with a default name (e.g., \"table1\")\nconst dataTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a new table with a specific name?",
    "answer": "Here's how you can create a new table with a custom name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with the name \"employees\"\nconst employees = sdb.newTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table with a default name?",
    "answer": "Here's how you can create a table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst dataTable = sdb.newTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table with a specific name?",
    "answer": "Here's how you can create a table with a specific name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst employees = sdb.newTable(\"employees\");\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a table with a default name?",
    "answer": "Here's how you can create a table with a default name (e.g., 'table1'): ```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a table with a specific name?",
    "answer": "Here's how you can create a table with a specific name (e.g., 'employees'): ```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst employees = sdb.newTable(\"employees\");\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a table with geospatial projections?",
    "answer": "Here's how you can create a table with geospatial projections (mapping 'geometry' column to EPSG:4326): ```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst geoTable = sdb.newTable(\"geoTable\", { \"geometry\": \"EPSG:4326\" });\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table with a default name?",
    "answer": "You can create a table with a default name by calling `newTable()` without any arguments:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with a default name\nconst dataTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table with a specific name?",
    "answer": "To create a table with a specific name, pass the name as a string to `newTable()`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with the name \"employees\"\nconst employees = sdb.newTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve a table by name from SimpleDB?",
    "answer": "Here's how you can retrieve an existing table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"employees\" table\nconst employees = await sdb.getTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve an existing table by name using SimpleDB?",
    "answer": "To retrieve an existing table by name, use the `getTable` method with the table's name.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We retrieve the \"employees\" table\nconst employees = await sdb.getTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve an existing table named 'employees' from the SimpleDB instance?",
    "answer": "Here's how you can retrieve a table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We retrieve the table named \"employees\"\nconst employees = await sdb.getTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a table named 'employees' from the SimpleDB instance?",
    "answer": "Here's how you can retrieve a table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We retrieve the table named \"employees\"\nconst employees = await sdb.getTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table by its name?",
    "answer": "Use `removeTables` with the table name as a string.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove multiple tables by their names?",
    "answer": "Use `removeTables` with an array of table names.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a table using a SimpleTable instance?",
    "answer": "Use `removeTables` with the SimpleTable instance.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst employeesTable = sdb.newTable(\"employees\");\n// We load data into the table (using a placeholder file)\nawait employeesTable.loadData(\"./employees.csv\");\n// We remove the table using the instance\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table by its name?",
    "answer": "Here's how to remove a table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.removeTables(\"employees\");\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove multiple tables by their names?",
    "answer": "Here's how to remove multiple tables by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.removeTables([\"customers\", \"products\"]);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a table using a SimpleTable instance?",
    "answer": "Here's how to remove a table using a SimpleTable instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst employeesTable = sdb.newTable(\"employees\");\n// Load data (required to have a valid table instance)\nawait employeesTable.loadData(\"./data.csv\");\nawait sdb.removeTables(employeesTable);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table by name?",
    "answer": "You can remove a single table by name using the `removeTables` method with the table name as a string.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a table named \"employees\"\nconst employeesTable = sdb.newTable(\"employees\");\n// We remove the table by its name\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove multiple tables by name?",
    "answer": "You can remove multiple tables by name using the `removeTables` method with an array of table names.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables: \"customers\" and \"products\"\nconst customersTable = sdb.newTable(\"customers\");\nconst productsTable = sdb.newTable(\"products\");\n// We remove both tables by their names in an array\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a table using a SimpleTable instance?",
    "answer": "You can remove a table using a SimpleTable instance by passing the instance to the `removeTables` method.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a table named \"employees\" and get its instance\nconst employeesTable = sdb.newTable(\"employees\");\n// We remove the table using the instance\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table by name?",
    "answer": "Here's how you can remove a single table by name:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove the table named 'employees'\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove multiple tables by name?",
    "answer": "Here's how you can remove multiple tables by name:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a table using a SimpleTable instance?",
    "answer": "Here's how you can remove a table using a SimpleTable instance:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table instance\nconst employeesTable = sdb.newTable(\"employees\");\n// Remove the table using the instance\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a single table by name?",
    "answer": "Here's how to select a single table by name, keeping only that table and removing others:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create two tables: \"employees\" and \"customers\"\nconst employeesTable = sdb.newTable(\"employees\");\nconst customersTable = sdb.newTable(\"customers\");\n// Select the \"employees\" table, removing \"customers\"\nawait sdb.selectTables(\"employees\");\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select multiple tables by name?",
    "answer": "Here's how to select multiple tables by name, keeping only those tables and removing others:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create two tables: \"customers\" and \"products\"\nconst customersTable = sdb.newTable(\"customers\");\nconst productsTable = sdb.newTable(\"products\");\n// Select both tables, removing any other tables\nawait sdb.selectTables([\"customers\", \"products\"]);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a table using a SimpleTable instance?",
    "answer": "Here's how to select a table using a SimpleTable instance, which is useful when you have a reference to the table object:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create a table named \"employees\"\nconst employeesTable = sdb.newTable(\"employees\");\n// Select the table using the instance\nawait sdb.selectTables(employeesTable);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a single table by name?",
    "answer": "To select a single table by name, pass the table name as a string to the `selectTables` method.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We select a single table by name\nawait sdb.selectTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select multiple tables by name?",
    "answer": "To select multiple tables by name, pass an array of table names to the `selectTables` method.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We select multiple tables by name\nawait sdb.selectTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a table using a SimpleTable instance?",
    "answer": "To select a table using a SimpleTable instance, pass the instance to the `selectTables` method after creating the table.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a table instance\nconst employeesTable = sdb.newTable(\"employees\");\n// We select the table using its instance\nawait sdb.selectTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a single table by name to keep in the database?",
    "answer": "You can select a single table by name using the `selectTables` method with the table name as a string.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Select a single table by name\nawait sdb.selectTables(\"employees\");\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select multiple tables by name to keep in the database?",
    "answer": "You can select multiple tables by name using the `selectTables` method with an array of table names.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Select multiple tables by name\nawait sdb.selectTables([\"customers\", \"products\"]);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a table using a SimpleTable instance?",
    "answer": "You can select a table using a SimpleTable instance by passing the instance to the `selectTables` method.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create a table instance\nconst employeesTable = sdb.newTable(\"employees\");\n// Select the table using the instance\nawait sdb.selectTables(employeesTable);\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a single table by name to keep in the database?",
    "answer": "Here's how to select a single table by name, removing all other tables:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst employeesTable = sdb.newTable(\"employees\");\nconst customersTable = sdb.newTable(\"customers\");\n// We select only the \"employees\" table, removing \"customers\"\nawait sdb.selectTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select multiple tables by name to keep in the database?",
    "answer": "Here's how to select multiple tables by name, keeping only those tables:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst customersTable = sdb.newTable(\"customers\");\nconst productsTable = sdb.newTable(\"products\");\n// We select both \"customers\" and \"products\" tables\nawait sdb.selectTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a table using a SimpleTable instance?",
    "answer": "Here's how to select a table using a SimpleTable instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a table\nconst employeesTable = sdb.newTable(\"employees\");\n// We select the table using the instance\nawait sdb.selectTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all table names from the database?",
    "answer": "Here's how you can retrieve all table names from the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\n// Log the table names\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all table names from the SimpleDB instance?",
    "answer": "Here's how to get all table names in alphabetical order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve all table names\nconst tableNames = await sdb.getTableNames();\n// Log the table names\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a list of all table names in the database?",
    "answer": "Here's how you can retrieve all table names in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names from the database\nconst tableNames = await sdb.getTableNames();\n// Log the table names to the console\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a list of all table names in my database?",
    "answer": "Here's how you can retrieve all table names in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\n// Log the table names\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all table names in the database?",
    "answer": "Here's how to log all table names in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all table names in the SimpleDB instance?",
    "answer": "You can list all table names by calling the `logTableNames` method on the SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all table names in the database?",
    "answer": "You can use the `logTableNames` method to list all table names sorted alphabetically.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all table names in the database?",
    "answer": "Here's how you can log all table names to the console:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I get a list of all tables in the database?",
    "answer": "You can use the `getTables` method to retrieve all tables in the database.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We get all tables from the database\nconst tables = await sdb.getTables();\n// We log the tables to see the list\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all tables in the SimpleDB instance?",
    "answer": "You can retrieve all tables in the SimpleDB instance using the `getTables` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve all tables in the database\nconst tables = await sdb.getTables();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all tables in the database?",
    "answer": "Here's how you can retrieve all tables in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We get all tables\nconst tables = await sdb.getTables();\n// We log the number of tables\nconsole.log(`Number of tables: ${tables.length}`);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all tables created in my SimpleDB instance?",
    "answer": "Here's how you can get all tables in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all tables\nconst tables = await sdb.getTables();\n// Log the tables to see the list\nconsole.log(\"All tables:\", tables);\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'employees' exists in the database?",
    "answer": "Here's how you can check if a table named 'employees' exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if the table named \"employees\" exists\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table instance I created exists in the database?",
    "answer": "Here's how you can check if a table instance exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if the table instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'employees' exists in the database?",
    "answer": "Here's how you can check if a table named 'employees' exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"employees\" exists\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a specific table instance (that I created) exists in the database?",
    "answer": "Here's how you can check if a specific table instance exists in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table named \"my_data\"\nconst myTable = sdb.newTable(\"my_data\");\n// Check if the table instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named \"employees\" exists in the database?",
    "answer": "Here's how you can check for a table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a table named \"employees\"\nconst employeesTable = sdb.newTable(\"employees\");\n// Check if the table named \"employees\" exists\nconst existsByName = await sdb.hasTable(\"employees\");\nconsole.log(existsByName);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a specific table instance exists in the database?",
    "answer": "Here's how you can check for a table instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if the table instance exists\nconst existsByInstance = await sdb.hasTable(myTable);\nconsole.log(existsByInstance);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'employees' exists in my database?",
    "answer": "Here's how you can check if a table named 'employees' exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"employees\" exists\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a specific table instance exists in the database?",
    "answer": "Here's how you can check if a specific table instance exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if this table instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Deno?",
    "answer": "Here's how to install the library using Deno:\n```bash\ndeno add jsr:@nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Node.js?",
    "answer": "Here's how to install the library using Node.js:\n```bash\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a SimpleDB instance?",
    "answer": "Here's how to create a SimpleDB instance:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\n```"
  },
  {
    "question": "How do I create a SimpleTable from a SimpleDB instance?",
    "answer": "Here's how to create a SimpleTable from a SimpleDB instance:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\"); // This returns a SimpleTable instance\n```"
  },
  {
    "question": "How do I load data into a SimpleTable?",
    "answer": "Here's how to load data into a SimpleTable:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"path/to/your/data.csv\");\n```"
  },
  {
    "question": "What should I do when I'm finished using the SimpleDB instance?",
    "answer": "You should call the `done()` method on the SimpleDB instance. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"path/to/your/data.csv\");\nawait sdb.done(); // Ensure to call done when you're finished.\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Deno?",
    "answer": "Here's how to install the library using Deno:\n```bash\ndeno add jsr:@nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Node.js?",
    "answer": "Here's how to install the library using Node.js:\n```bash\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and a SimpleTable?",
    "answer": "Here's how to create a SimpleDB instance and a SimpleTable:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\"); // This returns a SimpleTable instance\n\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `newTable` method return?",
    "answer": "The `newTable` method returns a `SimpleTable` instance. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\"); // This returns a SimpleTable instance\n\nawait sdb.done();\n```"
  },
  {
    "question": "What is the purpose of the `done` method?",
    "answer": "The `done` method is used to ensure resources are cleaned up when you're finished with the library. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\n\nawait sdb.done();\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Deno?",
    "answer": "Here's how to install the library using Deno:\n```bash\ndeno add jsr:@nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Node.js?",
    "answer": "Here's how to install the library using Node.js:\n```bash\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and a SimpleTable?",
    "answer": "Here's how to create a SimpleDB instance and a SimpleTable:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\"); // This returns a SimpleTable instance\n\nawait sdb.done();\n```"
  },
  {
    "question": "After loading data into a SimpleTable, what should I do to properly close the connection?",
    "answer": "You should call the `done()` method on the `SimpleDB` instance. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\n\n// Load data into the table (not shown here)\n\nawait sdb.done();\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Deno?",
    "answer": "Here's how to install the library using Deno:\n```bash\ndeno add jsr:@nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library using Node.js?",
    "answer": "Here's how to install the library using Node.js:\n```bash\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and a SimpleTable?",
    "answer": "Here's how to create a SimpleDB instance and a SimpleTable:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\"); // This returns a SimpleTable instance\n\nawait sdb.done();\n```"
  },
  {
    "question": "After loading data into a SimpleTable, what should I do to properly close the connection?",
    "answer": "You should call the `done()` method on the `SimpleDB` instance. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\n\n// Load data into the table (not shown here)\n\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a SimpleDB instance with a specific database file?",
    "answer": "Here's how to create a SimpleDB instance that uses a specific database file:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ file: \"./my-database.db\" });\n// You can now use the sdb instance to perform database operations\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if I don't provide a file path when creating a SimpleDB instance?",
    "answer": "If you don't provide a file path, SimpleDB will use an in-memory database. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// The database will be stored in memory\nawait sdb.done();\n```"
  },
  {
    "question": "How can I overwrite an existing database file when creating a SimpleDB instance?",
    "answer": "You can use the `overwrite` option to overwrite an existing database file. Here's how:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ file: \"./my-database.db\", overwrite: true });\n// This will overwrite the file if it exists\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable logging of the total execution duration?",
    "answer": "You can enable logging of the total execution duration by setting the `logDuration` option to `true`. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ logDuration: true });\n// The total execution duration will be logged\nawait sdb.done();\n```"
  },
  {
    "question": "How can I control the number of rows displayed when logging a table?",
    "answer": "You can control the number of rows displayed when logging a table using the `nbRowsToLog` option. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ nbRowsToLog: 5 });\n// Only the first 5 rows will be displayed when logging a table\nawait sdb.done();\n```"
  },
  {
    "question": "How can I limit the number of characters displayed for text-based cells when logging a table?",
    "answer": "You can limit the number of characters displayed for text-based cells using the `nbCharactersToLog` option. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ nbCharactersToLog: 20 });\n// Text-based cells will be limited to 20 characters when logging a table\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable logging of data types when logging a table?",
    "answer": "You can enable logging of data types by setting the `types` option to `true`. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ types: true });\n// Data types will be included when logging a table\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable verbose cache-related messages?",
    "answer": "You can enable verbose cache-related messages by setting the `cacheVerbose` option to `true`. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// Verbose cache-related messages will be logged\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable debugging information logging?",
    "answer": "You can enable debugging information logging by setting the `debug` option to `true`. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ debug: true });\n// Debugging information will be logged\nawait sdb.done();\n```"
  },
  {
    "question": "How do I enable DuckDB's external file cache?",
    "answer": "You can enable DuckDB's external file cache by setting the `duckDbCache` option to `true`. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ duckDbCache: true });\n// DuckDB's external file cache will be used\nawait sdb.done();\n```"
  },
  {
    "question": "How do I display a progress bar for long-running operations?",
    "answer": "You can display a progress bar for long-running operations by setting the `progressBar` option to `true`. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ progressBar: true });\n// A progress bar will be displayed for long-running operations\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a SimpleDB instance that persists data to a file named 'my_database.db', overwriting it if it exists?",
    "answer": "Here's how to create a SimpleDB instance with file persistence and overwrite enabled:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ file: \"my_database.db\", overwrite: true });\n// You can now perform database operations using 'sdb'\n// For example, create a table and load data\n// await sdb.newTable().loadData(\"./my_data.csv\");\nawait sdb.done();\n```"
  },
  {
    "question": "How can I configure SimpleDB to use an in-memory database and log the total execution duration?",
    "answer": "Here's how to create a SimpleDB instance using an in-memory database and enable duration logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ logDuration: true });\n// You can now perform database operations using 'sdb'\nawait sdb.done();\n```"
  },
  {
    "question": "How can I control the number of rows displayed when logging a table?",
    "answer": "You can use the `nbRowsToLog` option in the SimpleDB constructor to control the number of rows logged. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ nbRowsToLog: 10 });\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\n// await table.loadData(\"./my_data.csv\");\n// Log the table\n// await table.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How can I limit the number of characters displayed for text-based cells when logging a table?",
    "answer": "You can use the `nbCharactersToLog` option in the SimpleDB constructor to limit the number of characters displayed for text-based cells. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ nbCharactersToLog: 50 });\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\n// await table.loadData(\"./my_data.csv\");\n// Log the table\n// await table.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable verbose cache-related messages and debugging information?",
    "answer": "You can enable verbose cache messages and debugging information using the `cacheVerbose` and `debug` options in the SimpleDB constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ cacheVerbose: true, debug: true });\n// You can now perform database operations using 'sdb'\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable DuckDB's external file cache?",
    "answer": "You can enable DuckDB's external file cache using the `duckDbCache` option in the SimpleDB constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ duckDbCache: true });\n// You can now perform database operations using 'sdb'\nawait sdb.done();\n```"
  },
  {
    "question": "How can I display a progress bar for long-running operations?",
    "answer": "You can display a progress bar for long-running operations using the `progressBar` option in the SimpleDB constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ progressBar: true });\n// You can now perform database operations using 'sdb'\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a SimpleDB instance with a specific database file and overwrite it if it exists?",
    "answer": "Here's how you can create a SimpleDB instance with a database file and overwrite it if it exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ file: \"./my_database.db\", overwrite: true });\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I configure SimpleDB to use an in-memory database?",
    "answer": "Here's how you can create a SimpleDB instance that uses an in-memory database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable logging of the total execution duration?",
    "answer": "Here's how you can enable logging of the total execution duration:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ logDuration: true });\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I set the number of rows to display when logging a table?",
    "answer": "Here's how you can set the number of rows to display when logging a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ nbRowsToLog: 10 });\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I configure SimpleDB to include data types when logging a table?",
    "answer": "Here's how you can configure SimpleDB to include data types when logging a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ types: true });\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable verbose cache-related messages?",
    "answer": "Here's how you can enable verbose cache-related messages:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable debugging information logging?",
    "answer": "Here's how you can enable debugging information logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ debug: true });\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable DuckDB's external file cache?",
    "answer": "Here's how you can enable DuckDB's external file cache:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ duckDbCache: true });\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I display a progress bar for long-running operations?",
    "answer": "Here's how you can display a progress bar for long-running operations:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ progressBar: true });\n// You can now perform operations with the database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a SimpleDB instance with a specific database file?",
    "answer": "Here's how you can create a SimpleDB instance that uses a specific database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ file: \"./my-database.db\" });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I configure SimpleDB to overwrite the database file if it already exists?",
    "answer": "You can use the `overwrite` option in the constructor to overwrite the database file if it exists. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ file: \"./my-database.db\", overwrite: true });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable logging of the total execution duration?",
    "answer": "You can enable logging of the total execution duration by setting the `logDuration` option to `true` in the constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ logDuration: true });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I control the number of rows displayed when logging a table?",
    "answer": "You can control the number of rows displayed when logging a table using the `nbRowsToLog` option in the constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ nbRowsToLog: 10 });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I limit the number of characters displayed for text-based cells when logging a table?",
    "answer": "You can limit the number of characters displayed for text-based cells when logging a table using the `nbCharactersToLog` option in the constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ nbCharactersToLog: 50 });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I include data types when logging a table?",
    "answer": "You can include data types when logging a table by setting the `types` option to `true` in the constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ types: true });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable verbose cache-related messages?",
    "answer": "You can enable verbose cache-related messages by setting the `cacheVerbose` option to `true` in the constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable debugging information logging?",
    "answer": "You can enable debugging information logging by setting the `debug` option to `true` in the constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ debug: true });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable DuckDB's external file cache?",
    "answer": "You can enable DuckDB's external file cache by setting the `duckDbCache` option to `true` in the constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ duckDbCache: true });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How can I display a progress bar for long-running operations?",
    "answer": "You can display a progress bar for long-running operations by setting the `progressBar` option to `true` in the constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ progressBar: true });\n// You can now perform operations on this database\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a default name?",
    "answer": "Here's how you can create a new table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst myTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a specific name?",
    "answer": "Here's how you can create a new table with a specific name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst myTable = sdb.newTable(\"my_data\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `projections` parameter do in `newTable`?",
    "answer": "The `projections` parameter allows you to specify geospatial projections for columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with projections\nconst geoTable = sdb.newTable(\"geo_data\", {\n  \"latitude\": \"EPSG:4326\",\n  \"longitude\": \"EPSG:4326\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a default name?",
    "answer": "Here's how you can create a new table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst myTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a specific name?",
    "answer": "Here's how you can create a new table with a specific name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst myTable = sdb.newTable(\"my_data\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I specify geospatial projections when creating a new table?",
    "answer": "Yes, you can specify geospatial projections when creating a new table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with projections\nconst geoTable = sdb.newTable(\"geo_data\", {\n  latitude: \"EPSG:4326\",\n  longitude: \"EPSG:4326\",\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a default name?",
    "answer": "Here's how you can create a new table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst dataTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a specific name?",
    "answer": "Here's how you can create a new table with a specific name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst employees = sdb.newTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I specify geospatial projections when creating a new table?",
    "answer": "Yes, you can specify geospatial projections when creating a new table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with projections\nconst geoData = sdb.newTable(\"geoData\", {\n  \"latitude\": \"EPSG:4326\",\n  \"longitude\": \"EPSG:4326\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a default name?",
    "answer": "Here's how you can create a new table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst dataTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a specific name?",
    "answer": "Here's how you can create a new table with a specific name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst employees = sdb.newTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I specify geospatial projections when creating a table?",
    "answer": "Yes, you can specify geospatial projections when creating a table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with projections\nconst geoData = sdb.newTable(\"geoData\", {\n  latitude: \"EPSG:4326\",\n  longitude: \"EPSG:4326\",\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve a table named 'customers' from the database?",
    "answer": "Here's how you can retrieve a table named 'customers' using the `getTable` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"customers\" table\nconst customers = await sdb.getTable(\"customers\");\n// You can now work with the 'customers' table\n// For example, log the table\n// await customers.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `getTable` method return if the table doesn't exist?",
    "answer": "The documentation doesn't specify what happens if the table doesn't exist. It only states that it returns a Promise that resolves to the SimpleTable instance *if found*. You would need to handle potential errors or undefined values in your code to account for a missing table.\n\nHere's an example of how you might handle a missing table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"nonexistent_table\" table\nconst nonexistentTable = await sdb.getTable(\"nonexistent_table\").catch((error) => {\n  console.error(\"Table not found:\", error);\n  return null; // Or handle the error as appropriate\n});\n\nif (nonexistentTable) {\n  // Work with the table\n}\nawait sdb.done();\n```"
  },
  {
    "question": "Is the `getTable` method asynchronous? If so, how do I use `await` with it?",
    "answer": "Yes, the `getTable` method is asynchronous, as indicated by the `async` keyword in its signature and the fact that it returns a `Promise`. You should use `await` to wait for the promise to resolve before using the returned `SimpleTable` instance.\n\nHere's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"products\" table\nconst products = await sdb.getTable(\"products\");\n// Now you can work with the 'products' table\n// For example, log the table\n// await products.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve a table named 'customers' from the database?",
    "answer": "Here's how you can retrieve a table named 'customers' using the `getTable` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"customers\" table\nconst customers = await sdb.getTable(\"customers\");\n// You can now work with the 'customers' table\n// For example, log the table\n// await customers.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if I try to retrieve a table that doesn't exist?",
    "answer": "The documentation doesn't specify the behavior when a table doesn't exist. However, since the method returns a Promise, it's likely that the promise will reject if the table is not found. You should handle this potential rejection with a try-catch block or a `.catch()` handler.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Attempt to retrieve a non-existent table\ntry {\n  const nonExistentTable = await sdb.getTable(\"nonExistentTable\");\n  // This code will not be reached if the table doesn't exist\n} catch (error) {\n  console.error(\"Error retrieving table:\", error);\n}\nawait sdb.done();\n```"
  },
  {
    "question": "Can I chain the `getTable` method with other SimpleDB methods?",
    "answer": "Since `getTable` is an `async` method that returns a Promise, you can use `await` to get the table and then chain other methods that operate on the `SimpleTable` instance. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"products\" table\nconst products = await sdb.getTable(\"products\");\n// Load data into the table\nawait products.loadData(\"./products.csv\");\n// Log the table\nawait products.logTable();\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve a table named 'customers' from the database?",
    "answer": "Here's how you can retrieve a table named 'customers' using the `getTable` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"customers\" table\nconst customers = await sdb.getTable(\"customers\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `getTable` method return if the table does not exist?",
    "answer": "The documentation does not specify what happens if the table does not exist. It only states that it returns a promise that resolves to the `SimpleTable` instance *if found*.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"nonexistent_table\" table\nconst nonexistentTable = await sdb.getTable(\"nonexistent_table\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I use the `getTable` method with a variable table name?",
    "answer": "You can pass a variable to the `getTable` method to retrieve a table with a dynamic name.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Define a variable for the table name\nconst tableName = \"products\";\n// Retrieve the table using the variable\nconst products = await sdb.getTable(tableName);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve a table named 'customers' from the database?",
    "answer": "Here's how you can retrieve a table named 'customers' using the `getTable` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"customers\" table\nconst customers = await sdb.getTable(\"customers\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `getTable` method return if the table doesn't exist?",
    "answer": "The documentation doesn't specify what happens if the table doesn't exist. It only states that it returns a promise that resolves to the `SimpleTable` instance *if found*.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"nonexistent_table\" table\nconst nonexistentTable = await sdb.getTable(\"nonexistent_table\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use a variable for the table name when calling `getTable`?",
    "answer": "Yes, you can use a variable for the table name. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Define the table name\nconst tableName = \"products\";\n// Retrieve the table using the variable\nconst products = await sdb.getTable(tableName);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove a single table named 'orders' from the database?",
    "answer": "Here's how you can remove a table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"orders\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have multiple tables I want to remove, 'users' and 'addresses'. How do I do that?",
    "answer": "You can remove multiple tables by providing an array of their names. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"users\", \"addresses\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance called `productsTable`. How can I remove it using this instance?",
    "answer": "You can remove a table by passing the `SimpleTable` instance to the `removeTables` method. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"products\");\n// We load data into the table\n// ... load data ...\nconst productsTable = table;\n// Remove a single table using a SimpleTable instance\nawait sdb.removeTables(productsTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove a single table named 'orders' from the database?",
    "answer": "Here's how you can remove a single table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"orders\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove multiple tables, 'users' and 'addresses', at once?",
    "answer": "Here's how you can remove multiple tables by providing an array of their names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"users\", \"addresses\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance named `productsTable`. How can I remove this table using the instance?",
    "answer": "Here's how you can remove a table using a `SimpleTable` instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst productsTable = sdb.newTable(\"products\");\n// ... load data ...\nawait sdb.removeTables(productsTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove a single table named 'orders' from the database?",
    "answer": "Here's how you can remove a table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"orders\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove multiple tables, 'users' and 'addresses', at once?",
    "answer": "Here's how you can remove multiple tables by their names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"users\", \"addresses\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance called `productsTable`. How can I remove it using this instance?",
    "answer": "Here's how you can remove a table using a `SimpleTable` instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst productsTable = sdb.newTable(\"products\");\n// ... load data ...\nawait sdb.removeTables(productsTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove a single table named 'sales' from the database?",
    "answer": "Here's how you can remove a table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"sales\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove multiple tables, 'orders' and 'items', at once?",
    "answer": "You can remove multiple tables by providing an array of table names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"orders\", \"items\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance called `myTable`. How can I remove it using this instance?",
    "answer": "You can remove a table by passing the `SimpleTable` instance to the `removeTables` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// ... load data ...\nawait sdb.removeTables(table);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a single table named 'orders' and remove all other tables?",
    "answer": "Here's how you can select a single table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"orders\");\n// We select the table named 'orders' and remove all others\nawait sdb.selectTables(\"orders\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have two tables, 'users' and 'posts'. How can I select both of them and remove any other tables?",
    "answer": "Here's how you can select multiple tables by their names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"users\");\n// We select the tables named 'users' and 'posts' and remove all others\nawait sdb.selectTables([\"users\", \"posts\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance called `productsTable`. How can I select this table and remove all others?",
    "answer": "Here's how you can select a table using a `SimpleTable` instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"products\");\n// We select the products table\nconst productsTable = sdb.newTable(\"products\");\nawait sdb.selectTables(productsTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a single table named 'orders' and remove all other tables from the database?",
    "answer": "Here's how you can select a single table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"orders\");\n// We select the table named 'orders' and remove all others\nawait sdb.selectTables(\"orders\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have two tables, 'users' and 'posts'. How can I select both of them and remove any other tables?",
    "answer": "Here's how you can select multiple tables by their names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"users\");\n// We select the tables named 'users' and 'posts' and remove all others\nawait sdb.selectTables([\"users\", \"posts\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance called `productsTable`. How can I select this table and remove all others?",
    "answer": "Here's how you can select a table using a `SimpleTable` instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"products\");\n// We select the productsTable and remove all others\nawait sdb.selectTables(table);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a single table named 'orders' and remove all other tables?",
    "answer": "Here's how you can select a single table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"orders\");\n// We select the table named 'orders' and remove all others\nawait sdb.selectTables(\"orders\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select multiple tables, 'users' and 'transactions', and remove all others?",
    "answer": "Here's how you can select multiple tables by their names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"users\");\n// We select the tables named 'users' and 'transactions' and remove all others\nawait sdb.selectTables([\"users\", \"transactions\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a table using a `SimpleTable` instance?",
    "answer": "Here's how you can select a table using a `SimpleTable` instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst employeesTable = sdb.newTable(\"employees\");\n// We load data into the table (example)\n// await employeesTable.loadData(\"./employee_data.csv\");\n// We select the table using the SimpleTable instance\nawait sdb.selectTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a single table named 'sales' and remove all other tables?",
    "answer": "Here's how you can select a single table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Select the 'sales' table, removing all others\nawait sdb.selectTables(\"sales\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select multiple tables, 'customers' and 'orders', and remove all others?",
    "answer": "Here's how you can select multiple tables by their names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Select the 'customers' and 'orders' tables, removing all others\nawait sdb.selectTables([\"customers\", \"orders\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a table using a `SimpleTable` instance?",
    "answer": "Here's how you can select a table using a `SimpleTable` instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"employees\");\n// Load data into the table (example)\n// await table.loadData(\"./employee_data.csv\");\n// Select the table using the SimpleTable instance\nawait sdb.selectTables(table);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I get a list of all the table names in my database?",
    "answer": "Here's how you can retrieve a list of all table names using the `getTableNames` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Will the table names be returned in a specific order?",
    "answer": "Yes, the table names will be returned in alphabetical order. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An alphabetically sorted array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What data type does the `getTableNames` method return?",
    "answer": "The `getTableNames` method returns a Promise that resolves to a string array. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNamesPromise = sdb.getTableNames();\n\n// Wait for the promise to resolve\nconst tableNames = await tableNamesPromise;\n\n// Log the table names\nconsole.log(tableNames); // Output: An array of strings\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a list of all table names in my SimpleDB instance?",
    "answer": "Here's how you can use the `getTableNames` method to get an array of table names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Does the `getTableNames` method return the table names in a specific order?",
    "answer": "Yes, the `getTableNames` method returns the table names sorted alphabetically. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An alphabetically sorted array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What data type does the `getTableNames` method return?",
    "answer": "The `getTableNames` method returns a Promise that resolves to a string array. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNamesPromise = await sdb.getTableNames();\nconst tableNames = tableNamesPromise; // tableNames is of type string[]\nconsole.log(tableNames); // Output: An array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a list of all table names in my database?",
    "answer": "You can use the `getTableNames` method to get an array of all table names. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Does the `getTableNames` method return the table names in a specific order?",
    "answer": "Yes, the `getTableNames` method returns the table names sorted alphabetically. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An alphabetically sorted array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a list of all the table names in my database?",
    "answer": "You can use the `getTableNames` method to get an array of all table names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Will the table names be returned in a specific order?",
    "answer": "Yes, the `getTableNames` method returns the table names sorted alphabetically. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An alphabetically sorted array of table names\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I see a list of all the tables I've created in my database?",
    "answer": "You can use the `logTableNames` method to display a sorted list of all table names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables (for demonstration)\nawait sdb.newTable(\"employees\");\nawait sdb.newTable(\"customers\");\nawait sdb.newTable(\"products\");\n// Log the table names\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Does the `logTableNames` method change the data in my tables?",
    "answer": "No, the `logTableNames` method only logs the names of the tables to the console. It does not modify any data within the tables. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table and load some data\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./my-data.csv\");\n// Log the table names\nawait sdb.logTableNames();\n// Log the table data to verify it hasn't changed\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Is the output of `logTableNames` sorted in any particular order?",
    "answer": "Yes, the `logTableNames` method sorts the table names alphabetically before logging them. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create tables in a non-alphabetical order\nawait sdb.newTable(\"customers\");\nawait sdb.newTable(\"employees\");\nawait sdb.newTable(\"products\");\n// Log the table names\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all the table names currently stored in the SimpleDB instance?",
    "answer": "Here's how you can log the names of all tables in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Does `logTableNames` return the table names, or just log them to the console?",
    "answer": "The `logTableNames` method logs the table names to the console and does not return them. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Is the output of `logTableNames` sorted in any particular order?",
    "answer": "Yes, the table names are sorted alphabetically before being logged. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all the table names in my SimpleDB instance?",
    "answer": "Here's how you can log the names of all tables in your SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all the table names in my SimpleDB instance?",
    "answer": "Here's how you can log the names of all tables in your SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `logTableNames` method do?",
    "answer": "The `logTableNames` method logs the names of all tables in the SimpleDB instance to the console, sorted alphabetically.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Is the output of `logTableNames` sorted?",
    "answer": "Yes, the table names are sorted alphabetically before being logged to the console.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I get a list of all the tables in my SimpleDB instance?",
    "answer": "Here's how you can retrieve a list of all tables: \n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the tables to the console\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `getTables` method return?",
    "answer": "The `getTables` method returns an array of `SimpleTable` instances. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the type of the tables variable\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Is `getTables` a synchronous or asynchronous method?",
    "answer": "The `getTables` method is asynchronous. Here's how you use it with `await`:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the tables\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a list of all tables within the SimpleDB instance?",
    "answer": "Here's how you can retrieve a list of all tables: \n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the tables to the console\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `getTables` method return, and what is the type of the returned value?",
    "answer": "The `getTables` method returns a Promise that resolves to an array of `SimpleTable` instances. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the type of the tables variable\nconsole.log(tables.constructor.name);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Is the `getTables` method synchronous or asynchronous, and how do I handle the result?",
    "answer": "The `getTables` method is asynchronous and returns a Promise. You should use `await` to handle the result. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the number of tables\nconsole.log(tables.length);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a list of all tables in my SimpleDB instance?",
    "answer": "Here's how you can retrieve a list of all tables using the `getTables` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the tables to the console\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `getTables` method return?",
    "answer": "The `getTables` method returns a promise that resolves to an array of `SimpleTable` instances. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tablesPromise = sdb.getTables();\n// Wait for the promise to resolve\nconst tables = await tablesPromise;\n// Log the tables to the console\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a list of all tables in my SimpleDB instance?",
    "answer": "Here's how you can retrieve a list of all tables using the `getTables` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the tables to the console\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `getTables` method return?",
    "answer": "The `getTables` method returns a promise that resolves to an array of `SimpleTable` instances. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tablesPromise = sdb.getTables();\n// Wait for the promise to resolve\nconst tables = await tablesPromise;\n// Log the tables to the console\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'customers' already exists in my database?",
    "answer": "Here's how you can use the `hasTable` method to check if a table exists by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"customers\" exists\nconst tableExists = await sdb.hasTable(\"customers\");\nconsole.log(tableExists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance called `myTable`. How can I check if it's registered in the database?",
    "answer": "Here's how you can use the `hasTable` method with a `SimpleTable` instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"my_data\");\n// Check if the SimpleTable instance exists in the database\nconst existsInstance = await sdb.hasTable(table);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What does the `hasTable` method return if the table doesn't exist?",
    "answer": "The `hasTable` method returns a Promise that resolves to `false` if the table does not exist. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"nonexistent_table\" exists\nconst tableExists = await sdb.hasTable(\"nonexistent_table\");\nconsole.log(tableExists); // Output: false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'customers' exists in my SimpleDB instance?",
    "answer": "Here's how you can use the `hasTable` method to check for the existence of a table named 'customers':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if the table 'customers' exists\nconst tableExists = await sdb.hasTable(\"customers\");\nconsole.log(tableExists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance called `data_table`. How can I check if this instance is registered within the SimpleDB?",
    "answer": "Here's how you can use the `hasTable` method with a `SimpleTable` instance to check its existence:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"my_data\");\n// Check if the table instance exists\nconst tableExists = await sdb.hasTable(table);\nconsole.log(tableExists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use a number as the table name when checking with `hasTable`?",
    "answer": "Here's how you can check if a table with the name '123' exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if the table '123' exists\nconst tableExists = await sdb.hasTable(\"123\");\nconsole.log(tableExists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'customers' exists in my database?",
    "answer": "Here's how you can check if a table named 'customers' exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"customers\" exists\nconst exists = await sdb.hasTable(\"customers\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a SimpleTable instance called 'products'. How can I check if it exists in the database?",
    "answer": "Here's how you can check if a SimpleTable instance exists in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"my_data\");\n// Check if the SimpleTable instance exists in the database\nconst existsInstance = await sdb.hasTable(table);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'customers' exists in my database?",
    "answer": "Here's how you can check if a table named 'customers' exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if a table named \"customers\" exists\nconst exists = await sdb.hasTable(\"customers\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a `SimpleTable` instance called `data_table`. How can I check if it's registered in the database?",
    "answer": "Here's how you can check if a `SimpleTable` instance is registered:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"my_data\");\n// Check if the SimpleTable instance exists in the database\nconst existsInstance = await sdb.hasTable(table);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library?",
    "answer": "You can install it using Deno or Node.js:\n```\ndeno add jsr:@nshiab/simple-data-analysis\n# Or with Node.js\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a new instance of SimpleDB and a table?",
    "answer": "Here's how to create a SimpleDB instance and a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a new SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table named 'myTable'\nconst table = sdb.newTable(\"myTable\");\n```"
  },
  {
    "question": "How do I load my data into the table?",
    "answer": "You can load your CSV data into the table like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"path/to/your/data.csv\");\n```"
  },
  {
    "question": "How can I perform a basic analysis on my data?",
    "answer": "Here's an example of counting the number of rows in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"path/to/your/data.csv\");\n// Count the number of rows\nconsole.log(\"Total rows:\", await table.countRows());\n```"
  },
  {
    "question": "How do I properly close everything after finishing?",
    "answer": "Make sure to call done() when you're finished:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// ... perform operations ...\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I install the Simple Data Analysis library in my project?",
    "answer": "You can install it using Deno or Node.js. Here are the commands:\n```\ndeno add jsr:@nshiab/simple-data-analysis\n# Or for Node.js\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a new instance of SimpleDB?",
    "answer": "Here's how to create a SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a new SimpleDB instance\nconst sdb = new SimpleDB();\n```"
  },
  {
    "question": "How can I load data from a CSV file into a table?",
    "answer": "You can load data using the `loadData` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a new SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from CSV file\nawait table.loadData(\"./data.csv\");\n// Close everything properly\nawait sdb.done();\n```"
  },
  {
    "question": "How can I install the Simple Data Analysis library?",
    "answer": "You can install the library using Deno or Node.js:\nFor Deno:\n```\ndeno add jsr:@nshiab/simple-data-analysis\n```\nFor Node.js:\n```\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a SimpleDB instance and load data into it?",
    "answer": "Here's how to create a SimpleDB instance and load data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a new SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table and load data\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"path/to/your/data.csv\");\n// Close everything when done\nawait sdb.done();\n```"
  },
  {
    "question": "How do I ensure that all resources are properly closed after using the library?",
    "answer": "Always call `done()` to release resources:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Perform your operations\nawait sdb.done(); // Properly closes all resources\n```"
  },
  {
    "question": "How can I install the Simple Data Analysis library using Deno?",
    "answer": "You can install it with this command:\n```\ndeno add jsr:@nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How can I install the Simple Data Analysis library using Node.js?",
    "answer": "You can install it with this command:\n```\nnpx jsr add @nshiab/simple-data-analysis\n```"
  },
  {
    "question": "How do I create a new table in SimpleDB?",
    "answer": "Here's how to create a new table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I load data into my table?",
    "answer": "Here's how to load data from a CSV file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I perform basic operations on my data?",
    "answer": "After loading your data, you can perform various operations. For example, summarizing the data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We summarize the data\nawait table.summarize({\n  values: \"amount\",\n  categories: \"category\",\n  summaries: [\"count\", \"sum\"]\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I ensure proper cleanup after using SimpleDB?",
    "answer": "Always call `done()` to clean up resources:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// ... perform operations ...\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a SimpleDB instance that uses a specific database file?",
    "answer": "Here's how to specify the database file path:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a specific file\nconst sdb = new SimpleDB({\n  file: \"mydatabase.db\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I overwrite an existing database file?",
    "answer": "Here's how to overwrite the database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with overwrite enabled\nconst sdb = new SimpleDB({\n  file: \"mydatabase.db\",\n  overwrite: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I log the total execution duration?",
    "answer": "Here's how to enable duration logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with duration logging\nconst sdb = new SimpleDB({\n  logDuration: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I control the number of rows displayed when logging a table?",
    "answer": "Here's how to set the number of rows to display:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with row limit\nconst sdb = new SimpleDB({\n  nbRowsToLog: 10\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I limit the number of characters displayed for text-based cells?",
    "answer": "Here's how to set the maximum characters per cell:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with character limit\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 20\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I include data types when logging a table?",
    "answer": "Here's how to enable type display in logs:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with types enabled\nconst sdb = new SimpleDB({\n  types: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable verbose cache-related messages?",
    "answer": "Here's how to enable verbose cache logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with verbose cache\nconst sdb = new SimpleDB({\n  cacheVerbose: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable debugging information?",
    "answer": "Here's how to enable debug logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with debug enabled\nconst sdb = new SimpleDB({\n  debug: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I use DuckDB's external file cache?",
    "answer": "Here's how to enable DuckDB's file cache:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with DuckDB cache\nconst sdb = new SimpleDB({\n  duckDbCache: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I display a progress bar for long-running operations?",
    "answer": "Here's how to enable the progress bar:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with progress bar\nconst sdb = new SimpleDB({\n  progressBar: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a SimpleDB instance with specific options?",
    "answer": "Here's an example of creating a SimpleDB instance with various configuration options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with custom options\nconst sdb = new SimpleDB({\n  file: \"mydatabase.db\",\n  overwrite: true,\n  logDuration: true,\n  nbRowsToLog: 10,\n  nbCharactersToLog: 50,\n  types: true,\n  cacheVerbose: false,\n  debug: false,\n  duckDbCache: true,\n  progressBar: true\n});\n// We close everything\nawait sdb.done();\n```\nThis example shows how to configure a SimpleDB instance with various settings."
  },
  {
    "question": "How can I create an in-memory database?",
    "answer": "Here's how you can create an in-memory database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with default options (in-memory)\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```\nBy not specifying a file path, the database will be created in memory."
  },
  {
    "question": "How can I force overwrite an existing database file?",
    "answer": "Here's how you can configure SimpleDB to overwrite an existing database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with overwrite enabled\nconst sdb = new SimpleDB({\n  file: \"mydatabase.db\",\n  overwrite: true\n});\n// We close everything\nawait sdb.done();\n```\nThe `overwrite` option will delete the existing database file if it exists."
  },
  {
    "question": "How can I enable logging of execution duration?",
    "answer": "Here's how you can enable logging of total execution duration:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with logDuration enabled\nconst sdb = new SimpleDB({\n  logDuration: true\n});\n// We close everything\nawait sdb.done();\n```\nThe `logDuration` option will log the total execution time of operations."
  },
  {
    "question": "How can I control the number of rows displayed when logging a table?",
    "answer": "Here's how you can set the number of rows to display when logging a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with nbRowsToLog set to 5\nconst sdb = new SimpleDB({\n  nbRowsToLog: 5\n});\n// We close everything\nawait sdb.done();\n```\nThe `nbRowsToLog` option controls how many rows are shown when logging a table."
  },
  {
    "question": "How can I limit the number of characters displayed for text-based cells?",
    "answer": "Here's how you can set the maximum number of characters to display for text-based cells:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with nbCharactersToLog set to 20\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 20\n});\n// We close everything\nawait sdb.done();\n```\nThe `nbCharactersToLog` option limits the length of text-based cells when logging."
  },
  {
    "question": "How can I include data types when logging a table?",
    "answer": "Here's how you can enable data type display when logging a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with types enabled\nconst sdb = new SimpleDB({\n  types: true\n});\n// We close everything\nawait sdb.done();\n```\nThe `types` option will include data type information when logging tables."
  },
  {
    "question": "How can I enable verbose cache logging?",
    "answer": "Here's how you can enable verbose cache-related messages:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with cacheVerbose enabled\nconst sdb = new SimpleDB({\n  cacheVerbose: true\n});\n// We close everything\nawait sdb.done();\n```\nThe `cacheVerbose` option enables detailed logging of cache operations."
  },
  {
    "question": "How can I enable debugging mode?",
    "answer": "Here's how you can enable debug logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with debug enabled\nconst sdb = new SimpleDB({\n  debug: true\n});\n// We close everything\nawait sdb.done();\n```\nThe `debug` option enables verbose logging for debugging purposes."
  },
  {
    "question": "How can I enable DuckDB's external file cache?",
    "answer": "Here's how you can enable DuckDB's external file cache:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with duckDbCache enabled\nconst sdb = new SimpleDB({\n  duckDbCache: true\n});\n// We close everything\nawait sdb.done();\n```\nThe `duckDbCache` option enables DuckDB's external file cache."
  },
  {
    "question": "How can I disable the progress bar?",
    "answer": "Here's how you can disable the progress bar:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with progressBar disabled\nconst sdb = new SimpleDB({\n  progressBar: false\n});\n// We close everything\nawait sdb.done();\n```\nThe `progressBar` option controls whether to display progress bars during operations."
  },
  {
    "question": "How can I specify the path to my database file when creating a SimpleDB instance?",
    "answer": "You can pass the file path in the options object. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a specific file\nconst sdb = new SimpleDB({\n  file: \"./my-database.db\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I overwrite an existing database file?",
    "answer": "You can set the overwrite flag in the options. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that overwrites if exists\nconst sdb = new SimpleDB({\n  file: \"./my-database.db\",\n  overwrite: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable logging of the total execution duration?",
    "answer": "You can set the logDuration flag in the options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with duration logging\nconst sdb = new SimpleDB({\n  logDuration: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I control the number of rows displayed when logging a table?",
    "answer": "You can set nbRowsToLog in the options. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with custom row logging\nconst sdb = new SimpleDB({\n  nbRowsToLog: 10\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I limit the number of characters displayed for text-based cells?",
    "answer": "You can set nbCharactersToLog in the options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with character limit\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 50\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I include data types when logging a table?",
    "answer": "You can set the types flag in the options. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with type logging\nconst sdb = new SimpleDB({\n  types: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable verbose cache-related messages?",
    "answer": "You can set cacheVerbose in the options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with verbose caching\nconst sdb = new SimpleDB({\n  cacheVerbose: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable debugging information?",
    "answer": "You can set the debug flag in the options. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with debugging\nconst sdb = new SimpleDB({\n  debug: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable DuckDB's external file cache?",
    "answer": "You can set duckDbCache in the options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with DuckDB cache\nconst sdb = new SimpleDB({\n  duckDbCache: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I display a progress bar for long-running operations?",
    "answer": "You can set progressBar in the options. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with progress bar\nconst sdb = new SimpleDB({\n  progressBar: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a SimpleDB instance with specific options?",
    "answer": "Here's how you can initialize SimpleDB with various configuration options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with custom settings\nconst sdb = new SimpleDB({\n  file: './mydatabase.db',\n  overwrite: true,\n  logDuration: true,\n  nbRowsToLog: 10,\n  nbCharactersToLog: 50,\n  types: true,\n  cacheVerbose: false,\n  debug: true,\n  duckDbCache: true,\n  progressBar: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I initialize SimpleDB with a specific database file?",
    "answer": "Here's how you can create a SimpleDB instance with a specified database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a specific database file\nconst sdb = new SimpleDB({\n  file: './mydatabase.db'\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I configure SimpleDB to overwrite an existing database?",
    "answer": "Here's how you can enable overwriting of an existing database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with overwrite enabled\nconst sdb = new SimpleDB({\n  file: './mydatabase.db',\n  overwrite: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable logging of the total execution duration in SimpleDB?",
    "answer": "Here's how you can enable duration logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with duration logging enabled\nconst sdb = new SimpleDB({\n  logDuration: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I set the number of rows to display when logging a table?",
    "answer": "Here's how you can configure the number of rows to show when logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with row limit for logs\nconst sdb = new SimpleDB({\n  nbRowsToLog: 5\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I set the maximum number of characters to display for text cells?",
    "answer": "Here's how you can limit the number of characters in text cells:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with character limit for text\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 20\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I include data types when logging tables?",
    "answer": "Here's how you can enable type display in logs:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with types enabled\nconst sdb = new SimpleDB({\n  types: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable verbose logging for cache operations?",
    "answer": "Here's how you can enable verbose cache logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with verbose cache logs\nconst sdb = new SimpleDB({\n  cacheVerbose: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable debugging information in SimpleDB?",
    "answer": "Here's how you can enable debug logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with debugging enabled\nconst sdb = new SimpleDB({\n  debug: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I configure SimpleDB to use DuckDB's external cache?",
    "answer": "Here's how you can enable DuckDB's external cache:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with DuckDB cache enabled\nconst sdb = new SimpleDB({\n  duckDbCache: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I enable progress bars for long-running operations?",
    "answer": "Here's how you can show progress bars during operations:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with progress bars enabled\nconst sdb = new SimpleDB({\n  progressBar: true\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a new table with a default name?",
    "answer": "Here's how to create a new table without specifying a name, which will generate a default name like 'table1', 'table2', etc.:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with a default name\nconst dataTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a new table with a specific name?",
    "answer": "Here's how to create a new table with a custom name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table named 'employees'\nconst employeesTable = sdb.newTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a table with specific projections for geospatial data?",
    "answer": "Here's how to create a table with custom projections:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with specific projections for geospatial data\nconst geoTable = sdb.newTable(\"geoData\", {\n  lat: \"latitude\",\n  lon: \"longitude\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create multiple tables in the same database?",
    "answer": "Here's how to create and manage multiple tables within a single SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two different tables\nconst salesTable = sdb.newTable(\"salesData\");\nconst customerTable = sdb.newTable(\"customerInfo\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a default name?",
    "answer": "Here's how to create a new table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table with a default name (e.g., \"table1\")\nconst dataTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with a specific name?",
    "answer": "Here's how to create a new table with a specific name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table named \"employees\"\nconst employeesTable = sdb.newTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a new table with projections for geospatial data?",
    "answer": "Here's how to create a new table with projections:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table with specific projections for geospatial data\nconst geoTable = sdb.newTable(\"geoData\", {\n  \"location\": \"EPSG:4326\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a new table with a specific name?",
    "answer": "You can specify the table name when calling `newTable()`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with the name 'salesData'\nconst salesTable = sdb.newTable(\"salesData\");\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I create multiple tables within the same database?",
    "answer": "Yes, you can create as many tables as needed. Here's how to create two different tables:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two different tables\nconst table1 = sdb.newTable(\"tableA\");\nconst table2 = sdb.newTable(\"tableB\");\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I create a table with geospatial projections?",
    "answer": "You can define projections when creating the table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with specific geospatial projections\nconst geoTable = sdb.newTable(\"geoData\", {\n  \"location\": \"EPSG:4326\",\n  \"boundary\": \"EPSG:3857\"\n});\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I create a new table with a specific name?",
    "answer": "You can specify the table name when creating it. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with a specific name\nconst myTable = sdb.newTable(\"myDataTable\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if I don't provide a name when creating a new table?",
    "answer": "A default name will be generated for the table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with a default name\nconst defaultTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I specify geospatial projections when creating a new table?",
    "answer": "You can pass a projections object to define how geospatial columns are projected. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with specific projections for geospatial data\nconst geoTable = sdb.newTable(\"geoData\", {\n  \"geometry\": \"EPSG:4326\"\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve an existing table using getTable?",
    "answer": "Here's how you can retrieve an existing table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the existing table named 'myTable'\nconst table = await sdb.getTable('myTable');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "After retrieving a table, how can I load data into it?",
    "answer": "You can load data into the retrieved table using loadData. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the existing table named 'myTable'\nconst table = await sdb.getTable('myTable');\n// Load data into the retrieved table\nawait table.loadData('./data.csv');\n// Log the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I retrieve an existing table using getTable?",
    "answer": "Here's how you can retrieve an existing table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the existing table named 'myExistingTable'\nconst table = await sdb.getTable('myExistingTable');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if I try to get a table that doesn't exist?",
    "answer": "If the table doesn't exist, it will throw an error. Here's how you can handle it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\ntry {\n  // Attempt to retrieve a non-existent table\n  const table = await sdb.getTable('nonExistentTable');\n} catch (error) {\n  console.error('Table not found:', error);\n}\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use getTable to modify an existing table?",
    "answer": "Yes, you can retrieve and modify an existing table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the existing table\nconst table = await sdb.getTable('myTable');\n// Load new data into the retrieved table\nawait table.loadData('./updated_data.csv');\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve an existing table from my database?",
    "answer": "You can use the `getTable` method to get a table by its name. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the existing table named 'myTable'\nconst table = await sdb.getTable('myTable');\n// Log the table to see its contents\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have multiple tables; how do I get a specific one by its name?",
    "answer": "Use `getTable` with the exact name of the table you want. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the 'sales' table\nconst salesTable = await sdb.getTable('sales');\n// Log the sales data\nawait salesTable.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "After creating a table, how do I retrieve it again?",
    "answer": "You can retrieve it using `getTable` with the same name you used when creating it. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table named 'employees'\nconst employeesTable = sdb.newTable('employees');\n// Later, retrieve the same table\nconst retrievedTable = await sdb.getTable('employees');\n// Log the table to verify\nawait retrievedTable.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve an existing table named 'sales'?",
    "answer": "Here's how you can retrieve a table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the 'sales' table\nconst salesTable = await sdb.getTable(\"sales\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a table named 'employees'. How can I load and view its data?",
    "answer": "Here's how you can retrieve the table and log its contents:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the 'employees' table\nconst employeesTable = await sdb.getTable(\"employees\");\n// Log the first few rows of the table\nawait employeesTable.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve a table and filter its data?",
    "answer": "Here's how you can retrieve a table and filter it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the 'customers' table\nconst customersTable = await sdb.getTable(\"customers\");\n// Filter rows where age is greater than 30\nawait customersTable.filter({\n  column: \"age\",\n  condition: \"GreaterThan\",\n  value: 30\n});\n// Log the filtered results\nawait customersTable.logTable();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table by its name?",
    "answer": "You can remove a table by specifying its name as a string. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove the table named 'employees'\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I remove multiple tables at once?",
    "answer": "Yes, you can remove multiple tables by passing an array of table names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables at once\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove a table using its SimpleTable instance?",
    "answer": "You can pass the SimpleTable instance directly to remove it. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and define the employees table\nconst employeesTable = sdb.newTable(\"employees\");\n// ... (load data into employeesTable if needed) ...\n// Remove the employees table using its instance\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove a single table by its name?",
    "answer": "You can remove a table by specifying its name as a string. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove the table named 'employees'\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I remove multiple tables at once?",
    "answer": "Yes, you can pass an array of table names to remove multiple tables. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Is it possible to remove a table using its SimpleTable instance?",
    "answer": "Yes, you can pass the SimpleTable instance directly. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and remove a table using its instance\nconst employeesTable = sdb.newTable(\"employees\");\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a single table from my database?",
    "answer": "Here's how you can remove a single table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove the table named 'employees'\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I remove multiple tables at once?",
    "answer": "Yes, you can remove multiple tables by passing an array of table names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables at once\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I remove a table using its instance?",
    "answer": "You can pass the SimpleTable instance to remove it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and then remove a table using its instance\nconst employeesTable = sdb.newTable(\"employees\");\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove a single table from my database by its name?",
    "answer": "Here's how you can remove a table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove the table named 'employees'\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove multiple tables from my database by their names?",
    "answer": "Here's how you can remove multiple tables by their names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove the tables named 'customers' and 'products'\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I remove a table from my database using its instance?",
    "answer": "Here's how you can remove a table using its instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table instance\nconst employeesTable = sdb.newTable(\"employees\");\n// ... load data ...\n// Remove the table using its instance\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a single table by its name using selectTables?",
    "answer": "Here's how to select a table by name, removing others:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create multiple tables for demonstration\nconst table1 = sdb.newTable(\"tableA\");\nconst table2 = sdb.newTable(\"tableB\");\n// Select only tableA\nawait sdb.selectTables(\"tableA\");\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select multiple tables using their names?",
    "answer": "You can pass an array of table names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create multiple tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nconst tableC = sdb.newTable(\"tableC\");\n// Select tableA and tableB\nawait sdb.selectTables([\"tableA\", \"tableB\"]);\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use SimpleTable instances instead of names when selecting tables?",
    "answer": "Yes, you can pass the table instances directly:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create multiple tables\nconst table1 = sdb.newTable(\"table1\");\nconst table2 = sdb.newTable(\"table2\");\n// Select using instances\nawait sdb.selectTables([table1, table2]);\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if I try to select a non-existent table?",
    "answer": "It will throw an error. Here's how to handle it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\ntry {\n  // Try to select a non-existent table\n  await sdb.selectTables(\"nonExistentTable\");\n} catch (error) {\n  console.error(\"Error selecting table:\", error);\n}\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a specific table by its name using `selectTables`?",
    "answer": "Here's how you can select a table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Select the table named 'employees'\nawait sdb.selectTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I keep multiple tables in my database using `selectTables`?",
    "answer": "You can pass an array of table names to select multiple tables:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Select multiple tables by name\nawait sdb.selectTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I select a table using its SimpleTable instance?",
    "answer": "Yes, you can pass the SimpleTable instance directly:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and select a table using its instance\nconst employeesTable = sdb.newTable(\"employees\");\nawait sdb.selectTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select a single table by its name?",
    "answer": "Here's how you can select a table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and load data into multiple tables\nconst employeesTable = sdb.newTable(\"employees\");\nawait employeesTable.loadData(\"./employees.csv\");\nconst customersTable = sdb.newTable(\"customers\");\nawait customersTable.loadData(\"./customers.csv\");\n// Select only the 'employees' table\nawait sdb.selectTables(\"employees\");\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select multiple tables by their names?",
    "answer": "You can pass an array of table names to `selectTables`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and load data into multiple tables\nconst employeesTable = sdb.newTable(\"employees\");\nawait employeesTable.loadData(\"./employees.csv\");\nconst customersTable = sdb.newTable(\"customers\");\nawait customersTable.loadData(\"./customers.csv\");\nconst productsTable = sdb.newTable(\"products\");\nawait productsTable.loadData(\"./products.csv\");\n// Select 'employees' and 'customers' tables\nawait sdb.selectTables([\"employees\", \"customers\"]);\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I select a table using its SimpleTable instance?",
    "answer": "Yes, you can pass the SimpleTable instance directly:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and load data into multiple tables\nconst employeesTable = sdb.newTable(\"employees\");\nawait employeesTable.loadData(\"./employees.csv\");\nconst customersTable = sdb.newTable(\"customers\");\nawait customersTable.loadData(\"./customers.csv\");\n// Select the 'employees' table using its instance\nawait sdb.selectTables(employeesTable);\n// Close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I select a single table by name to keep it in my database?",
    "answer": "Here's how you can select a specific table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Select the table named 'employees'\nawait sdb.selectTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I select multiple tables by their names?",
    "answer": "You can pass an array of table names to keep multiple tables:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Select the tables named 'customers' and 'products'\nawait sdb.selectTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I select a table using its SimpleTable instance instead of its name?",
    "answer": "Yes, you can pass the SimpleTable instance directly:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and select a table using its instance\nconst employeesTable = sdb.newTable(\"employees\");\nawait sdb.selectTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I get all the table names in my database?",
    "answer": "You can use the `getTableNames` method to retrieve an array of all table names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names in the database\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: list of table names\n// We close everything\nawait sdb.done();\n```\n"
  },
  {
    "question": "How can I iterate over each table name returned by getTableNames()?",
    "answer": "You can loop through the array of table names using a for loop. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names in the database\nconst tableNames = await sdb.getTableNames();\n// Iterate over each table name\nfor (const tableName of tableNames) {\n  console.log(`Processing table: ${tableName}`);\n}\n// We close everything\nawait sdb.done();\n```\n"
  },
  {
    "question": "How do I retrieve all table names in my database?",
    "answer": "You can use the `getTableNames` method to get an array of all table names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names in the database\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I work with the list of table names after retrieving them?",
    "answer": "Once you have the table names, you can iterate over them or perform any operations. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names in the database\nconst tableNames = await sdb.getTableNames();\n// Process each table name\nfor (const tableName of tableNames) {\n  console.log(`Processing table: ${tableName}`);\n}\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I get a list of all tables in my database?",
    "answer": "You can use the `getTableNames` method to retrieve an array of all table names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all table names in alphabetical order?",
    "answer": "The `getTableNames` method returns table names sorted alphabetically. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names in alphabetical order\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all tables in my database?",
    "answer": "Here's how you can get all table names from your database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(\"Tables in the database:\", tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a specific table exists?",
    "answer": "You can check for a table's existence like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\n// Check if 'myTable' exists\nif (tableNames.includes('myTable')) {\n  console.log('The table exists.');\n} else {\n  console.log('The table does not exist.');\n}\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I see all the tables in my database?",
    "answer": "Here's how you can log all table names in your database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nconst table1 = sdb.newTable(\"employees\");\nconst table2 = sdb.newTable(\"customers\");\n// Log all table names\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I want to check if my tables exist. How can I list them?",
    "answer": "You can use `logTableNames` to verify your table exists:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table\nconst table = sdb.newTable(\"myTable\");\n// Check if the table exists by logging names\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I log all table names in my SimpleDB instance?",
    "answer": "Here's how you can log all table names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a couple of tables\nconst table1 = sdb.newTable(\"tableA\");\nconst table2 = sdb.newTable(\"tableB\");\n// We log the table names\nawait sdb.logTableNames();\n// Example output: SimpleDB - Tables:  [\"tableA\",\"tableB\"]\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use logTableNames to check if my database has any tables?",
    "answer": "Yes, you can verify if there are tables in your database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// No tables created yet\nawait sdb.logTableNames();\n// Example output: SimpleDB - Tables: []\n// Create a table and check again\nconst table = sdb.newTable(\"myTable\");\nawait sdb.logTableNames();\n// Example output: SimpleDB - Tables: [\"myTable\"]\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How does logTableNames handle multiple tables?",
    "answer": "It logs all table names sorted alphabetically:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create tables in different order\nconst tableC = sdb.newTable(\"tableC\");\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Log the table names\nawait sdb.logTableNames();\n// Example output: SimpleDB - Tables:  [\"tableA\",\"tableB\",\"tableC\"]\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all tables in my database?",
    "answer": "You can use the `logTableNames` method to display all table names. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nconst table1 = sdb.newTable(\"tableA\");\nconst table2 = sdb.newTable(\"tableB\");\n// Log all table names\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```\nThis will log the names of all tables in your database."
  },
  {
    "question": "What happens if I create multiple tables and want to see their names?",
    "answer": "The `logTableNames` method will show all table names regardless of when they were created. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create multiple tables\nsdb.newTable(\"sales\");\nsdb.newTable(\"customers\");\nsdb.newTable(\"products\");\n// Log all table names\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```\nThis will display the names of all tables in alphabetical order."
  },
  {
    "question": "How can I see the names of all tables in my database?",
    "answer": "You can use the `logTableNames` method to list all table names. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst employees = sdb.newTable(\"employees\");\nconst customers = sdb.newTable(\"customers\");\n// We load data into both tables\nawait employees.loadData(\"./data/employees.csv\");\nawait customers.loadData(\"./data/customers.csv\");\n// We log all table names\nawait sdb.logTableNames();\n// Example output: SimpleDB - Tables:  [\"employees\",\"customers\"]\n// We close everything\nawait sdb.done();\n```\nThis will show you the names of all tables in your database."
  },
  {
    "question": "How can I get all the tables in my database?",
    "answer": "You can use the `getTables` method to retrieve all SimpleTable instances. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all tables in the database\nconst tables = await sdb.getTables();\nconsole.log('All tables:', tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have multiple tables; how can I log all of them?",
    "answer": "You can loop through the array returned by `getTables` and log each table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all tables in the database\nconst tables = await sdb.getTables();\n// Log each table\nfor (const table of tables) {\n  console.log('Table:', table.name);\n  await table.logTable();\n}\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all tables in my database?",
    "answer": "You can use the `getTables` method to get an array of all SimpleTable instances. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all tables in the database\nconst tables = await sdb.getTables();\nconsole.log(\"Tables in the database:\", tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I access specific information from each table?",
    "answer": "You can loop through the array of tables returned by `getTables` and access their properties. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all tables in the database\nconst tables = await sdb.getTables();\nconsole.log(\"Table names:\");\ntables.forEach(table => {\n  console.log(table.name);\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I retrieve all tables in my database?",
    "answer": "Here's how you can get all tables in your database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nconst table1 = sdb.newTable(\"table1\");\nconst table2 = sdb.newTable(\"table2\");\n// Get all tables\nconst tables = await sdb.getTables();\nconsole.log(\"List of tables:\", tables);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What is the method to list all existing tables?",
    "answer": "You can use the `getTables` method to list all tables. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nsdb.newTable(\"sales\");\nsdb.newTable(\"inventory\");\n// Get and list all tables\nconst tables = await sdb.getTables();\ntables.forEach(table => {\n  console.log(`Table name: ${table.name}`);\n});\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How do I get an array of all SimpleTable instances?",
    "answer": "Use the `getTables` method to retrieve an array of all tables. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nsdb.newTable(\"customers\");\nsdb.newTable(\"orders\");\n// Get all table instances\nconst tablesArray = await sdb.getTables();\nconsole.log(\"Number of tables:\", tablesArray.length);\nconsole.log(\"First table in array:\", tablesArray[0]);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I get all table instances from my SimpleDB database?",
    "answer": "Here's how you can retrieve all tables in your database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nconst table1 = sdb.newTable(\"table1\");\nconst table2 = sdb.newTable(\"table2\");\n// Get all tables\nconst tables = await sdb.getTables();\nconsole.log(\"Number of tables:\", tables.length);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check how many tables are currently open in my database?",
    "answer": "You can get the number of tables by checking the length of the array returned by `getTables`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nsdb.newTable(\"table1\");\nsdb.newTable(\"table2\");\n// Get the number of tables\nconst tableCount = (await sdb.getTables()).length;\nconsole.log(\"Number of tables:\", tableCount);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I list all table names in my database?",
    "answer": "Here's how you can get an array of all table names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nsdb.newTable(\"table1\");\nsdb.newTable(\"table2\");\n// Get all table names\nconst tableNames = (await sdb.getTables()).map(table => table.name);\nconsole.log(\"Table names:\", tableNames);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'employees' exists in my database?",
    "answer": "Here's how you can check for the existence of a table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if 'employees' table exists\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I use a SimpleTable instance to check if it exists in the database?",
    "answer": "Yes, you can pass a SimpleTable instance to check its existence:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if the instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if I try to check for a table that doesn't exist?",
    "answer": "The method will return false as shown in this example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check for a non-existent table\nconst exists = await sdb.hasTable(\"nonexistent_table\");\nconsole.log(exists); // Output: false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'employees' exists in my database?",
    "answer": "You can use the `hasTable` method with the table name as a string. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if 'employees' table exists\nconst exists = await sdb.hasTable(\"employees\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a SimpleTable instance; how do I verify it's registered in the database?",
    "answer": "You can pass the SimpleTable instance to `hasTable`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if the instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'sales' exists in my database?",
    "answer": "You can use the `hasTable` method to check for the existence of a table by name. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if 'sales' table exists\nconst exists = await sdb.hasTable(\"sales\");\nconsole.log('Does the sales table exist?', exists);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "Can I check if a specific SimpleTable instance exists in the database?",
    "answer": "Yes, you can pass a SimpleTable instance to `hasTable`. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if the instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log('Does this table instance exist?', existsInstance);\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "What happens if I check for a table that doesn't exist?",
    "answer": "The `hasTable` method will return false. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check for a non-existent table\nconst exists = await sdb.hasTable(\"nonexistent_table\");\nconsole.log('Does this table exist?', exists); // Output: false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I ensure a table is created only if it doesn't already exist?",
    "answer": "You can use `hasTable` to check before creating the table. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if 'my_table' exists\nconst exists = await sdb.hasTable(\"my_table\");\nif (!exists) {\n  // Create the table since it doesn't exist\n  const table = sdb.newTable(\"my_table\");\n  console.log('New table created');\n} else {\n  console.log('Table already exists');\n}\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "How can I check if a table named 'sales' exists in my database?",
    "answer": "Here's how you can check for the existence of a table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Check if 'sales' table exists\nconst exists = await sdb.hasTable(\"sales\");\nconsole.log(exists); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  },
  {
    "question": "I have a SimpleTable instance. How can I verify if it's registered in the database?",
    "answer": "You can check using the SimpleTable instance like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table instance\nconst myTable = sdb.newTable(\"my_data\");\n// Check if the instance exists in the database\nconst existsInstance = await sdb.hasTable(myTable);\nconsole.log(existsInstance); // Output: true or false\n// We close everything\nawait sdb.done();\n```"
  }
]