{"prompt":"Is getNbRows an asynchronous method?","completion":"Yes, getNbRows is asynchronous and must be awaited.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Await the promise returned by getNbRows\nconst nbRows = await table.getNbRows();\nconsole.log(`Rows: ${nbRows}`);\nawait sdb.done();\n```"}
{"prompt":"How can I create an index on the embeddings column to speed up similarity searches?","completion":"Here is how you can create an index on the embeddings column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n  { food: \"pasta\" },\n  { food: \"salad\" }\n]);\n// Generate embeddings for the \"food\" column\nawait table.aiEmbeddings(\"food\", \"embeddings\");\n// Find the 3 most similar foods to \"italian food\" and create an index\nconst similarFoods = await table.aiVectorSimilarity(\n  \"italian food\",\n  \"embeddings\",\n  3,\n  { createIndex: true }\n);\n// Log the results\nawait similarFoods.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add a column that identifies the geometry type of each feature in my geospatial data?","completion":"You can use the `typeGeo` method to add a new column with the geometry types. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Add a new column 'geometryType' with the type of each geometry\nawait table.typeGeo(\"geometryType\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nThis will add a new column named 'geometryType' that contains the type of each geometry (e.g., POINT, LINESTRING, POLYGON)."}
{"prompt":"How can I filter rows where 'lastPurchaseDate' is on or after '2023-01-01'?","completion":"You can use the `>=` operator to filter dates. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We filter the table based on the conditions\nawait table.filter(\"lastPurchaseDate >= '2023-01-01'\");\n// We log the table to see the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a map from geospatial data and save it as a PNG file?","completion":"Here's how you can generate a map from geospatial data and save it as a PNG file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { geo, plot } from \"@observablehq/plot\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./CanadianProvincesAndTerritories.geojson\");\n// We define the map function\nconst mapFunction = (geoJsonData: { features: unknown[] }) =>\n  plot({\n    projection: {\n      type: \"conic-conformal\",\n      rotate: [100, -60],\n      domain: geoJsonData,\n    },\n    marks: [\n      geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" }),\n    ],\n  });\n// We save the map to a PNG file\nconst outputPath = \"./output/map.png\";\nawait table.writeMap(mapFunction, outputPath);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use logTableNames to check if my database has any tables?","completion":"Yes, you can verify if there are tables in your database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// No tables created yet\nawait sdb.logTableNames();\n// Example output: SimpleDB - Tables: []\n// Create a table and check again\nconst table = sdb.newTable(\"myTable\");\nawait sdb.logTableNames();\n// Example output: SimpleDB - Tables: [\"myTable\"]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to log the extent of a non-numeric column?","completion":"The method will throw an error since it expects a numeric column. Here's how you can handle such cases:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"path/to/your/data.csv\");\ntry {\n  // Attempt to log extent of non-numeric column\n  await table.logExtent(\"nonNumericColumn\");\n} catch (error) {\n  console.error(\"Error:\", error);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What are the different types of joins I can perform?","completion":"You can perform 'inner', 'left', 'right', or 'full' joins. Here's an example of an inner join, storing the result in a new table named 'tableC':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into the tables (replace with your actual data loading)\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform an inner join, storing the result in a new table\nconst tableC = await tableA.join(tableB, { type: \"inner\", outputTable: \"tableC\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I convert all string values in one column to uppercase?","completion":"Here's how you can convert a single column to uppercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Convert 'name' column to uppercase\nawait table.upper(\"name\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I export the database to a DuckDB file?","completion":"You can export to a DuckDB file by specifying a .db extension in the file path.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.writeDB(\"./my_exported_database.db\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the `decimals` option when calling `getQuantile`?","completion":"If you don't specify the `decimals` option, the result will not be rounded. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data here. For example:\n// await table.loadData(\"./data.csv\");\n\n// Get the 25th percentile of 'column1' without rounding\nconst firstQuartile = await table.getQuantile(\"column1\", 0.25);\nconsole.log(firstQuartile);\n\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select the first 100 rows of a table without skipping any rows?","completion":"Use `selectRows(100)` to get the first 100 rows directly in the current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.selectRows(100);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join and store the result in a new table with a generated name?","completion":"Set `outputTable` to `true` to create a new table with a generated name:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into both tables\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform a cross join and store the result in a new table\nconst resultTable = await tableA.crossJoin(tableB, { outputTable: true });\n// View the new table\nawait resultTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows where a specific column is not equal to a certain value?","completion":"Here's how you can filter rows using a simple condition:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Keep only rows where the 'fruit' column is not 'apple'\nawait table.filter(`fruit != 'apple'`);\n// We log the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I select a single column in a table using the selectColumns method?","completion":"Here's how you can select a single column in a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We select a single column: 'productName'\nawait table.selectColumns(\"productName\");\n// We log the table to see the selected column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What value does `hasColumn` return if the column does not exist?","completion":"If the column is not present, `hasColumn` resolves to `false`. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst hasSalary = await table.hasColumn(\"salary\");\nconsole.log(hasSalary); // false if \"salary\" column is missing\nawait sdb.done();\n```"}
{"prompt":"How can I keep only the rows that *have* missing values?","completion":"You can use the `invert` option to keep only the rows with missing values. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We keep only rows with missing values\nawait table.removeMissing({ invert: true });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the proportion of each value in a column relative to the total sum of that column?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file (assuming it has a column named 'column1')\nawait table.loadData(\"./data.csv\");\n// We compute the proportion of each value in 'column1' relative to the total sum of 'column1'\n// and store it in a new column 'perc'\nawait table.proportionsVertical(\"column1\", \"perc\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round the correlation values to a specific number of decimal places?","completion":"To round the results, specify the decimals option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations with 2 decimal places\nawait table.correlations({ decimals: 2 });\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I sort a single column in ascending order?","completion":"Use an order object mapping the column name to \"asc\".\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.sort({ column1: \"asc\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I load a single local CSV file into a SimpleTable?","completion":"Load a local CSV file by calling `loadData` with the file path:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a local CSV file\nawait table.loadData(\"./some-data.csv\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I trim whitespace from the end of multiple columns, 'description' and 'notes'?","completion":"Here's how you can right-trim whitespace from multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We right-trim whitespace from 'description' and 'notes'\nawait table.trim([\"description\", \"notes\"], { method: \"rightTrim\" });\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the specified column contains non‑numeric values?","completion":"`getSum` will reject the promise if it encounters non‑numeric data. You can catch the error like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"mixedTable\");\nawait table.loadData(\"./mixed.csv\");\ntry {\n  const sum = await table.getSum(\"mixedColumn\");\n  console.log(sum);\n} catch (err) {\n  console.error(\"Error calculating sum:\", err.message);\n}\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use both `entireString` and `regex` options together?","completion":"The method will throw an error because these options are mutually exclusive. To avoid this, choose one option:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Correct usage: only regex\nawait table.replace(\"column1\", { \"\\\\d+\": \"-\" }, { regex: true });\n// Incorrect usage (will error): both options set\n// await table.replace(\"column1\", { \"kilograms\": \"kg\" }, { entireString: true, regex: true });\nawait sdb.done();\n```"}
{"prompt":"Can I update multiple columns at once using `updateWithJS`?","completion":"Yes, you can modify multiple columns in a single call. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start the SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and load the table\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\");\n// Update multiple columns\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    price: d.price * 1.05, // Increase by 5%\n    discount: d.discount ? d.discount + 2 : 0,\n  }));\n  return modifiedRows;\n});\n// Log the updated data\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I clone a column within specific categories?","completion":"You can partition the data by one or more columns so the offset is applied independently within each group:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Clone \"temperature\" to \"prev_temp_by_city\" offsetting by 1 row within each \"city\"\nawait table.cloneColumnWithOffset(\"temperature\", \"prev_temp_by_city\", {\n  offset: 1,\n  categories: \"city\",\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I include data types when logging a table?","completion":"Enable the types flag:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that logs data types\nconst sdb = new SimpleDB({\n  types: true\n});\n// ... perform operations ...\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column when using `unnestGeo`?","completion":"The method will automatically find and use the geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We unnest geometries in the default column\nawait table.unnestGeo();\n// We log the results to see the transformed geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I retrieve data using a custom query?","completion":"Yes, you can retrieve data by setting `returnDataFrom` to \"query\":\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load some sample data\nconst table = sdb.newTable(\"sales\");\nawait table.loadData(\"./sales.csv\");\n// Execute a query and return the results\nconst recentSales = await sdb.customQuery(\n  \"SELECT * FROM sales WHERE year > 2020\",\n  { returnDataFrom: \"query\" }\n);\nconsole.log(recentSales);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I customize the behavior of `done`?","completion":"You can pass options when creating the SimpleDB instance to customize behavior:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create with custom options\nconst sdb = new SimpleDB({\n  debug: true,\n  nbRowsToLog: 20\n});\n// Close the database\nawait sdb.done();\n```"}
{"prompt":"How can I round the summarized values to a specific number of decimals?","completion":"You can set the `decimals` option. Here's an example rounding to 2 decimals:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a new instance\nconst sdb = new SimpleDB();\n// Create a table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./data.csv\");\n// Summarize with rounded values\nawait table.summarize({\n  values: [\"price\", \"cost\"],\n  decimals: 2\n});\n// Close the connection\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different name for the new geometry column?","completion":"Yes, you can specify any name for the new geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file containing latitude and longitude columns\nawait table.loadData(\"./data.csv\");\n// We create point geometries using 'lat' and 'lon' columns and store them in 'location' column\nawait table.points(\"lat\", \"lon\", \"location\");\n// We log the results to see the new geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I update a text column to be the first 5 characters of another column?","completion":"Here's how you can truncate a text column using `updateColumn`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We update 'column1' to be first 5 characters of 'column2'\nawait table.updateColumn(\"column1\", \"LEFT(column2, 5)\");\n// We log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens if I don't specify the column name when simplifying geometries?","completion":"If you don't specify the column name, the method will automatically attempt to find a geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify geometries with a tolerance of 0.1\nawait table.simplify(0.1);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What are the three parameters required for the `inside` method?","completion":"The `inside` method requires three parameters: the test geometry column, container geometry column, and new result column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"geoTable\");\nawait table.loadGeoData(\"./geodata.geojson\");\n// First parameter: column with geometries to test (e.g., \"pointGeom\")\n// Second parameter: column with container geometries (e.g., \"polygonGeom\")\n// Third parameter: name for new boolean column (e.g., \"isInsidePolygon\")\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I perform a rolling sum of transactions within each customer category?","completion":"To compute a rolling sum of the `transactions` column separately for each `customer_id`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"transactionsTable\");\nawait table.loadData(\"./transactions.csv\");\n// Rolling sum of 'transactions' with 5 preceding rows, no following rows, grouped by 'customer_id'\nawait table.rolling(\"transactions\", \"rollingSumTransactions\", \"sum\", 5, 0, {\n  categories: \"customer_id\",\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I generate a SQL query from a natural language prompt and execute it on my data?","completion":"Here's how to generate and execute a SQL query using a natural language prompt:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We generate and execute a query based on a prompt\nawait table.aiQuery(\"What is the average salary by department\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I ignore parsing errors when loading data?","completion":"Set ignoreErrors to true to skip rows with errors:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\", { ignoreErrors: true });\nawait sdb.done();\n```\n"}
{"prompt":"How can I use `getMedian` inside an asynchronous loop to compute medians for multiple columns?","completion":"Use `await` inside the loop to ensure each median is computed before moving to the next:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst columns = [\"age\", \"salary\", \"height\"];\nfor (const col of columns) {\n  const median = await table.getMedian(col);\n  console.log(`Median of ${col}:`, median);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I use `longer` to stack year columns into a long format?","completion":"Specify the year columns in the `columns` array, and provide names for the new columns that will hold the original column names and values.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./employee_counts.csv\");\n// Stack 2021, 2022, 2023 into 'Year' and 'Employees'\nawait table.longer([\"2021\", \"2022\", \"2023\"], \"Year\", \"Employees\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the standard deviation of a numeric column and round the result to 3 decimal places?","completion":"Here's how you can get the standard deviation of a column and round to 3 decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Calculate standard deviation of 'score' column rounded to 3 decimals\nconst scoreStdDev = await table.getStdDev(\"score\", { decimals: 3 });\nconsole.log(scoreStdDev);\nawait sdb.done();\n```"}
{"prompt":"What does the `getSum` method return?","completion":"The `getSum` method returns a promise that resolves to a number, which represents the sum of the values in the specified column.\n\nHere's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data (assuming you have a CSV file named 'data.csv' with a 'price' column)\nawait table.loadData(\"./data.csv\");\n// Calculate the sum of the 'price' column\nconst totalPrice = await table.getSum(\"price\");\nconsole.log(totalPrice); // Output the total price\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify column data types during load?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file and specify column types\nawait table.loadData(\"./data.csv\", {\n  columnTypes: {\n    \"price\": \"number\",\n    \"product\": \"string\",\n    \"date\": \"date\"\n  }\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I replace NULL values in a date column with a specific date?","completion":"Here’s how to replace NULL values in a date column with January 1, 2023: \\n\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data (example path)\\nawait table.loadData(\"./data.csv\");\\n// Replace NULLs in 'dateColumn' with a specific date\\nawait table.replaceNulls(\"dateColumn\", new Date(\"2023-01-01\"));\\n// Close everything\\nawait sdb.done();\\n```"}
{"prompt":"How do I use the intersect method to determine if two geometry columns overlap?","completion":"You can call intersect on two geometry columns and store the boolean result in a new column. ```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"geoTable\");\\n// We load geospatial data from a file\\nawait table.loadGeoData(\"./my-geodata.geojson\");\\n// We check intersection between 'geomA' and 'geomB', storing in 'doIntersect'\\nawait table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\\n// We log the results\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();```"}
{"prompt":"What must be true about the two geometry columns when using the intersection method?","completion":"Both columns must have the same projection. Here's an example of using the method (with matching projections):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file (with matching projections for geometry columns)\nawait table.loadGeoData(\"./geodata.geojson\");\n// We compute the intersection of geometries in 'geomA' and 'geomB' columns, storing results in 'intersectGeom'\nawait table.intersection(\"geomA\", \"geomB\", \"intersectGeom\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"When should I use the 'spheroid' method for distance calculation?","completion":"Use 'spheroid' when you need high accuracy with WGS84 data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data in WGS84 (EPSG:4326)\nawait table.loadGeoData(\"./wgs84_data.geojson\");\n// Compute Spheroid distance in kilometers\nawait table.distance(\"point1\", \"point2\", \"distance_spheroid_km\", {\n  method: \"spheroid\",\n  unit: \"km\"\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I create a dot chart with small multiples (facets) for different categories?","completion":"Use the `smallMultiples` option to split the chart by a category column.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data with category column\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-03-01\"), value: 30, category: \"A\" },\n  { date: new Date(\"2023-04-01\"), value: 40, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n  { date: new Date(\"2023-03-01\"), value: 35, category: \"B\" },\n  { date: new Date(\"2023-04-01\"), value: 45, category: \"B\" },\n];\n// Load data into the table\nawait table.loadArray(data);\n// Convert date to string for display\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Generate dot chart with small multiples by category\nawait table.logDotChart(\"date\", \"value\", { smallMultiples: \"category\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I filter rows where geometries intersect?","completion":"Yes, you can use the `where` method after checking intersections:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// Load geospatial data\nawait table.loadGeoData(\"./geodata.geojson\");\n// Check for intersections\nawait table.intersect(\"geometry1\", \"geometry2\", \"intersects\");\n// Filter and keep only rows where intersection is TRUE\nawait table.where(\"intersects == TRUE\");\n// Log the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I need to verify if multiple columns exist in my dataset. How can I do that?","completion":"You can use the `hasColumn` method in a loop or with multiple calls to check for multiple columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// List of columns to check\nconst requiredColumns = [\"population\", \"area\", \"year\"];\nlet allColumnsExist = true;\n\nfor (const column of requiredColumns) {\n  const exists = await table.hasColumn(column);\n  if (!exists) {\n    allColumnsExist = false;\n    console.log(`Missing column: ${column}`);\n  }\n}\n\nconsole.log(\"All required columns exist:\", allColumnsExist);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I write the current database to a DuckDB file?","completion":"Here’s how to write the current database to a DuckDB file:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// ... perform operations on the database ...\n// Write the database to a DuckDB file\nawait sdb.writeDB(\"./my_exported_database.db\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enforce specific data types for columns?","completion":"Provide a columnTypes map:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', {\n  columnTypes: { age: 'number', name: 'string', joined: 'date' }\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I filter which rows are returned by getTop?","completion":"Yes, you can use conditions to filter the results. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get top 3 rows where category is 'Electronics'\nconst filteredTop = await table.getTop(3, { conditions: \"category === 'Electronics'\" });\nconsole.log(filteredTop);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write my geospatial data to a GeoJSON file?","completion":"Here's how you can write your table's geospatial data to a GeoJSON file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the geospatial data to a GeoJSON file\nawait table.writeGeoData(\"./output.geojson\");\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I group by multiple categories?","completion":"Yes, pass an array of column names to `categories`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We summarize 'sales' by 'region' and 'product_type'\nawait table.summarize({ values: \"sales\", categories: [\"region\", \"product_type\"] });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens to the order of rows after calling `removeDuplicates`?","completion":"The resulting data order may differ from the original; if you need a specific order, sort the table after deduplication.\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"sales\");\n// Load data from a CSV file\nawait table.loadData(\"./sales.csv\");\n// Remove duplicates based on all columns\nawait table.removeDuplicates();\n// (Optional) Sort by a column, e.g., \"date\"\nawait table.sort({ by: \"date\", order: \"asc\" });\n// Log the sorted, deduplicated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a simple dot plot chart and save it as a PNG file?","completion":"Here's how you can create a simple dot plot chart and save it as a PNG file:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { dot, plot } from \"@observablehq/plot\";\n\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from an array\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n// We define the chart function\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: \"year\", y: \"value\" }),\n    ],\n  });\n// We specify the output path\nconst outputPath = \"output/chart.png\";\n// We write the chart to the file\nawait table.writeChart(chartFunction, outputPath);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I treat a specific value like -1 as missing for the 'age' column?","completion":"Use `missingValues` to define custom missing values for a specific column.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'age' is missing or is -1\nawait table.removeMissing({ columns: \"age\", missingValues: [-1] });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How does using `wider` affect my table structure?","completion":"Using `wider` transforms your table from a long format to a wide format by creating new columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./employees.csv\");\n// Original long format\nawait table.logTable();\n// Restructure to wide format\nawait table.wider(\"Year\", \"Employees\");\n// New wide format\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get repeatable sampling results?","completion":"Provide a seed in the options object. The same seed will always return the same rows:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data first\nawait table.loadData(\"./data.csv\");\n// Sample 10% of the rows with a fixed seed\nawait table.sample(\"10%\", { seed: 42 });\n// Log the resulting table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use `getExtent` on a string column?","completion":"The `getExtent` method works best with numeric columns. For string columns, it may not provide meaningful results. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get extent of string column 'category'\nconst categoryExtent = await table.getExtent(\"category\");\nconsole.log(\"Category extent:\", categoryExtent);\n// We close everything\nawait sdb.done();\n```\nFor text analysis, consider using other methods like `uniqueValues`."}
{"prompt":"How can I write the data to a JSON file with GZIP compression?","completion":"Here's how you can write the data to a JSON file with GZIP compression:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a JSON file with compression\nawait table.writeData(\"./output.json\", { compression: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the descriptive statistics to identify columns with many null values?","completion":"After retrieving the description, filter the array for columns where nullCount exceeds a threshold:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst description = await table.getDescription();\n// Find columns with more than 50% null values\nconst threshold = 0.5;\nconst columnsWithManyNulls = description.filter(col => col.nullCount / col.totalCount > threshold);\nconsole.log(columnsWithManyNulls);\nawait sdb.done();\n```"}
{"prompt":"Can I skip zero rows, and what is the effect?","completion":"Skipping zero rows leaves the table unchanged. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"demoTable\");\nawait table.loadData(\"./demo.csv\");\nawait table.skip(0); // no rows are removed\nawait table.logTable(); // table remains the same\nawait sdb.done();\n```"}
{"prompt":"How do I insert multiple rows into a SimpleTable?","completion":"Here’s how to insert multiple rows into a SimpleTable:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Insert new rows into the table\nconst newRows = [\n  { letter: \"c\", number: 3 },\n  { letter: \"d\", number: 4 },\n];\nawait table.insertRows(newRows);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the total sum of a numeric column such as 'quantity' in my dataset?","completion":"Here's how you can calculate the sum of a numeric column using the `getSum` method:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file containing a 'quantity' column\nawait table.loadData(\"./data.csv\");\n// Calculate the sum of the 'quantity' column\nconst totalQuantity = await table.getSum(\"quantity\");\n// Log the result\nconsole.log(totalQuantity);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check the data types of all columns in my table?","completion":"You can use the `logTypes` method to display the data types of each column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the types of all columns\nawait table.logTypes();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add a column indicating whether the geometries in my table are valid?","completion":"Here's how you can add a column to indicate the validity of geometries, letting the method automatically detect the geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a column named 'isValid' to indicate geometry validity\nawait table.isValidGeo(\"isValid\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I detect outliers across multiple categorical columns?","completion":"You can specify multiple categories for outlier detection. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Detect outliers in 'sales' within each combination of 'region' and 'year'\nawait table.outliersIQR(\"sales\", \"isOutlier\", { categories: [\"region\", \"year\"] });\n// Log the results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I handle the promise returned by getExtent in an async function?","completion":"Await the promise inside an async function and use the result:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nasync function showExtent() {\n  const sdb = new SimpleDB();\n  const table = sdb.newTable();\n  await table.loadData(\"./data.csv\");\n  const extent = await table.getExtent(\"pressure\");\n  console.log(`Extent: ${extent}`);\n  await sdb.done();\n}\nshowExtent();\n```"}
{"prompt":"Can I specify the column containing the geometries when creating a buffer?","completion":"Yes, you can specify the geometry column using the options parameter:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We create a buffer of 10 units around geometries in the 'pointsGeom' column\nawait table.buffer(\"pointsBuffer\", 10, { column: \"pointsGeom\" });\n// We log the first rows to see the buffered geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I specify the number of decimal places when calculating standard deviation?","completion":"Yes, you can specify the number of decimals. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get standard deviation with 2 decimal places\nconst stdDev = await table.getStdDev(\"score\", { decimals: 2 });\nconsole.log(stdDev);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I include the last update timestamp when writing to a Google Sheet?","completion":"You can include the last update timestamp by setting the `lastUpdate` option to `true`. You can also specify a `timeZone`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a Google Sheet, including the last update timestamp\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  lastUpdate: true,\n  timeZone: \"Canada/Eastern\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use Ollama with the `aiQuery` method?","completion":"Here's how you can use Ollama with the `aiQuery` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We use aiQuery with Ollama enabled\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { ollama: true }\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if no rows match the conditions in getLastRow?","completion":"If no rows match, the method returns null.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Attempt to retrieve the last row where category is 'Nonexistent'\nconst lastNonexistentRow = await table.getLastRow({\n  conditions: \"category = 'Nonexistent'\",\n});\n// Log the result (will be null if no match)\nconsole.log(lastNonexistentRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I right-trim whitespace from multiple columns?","completion":"Pass an array of column names and set `method: \"rightTrim\"`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Right-trim whitespace from 'description' and 'notes'\nawait table.trim([\"description\", \"notes\"], { method: \"rightTrim\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I extract latitude and longitude from a point geometry column in my table?","completion":"You can use the `latLon` method to split the geometry into separate latitude and longitude columns.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Load your data (assumes a column named \"geom\" with point geometries)\nawait table.loadData(\"./data.csv\");\n// Extract latitude and longitude into new columns \"lat\" and \"lon\"\nawait table.latLon(\"geom\", \"lat\", \"lon\");\n// Log the table to verify the new columns\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleDB instance and load data into it?","completion":"Here's how to create a SimpleDB instance and load data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a new SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table and load data\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"path/to/your/data.csv\");\n// Close everything when done\nawait sdb.done();\n```"}
{"prompt":"What happens if the column I specify in `getMin` does not exist?","completion":"The documentation does not specify the behavior if the column does not exist. However, it is likely that the method will return `null` or throw an error. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./my_data.csv\");\n// Get the minimum value from the 'nonexistent_column' column\nconst minVal = await table.getMin(\"nonexistent_column\");\nconsole.log(minVal); // e.g., null\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I sort all columns in ascending order by default?","completion":"Here's how to sort all columns in ascending order without specifying any columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Sort all columns in ascending order (default behavior)\nawait table.sort();\n// We log the sorted table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to keep only rows that have missing values in any column (inverting the condition)?","completion":"Here's how to keep only rows that have missing values in any column (by inverting the condition):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data\nawait table.loadData(\"./data.csv\");\n// Keep only rows with missing values (invert: true)\nawait table.removeMissing({ invert: true });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What is the full workflow to load GeoJSON data, reproject it, and then view the transformed geometries?","completion":"Load the data, reproject, and log the table in one sequence:\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load geospatial data\\nawait table.loadGeoData(\\\"./my-geodata.geojson\\\");\\n// Reproject to EPSG:3347\\nawait table.reproject(\\\"EPSG:3347\\\");\\n// Log the transformed geometries\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"Is there a way to limit the number of rows loaded?","completion":"Yes, use the `limit` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"limitedRows\");\nawait table.loadDataFromDirectory(\"./data/\", { limit: 100 });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use both decimals and method options together in `round`?","completion":"Yes, you can combine both options like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Round 'value' to 1 decimal place using floor method\nawait table.round(\"value\", { decimals: 1, method: \"floor\" });\n// Log the rounded values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I combine multiple configuration options when creating a SimpleTable?","completion":"You can combine multiple options when creating a table.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table with multiple options\\nconst table = sdb.newTable(\\\"combinedTable\\\", { lat: \\\"EPSG:4326\\\" }, { debug: true, nbRowsToLog: 5, nbCharactersToLog: 30, types: true });\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I enable DuckDB's external file cache?","completion":"You can set duckDbCache in the options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with DuckDB cache\nconst sdb = new SimpleDB({\n  duckDbCache: true\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data type will the `getMin` method return?","completion":"The `getMin` method can return a string, number, boolean, Date, or null, depending on the data type of the values in the specified column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./my_data.csv\");\n// Get the minimum value from the 'date' column\nconst minDate = await table.getMin(\"date\");\nconsole.log(minDate); // e.g., 2023-01-01\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a table with a specific name?","completion":"Here’s how you can create a table with a specific name:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table named \"employees\"\nconst employees = sdb.newTable('employees');\n// Load data into the table\nawait employees.loadData('./employees.csv');\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fill holes in the default geometry column of my geospatial data?","completion":"Use the `fillHoles` method without any arguments to fill holes in the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Fill holes in the default geometry column\nawait table.fillHoles();\n// Log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What column names should I use when calling the `points` method?","completion":"The `points` method expects the names of the latitude, longitude, and new geometry columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We create point geometries in a new 'geom' column using 'lat' and 'lon' columns\nawait table.points(\"latitude\", \"longitude\", \"point_geometry\");\n// We log the first rows to see the new 'geom' column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific DuckDB extension is installed?","completion":"You can filter the list of extensions to check for a specific one:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get the list of installed extensions\nconst extensions = await sdb.getExtensions();\n// Check if 'spatial' extension is installed\nconst isSpatialInstalled = extensions.some(ext => ext.extension_name === \"spatial\" && ext.loaded);\nconsole.log(\"Spatial extension installed:\", isSpatialInstalled);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a column in my table?","completion":"Here's how you can clone an existing column to create a new one with identical values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We clone the 'originalColumn' to 'newColumn'\nawait table.cloneColumn(\"originalColumn\", \"newColumn\");\n// We log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific column exists in my table?","completion":"You can use the `hasColumn` method to verify the presence of a column.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Check if the column \"age\" exists\nconst hasAge = await table.hasColumn(\"age\");\nconsole.log(hasAge); // true or false\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I pad missing columns with NULL values?","completion":"Set `nullPadding` to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"nullPadded\");\nawait table.loadDataFromDirectory(\"./data/\", { \n  nullPadding: true\n});\nawait sdb.done();\n```"}
{"prompt":"How can I compute the length of line geometries in meters?","completion":"Here's how you can compute the length of line geometries and store them in a new column in meters:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the length of line geometries in meters and store in 'length_m'\nawait table.length(\"length_m\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I assign ranks within multiple categories ('department' and 'city') for a column named 'sales'?","completion":"Here's how you can assign ranks within multiple categories ('department' and 'city') for the 'sales' column.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file (assuming it has 'sales', 'department', and 'city' columns)\nawait table.loadData(\"./data.csv\");\n// Assign ranks within 'department' and 'city' categories for 'sales'\nawait table.ranks(\"sales\", \"salesRank\", { categories: [\"department\", \"city\"] });\n// Log the table to see the new rank column\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the top 5 rows of my table without any filtering?","completion":"Here's how you can get the top 5 rows without any filtering:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We get the top 5 rows without filtering\nconst top5 = await table.getTop(5);\nconsole.log(top5);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I ensure the cache doesn't grow indefinitely?","completion":"Call `done()` on the SimpleDB instance to clean up the cache. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We cache the computations\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"]\n  });\n});\n// We close everything and clean up the cache\nawait sdb.done();\n```\nThis ensures proper cleanup of cached data."}
{"prompt":"What happens if no rows match the provided conditions?","completion":"The method resolves to `null` when no rows satisfy the filter:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadData(\"./data.csv\");\n// Attempt to get the last row where the status is \"Archived\"\nconst archived = await table.getLastRow({\n  conditions: \"status === 'Archived'\",\n});\nif (archived === null) {\n  console.log(\"No archived rows found.\");\n} else {\n  console.log(archived);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations within different categories (e.g., by 'category' column)?","completion":"Use the `categories` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations within 'categoryColumn' categories\nawait table.correlations({ categories: \"categoryColumn\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a basic line chart with the `logLineChart` method?","completion":"Here's how you can create a basic line chart using the `logLineChart` method. This example assumes you have loaded data into the table."}
{"prompt":"How do I specify a particular column containing the geometries when creating a buffer?","completion":"You can specify the column containing the geometries using the `options` parameter. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We create a buffer of 10 units around geometries in the 'pointsGeom' column,\n// storing the results in 'pointsBuffer'\nawait table.buffer(\"pointsBuffer\", 10, { column: \"pointsGeom\" });\n// We log the first rows to see the buffered data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load an array of objects into a table using the `loadArray` method?","completion":"Here's how you can load an array of objects into a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We define an array of objects to load\nconst data = [\n  { letter: \"a\", number: 1 },\n  { letter: \"b\", number: 2 },\n];\n// We load the array into the table\nawait table.loadArray(data);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I check if a column named \"age\" exists in my table?","completion":"You can use the `hasColumn` method to check for the existence of a column. Here’s a simple example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadData(\"./data.csv\");\n// Check if the column \"age\" exists\nconst hasAge = await table.hasColumn(\"age\");\nconsole.log(hasAge); // true or false\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the last 10 rows in their original order?","completion":"Here's how you can retrieve the last 10 rows in their original order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the last 10 rows in their original order\nconst bottom10OriginalOrder = await table.getBottom(10, {\n  originalOrder: true\n});\n// We log the results\nconsole.log(bottom10OriginalOrder);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I replace NULL values across multiple columns at once?","completion":"Yes, you can specify an array of column names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Replace NULL values in 'age' and 'salary' columns with 0\nawait table.replaceNulls([\"age\", \"salary\"], 0);\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I double the values in a numeric column?","completion":"Here's how you can double the values in a numeric column using a SQL expression:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file (assuming it has 'price')\nawait table.loadData(\"./data.csv\");\n// Double the values in the 'price' column\nawait table.updateColumn(\"price\", \"price * 2\");\n// Log the updated table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table with a specific name?","completion":"You can provide a string name to cloneTable:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"./data.csv\");\n// Clone tableA to a new table named \"my_cloned_table\"\nconst tableB = await tableA.cloneTable(\"my_cloned_table\");\nawait tableB.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I use removeIntersection to subtract multiple geometries from a single geometry?","completion":"No, removeIntersection only handles two columns at a time. Here's how you can process multiple subtractions step by step:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// First subtraction\nawait table.removeIntersection(\"geomA\", \"geomB\", \"geomA_minus_geomB\");\n// Second subtraction using the result of the first operation\nawait table.removeIntersection(\"geomA_minus_geomB\", \"geomC\", \"final_result\");\n// We log the final results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I use `removeIntersection` to subtract one geometry from another in a SimpleTable?","completion":"Here’s how you can load a GeoJSON file, remove the intersection of two geometry columns, and view the result:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Remove the intersection of 'geomB' from 'geomA', storing the result in 'geomA_minus_geomB'\nawait table.removeIntersection(\"geomA\", \"geomB\", \"geomA_minus_geomB\");\n// Log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert all string values in a specific column to lowercase?","completion":"Here's how you can convert all string values in a specific column to lowercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Convert strings in 'Name' column to lowercase\nawait table.lower(\"Name\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I assign descending ranks to a column?","completion":"Here's how you can assign descending ranks to a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Assign descending ranks to the 'score' column, storing in 'descRank'\nawait table.ranks(\"score\", \"descRank\", { order: \"desc\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I skip the first 10 rows and then select 20 rows?","completion":"To skip the first 10 rows and select the next 20, use `selectRows(20, { offset: 10 })`.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We skip first 10 rows and select 20\nawait table.selectRows(20, { offset: 10 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I replace strings across multiple columns simultaneously?","completion":"Yes, you can replace strings in multiple columns at once:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Replace \"kilograms\" with \"kg\" and \"liters\" with \"l\" in 'column1' and 'column2'\nawait table.replace([\"column1\", \"column2\"], {\n  \"kilograms\": \"kg\",\n  \"liters\": \"l\",\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table with a filter condition?","completion":"Use the conditions option to filter rows during cloning:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"./data.csv\");\n// Clone only rows where status is 'active'\nconst tableB = await tableA.cloneTable({ conditions: \"status = 'active'\" });\nawait tableB.logTable();\nawait sdb.done();\n```"}
{"prompt":"Will creating point geometries overwrite my original data?","completion":"No, it will create a new column with geometries while keeping your original data intact. Here's how you can verify:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file containing latitude and longitude columns\nawait table.loadData(\"./data.csv\");\n// Log original data before creating geometries\nconsole.log(\"Original data:\");\nawait table.logTable();\n// Create point geometries in a new 'geom' column\nawait table.points(\"lat\", \"lon\", \"geom\");\n// Log data after creating geometries to see the new column\nconsole.log(\"\\nData with new geometries:\");\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I use the `cache` method to store the results of a computation?","completion":"Here's how you can use the `cache` method to cache the results of loading and summarizing data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data type does the `hasColumn` method return, and how can I use it in a conditional statement?","completion":"The `hasColumn` method returns a Promise that resolves to a boolean value. Here's how you can use it in a conditional statement:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Check if the column 'score' exists\nconst hasScoreColumn = await table.hasColumn(\"score\");\n\nif (hasScoreColumn) {\n  console.log(\"The 'score' column exists.\");\n  // Perform operations on the 'score' column\n} else {\n  console.log(\"The 'score' column does not exist.\");\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a new geometry column that contains the centroid of an existing geometry column and set its projection?","completion":"Here's how to add a new geometry column using a spatial function and set the projection:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We assume the table has a geometry column named 'country'\n// We add a new geometry column 'centroid' using the centroid function\nawait table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"country\")`, {\n  projection: table.projections.country,\n});\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify the number of decimal places for the skewness result?","completion":"Yes, you can specify the number of decimal places using the `decimals` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We calculate the skewness of the 'price' column, rounded to 2 decimal places\nconst priceSkew = await table.getSkew(\"price\", { decimals: 2 });\nconsole.log(priceSkew); // e.g., -0.33\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify custom names for the new columns created by `wider`?","completion":"Yes, you can use the `as` parameter to name the new columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data\nawait table.loadData(\"./data.csv\");\n// Restructure with custom column names\nawait table.wider(\"Year\", \"Employees\", { as: [\"Y2021\", \"Y2022\", \"Y2023\"] });\n// Log the result\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\nThis renames the new columns to more descriptive names."}
{"prompt":"Does the `getTableNames` method return the table names in a specific order?","completion":"Yes, the `getTableNames` method returns the table names sorted alphabetically. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames); // Output: An alphabetically sorted array of table names\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I update a 'status' column to 'active' if a boolean column 'isActive' is true, and to 'inactive' otherwise?","completion":"Here's how you can conditionally update a column based on another column's value:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Set 'status' to 'active' where 'isActive' is true\nawait table.updateColumn(\n  \"status\",\n  `CASE WHEN isActive THEN 'active' ELSE 'inactive' END`,\n);\n// We log the first rows to see the updated data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I unnest the geometries in my table?","completion":"Here's how you can unnest the geometries in your table using the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We unnest the geometries\nawait table.unnestGeo();\n// We log the first rows to see the unnested data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute linear regression for all numeric column permutations without specifying x and y?","completion":"Here's how to compute linear regression for all numeric column permutations:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Compute all linear regressions between all numeric columns\nawait table.linearRegressions();\nawait sdb.done();\n```"}
{"prompt":"What is the difference between variance and standard deviation in data analysis?","completion":"Variance measures how spread out numbers are, while standard deviation is the square root of variance. Here's an example calculating both:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Calculate variance and standard deviation of 'values' column\nconst variance = await table.getVar(\"values\");\nconst stdDeviation = Math.sqrt(variance);\nconsole.log(\"Variance:\", variance);\nconsole.log(\"Standard Deviation:\", stdDeviation);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I create a basic line chart with dates on the x-axis and numeric values on the y-axis?","completion":"Here's how to create a basic line chart with date and value columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data with Date objects\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 },\n  { date: new Date(\"2023-03-01\"), value: 30 },\n];\nawait table.loadArray(data);\n// Convert date to string for display (as shown in documentation)\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Generate and log the line chart\nawait table.logLineChart(\"date\", \"value\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load multiple local JSON files at once?","completion":"Here’s how to load multiple local JSON files:\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData([\\n  \"./data1.json\",\\n  \"./data2.json\",\\n  \"./data3.json\"\\n]);\\nawait sdb.done();\\n```"}
{"prompt":"How can I log all column names to verify they're correct?","completion":"You can log the column names using `getColumns`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get and log all column names\nconst columns = await table.getColumns();\nconsole.log(\"List of columns:\", columns);\n// We close everything\nawait sdb.done();\n```\nThis will display all the column names in your dataset."}
{"prompt":"How do I treat all columns as text when loading a CSV?","completion":"Set `allText: true` to force text type:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\", { allText: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I apply cloneColumnWithOffset within a single category, such as 'region'?","completion":"To apply the offset within a specific category, provide the category column name in the categories option.\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"sales_by_region\");\n// Load data\nawait table.loadData(\"./sales.csv\");\n// Clone 'revenue' as 'prev_revenue_by_region' offsetting by 1 row within each 'region'\nawait table.cloneColumnWithOffset(\"revenue\", \"prev_revenue_by_region\", { categories: \"region\" });\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I specify a different name for the row number column?","completion":"Yes, you can specify any valid string as the name for the new column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We add a new column named 'index' with the row number for each row\nawait table.addRowNumber(\"index\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I flip coordinates in the default geometry column of a table?","completion":"Here’s how to flip coordinates in the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Flip coordinates in default geometry column\nawait table.flipCoordinates();\n// Log table\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify the geometry column if my GeoJSON data has multiple geometry columns?","completion":"You can use the `column` option in the `writeMap` method to specify the geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { geo, plot } from \"@observablehq/plot\";\n\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n\n// Load your GeoJSON data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n\n// Define a map function using Observable Plot\nconst mapFunction = (geoJsonData: { features: unknown[] }) =>\n  plot({\n    projection: {\n      type: \"conic-conformal\",\n      rotate: [100, -60],\n      domain: geoJsonData,\n    },\n    marks: [\n      geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" }),\n    ],\n  });\n\n// Define the output path for the map image\nconst outputPath = \"./output/map.png\";\n\n// Write the map to the specified path, specifying the geometry column\nawait table.writeMap(mapFunction, outputPath, { column: \"myGeometryColumn\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round the correlation values to 2 decimal places?","completion":"Use the `decimals` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations rounded to 2 decimal places\nawait table.correlations({ decimals: 2 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove a single column from a table?","completion":"You can pass the column name as a string to `removeColumns`. Here’s how to do it:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data first (optional)\nawait table.loadData(\"./data.csv\");\n// Remove a single column named 'tempColumn'\nawait table.removeColumns(\"tempColumn\");\n// Log the table to verify the column was removed\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a starting value for the bins? If so, how?","completion":"Yes, you can specify a starting value for the bins using the `options` parameter. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We assign bins for the 'score' column with an interval of 20, starting at 0\nawait table.bins(\"score\", 20, \"score_group\", { startValue: 0 });\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I log only rows where the status column equals 'active'?","completion":"Here's how you can log rows where status is active using JavaScript syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Log rows where status is 'active'\nawait table.logTable({ conditions: `status === 'active'` });\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geospatial data to WGS84 when loading a shapefile?","completion":"Use the toWGS84: true option to reproject shapefile data to WGS84:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load and reproject shapefile data to WGS84\nawait table.loadGeoData(\"./data.shp.zip\", { toWGS84: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows based on string equality?","completion":"Use the equality operator `===` in JavaScript syntax or `=` in SQL syntax. For example, to keep rows where the `status` column equals \"active\":\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./users.csv\");\nawait table.filter(`status === 'active'`);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I sort a single column in ascending order?","completion":"Here's how to sort a single column (e.g., 'name') in ascending order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Sort 'name' column in ascending order\nawait table.sort({ name: \"asc\" });\n// We log the sorted table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I round the mean value to a specific number of decimal places?","completion":"Yes, you can specify the number of decimal places when calculating the mean. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Calculate and log the mean of the 'salary' column rounded to 2 decimals\nconst meanSalary = await table.getMean(\"salary\", { decimals: 2 });\nconsole.log(\"Mean salary:\", meanSalary);\n// We close everything\nawait sdb.done();\n```\nThis code calculates the average value of the 'salary' column and rounds it to two decimal places."}
{"prompt":"How do I log columns after loading a new dataset?","completion":"After loading a new dataset, simply call `logColumns` again:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./first.csv\");\nawait table.logColumns();\nawait table.loadData(\"./second.csv\"); // replaces data\nawait table.logColumns({ types: true });\nawait sdb.done();\n```"}
{"prompt":"How do I include data types when logging a table?","completion":"Set the `types` option to `true` to include data types in logs. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with type logging\nconst sdb = new SimpleDB({\n  types: true\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I enable logging for cache operations?","completion":"Yes, you can enable verbose logging by setting `cacheVerbose` to `true` when creating the SimpleDB instance. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with verbose cache logging\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// We create a new table\nconst table = sdb.newTable();\n// We cache the computations\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"]\n  });\n});\n// We close everything\nawait sdb.done();\n```\nThis will log detailed information about cache operations."}
{"prompt":"How do I log descriptive information for a table that contains geospatial data?","completion":"Load the GeoJSON file and then call `logDescription` to see the column metadata.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./regions.geojson\");\n// Log description to inspect data types, nulls, and distinct values\nawait table.logDescription();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the total number of values in my table?","completion":"You can use the `getNbValues` method to get the total number of values (columns multiplied by rows). Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the total number of values in the table\nconst nbValues = await table.getNbValues();\nconsole.log(`Total values: ${nbValues}`);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data types can the values in a column have?","completion":"The values in a column can be of type string, number, boolean, Date, or null. Here's an example of retrieving values from a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data (assuming you have a CSV file named 'data.csv' with a 'category' column)\nawait table.loadData(\"./data.csv\");\n// Get all values from the 'category' column\nconst categories = await table.getValues(\"category\");\nconsole.log(categories); // e.g., [\"Electronics\", \"Books\", \"Clothing\", \"Electronics\"]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I update a column to contain the first 5 characters of another column?","completion":"Here's how you can update a column with the first 5 characters of another column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file (assuming it has 'column2' column)\nawait table.loadData(\"./data.csv\");\n// Update 'column1' with the left 5 characters of 'column2'\nawait table.updateColumn(\"column1\", `LEFT(column2, 5)`);\n// Log the table to see the updated values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a table only if it does not already exist?","completion":"Use `hasTable` in a conditional before creating. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableName = \"orders\";\nconst exists = await sdb.hasTable(tableName);\nif (!exists) {\n  const table = sdb.newTable(tableName);\n  await table.loadData(\"./orders.csv\");\n  console.log(`Table ${tableName} created.`);\n} else {\n  console.log(`Table ${tableName} already exists.`);\n}\nawait sdb.done();\n```"}
{"prompt":"How can I enable the creation of an index on the new embeddings column to speed up similarity searches?","completion":"Here's how to create an index on the new embeddings column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load some data into the table\nawait table.loadArray([\n  { description: \"Item 1\" },\n  { description: \"Item 2\" }\n]);\n// Generate embeddings and create an index\nawait table.aiEmbeddings(\"description\", \"embeddings\", {\n  createIndex: true // Enable index creation\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I limit the number of characters logged for string values?","completion":"You can set the maximum characters per string using options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with limited string logging\nconst table = sdb.newTable(\n  \"myTable\",\n  {},\n  sdb,\n  { nbCharactersToLog: 20 }\n);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I make all small multiples share the same y‑axis scale?","completion":"Ensure all small multiples share the same y‑axis scale with `fixedScales: true`:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadArray([\\n  { date: new Date(\\\"2023-01-01\\\"), value: 10, category: \\\"A\\\" },\\n  { date: new Date(\\\"2023-02-01\\\"), value: 20, category: \\\"A\\\" },\\n  { date: new Date(\\\"2023-01-01\\\"), value: 50, category: \\\"B\\\" },\\n  { date: new Date(\\\"2023-02-01\\\"), value: 60, category: \\\"B\\\" }\\n]);\\nawait table.convert({ date: \\\"string\\\" }, { datetimeFormat: \\\"%x\\\" });\\nawait table.logLineChart(\\\"date\\\", \\\"value\\\", {\\n  smallMultiples: \\\"category\\\",\\n  fixedScales: true\\n});\\nawait sdb.done();\\n```"}
{"prompt":"Can I replace multiple strings in multiple columns at once?","completion":"Yes, you can replace multiple strings across multiple columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Replace \"kilograms\" with \"kg\" and \"liters\" with \"l\" in 'column1' and 'column2'\nawait table.replace([\"column1\", \"column2\"], {\n  \"kilograms\": \"kg\",\n  \"liters\": \"l\",\n});\n// We log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute horizontal proportions for specific columns in my table?","completion":"Here's how you can compute horizontal proportions for specified columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data\nawait table.loadData(\"./sample_data.csv\");\n// Compute horizontal proportions for 'Men', 'Women', and 'NonBinary' columns\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"]);\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nThis will add new columns with proportions for each specified column."}
{"prompt":"How can I calculate the skewness of a specific numeric column in my data?","completion":"Here's how you can calculate the skewness of a numeric column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Calculate skewness of the 'age' column\nconst skewness = await table.getSkew(\"age\");\nconsole.log(\"Skewness:\", skewness);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I assign deciles (10 quantiles) to a column named 'price' while grouping by a category column 'region'?","completion":"Here's how you can assign deciles within 'region' categories for the 'price' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file (assuming it has 'price' and 'region' columns)\nawait table.loadData(\"./data.csv\");\n// Assign deciles (10 quantiles) to 'price' within each 'region', storing in 'priceDeciles'\nawait table.quantiles(\"price\", 10, \"priceDeciles\", { categories: \"region\" });\n// Log the table to see the new column\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What does getMin return when the column contains boolean values?","completion":"It returns the minimum boolean value (false before true). Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data with a boolean column\nawait table.loadData(\"./flags.csv\");\n// Get the minimum value from the 'isActive' column\nconst minBool = await table.getMin(\"isActive\");\n// Log the result (will be false if any false exists)\nconsole.log(\"Minimum boolean value:\", minBool);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the column contains non-numeric values?","completion":"If the column contains non-numeric values, getSkew will throw an error. You can catch it like this:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file that may have non-numeric entries\nawait table.loadData(\"./mixed-data.csv\");\ntry {\n  // Attempt to get skewness of a column that may contain strings\n  const skew = await table.getSkew(\"mixedColumn\");\n  console.log(\"Skewness:\", skew);\n} catch (err) {\n  console.error(\"Error calculating skewness:\", err.message);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the standard deviation of a numeric column?","completion":"Here's how you can get the standard deviation of a numeric column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get standard deviation of 'age' column\nconst stdDev = await table.getStdDev(\"age\");\nconsole.log(stdDev);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I specify a different AI model for aiQuery?","completion":"To specify a different AI model, pass the model name in options:\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"employees\");\\nawait table.loadData(\"./employees.csv\");\\nawait table.aiQuery(\"Give me the average salary by department\", { model: \"gemini-1.5-flash\" });\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How do I include the date of the last update in the sheet and format it for a specific time zone?","completion":"```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Write the table data with a timestamp row in Canada/Eastern time zone\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  lastUpdate: true,\n  timeZone: \"Canada/Eastern\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I visualize the intersection geometries after computing them?","completion":"Yes! You can use a visualization library like Leaflet to display the results. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst L = require('leaflet');\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the intersection of geometries in 'geomA' and 'geomB' columns, storing results in 'intersectGeom'\nawait table.intersection(\"geomA\", \"geomB\", \"intersectGeom\");\n// Create a map\nconst map = L.map('map').setView([51.505, -0.09], 13);\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n// Get the first intersection geometry and add it to the map\nconst geom = await table.queryRow(0, \"intersectGeom\");\nconst geoJSON = JSON.parse(geom);\nL.geoJSON(geoJSON).addTo(map);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the cumulative sum of a column and store it in a new column?","completion":"Here’s how to compute the cumulative sum of the `sales` column and store it in a new `cumulativeSales` column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./sales.csv\");\n// Compute cumulative sum of the `sales` column\nawait table.accumulate(\"sales\", \"cumulativeSales\");\n// Log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What information does `logDescription` provide for each column?","completion":"`logDescription` provides data type, null count, and distinct value count for each column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Log column descriptions including data type, nulls, and distinct values\nawait table.logDescription();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if a table has a specific column, such as 'age'?","completion":"Here's how you can check for the existence of a column named 'age' in a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file (assuming it has a column 'age')\nawait table.loadData(\"./data.csv\");\n// Check if the table has a column named 'age'\nconst hasAgeColumn = await table.hasColumn(\"age\");\nconsole.log(hasAgeColumn); // Output: true or false\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I set a rate limit when generating embeddings?","completion":"To manage API rate limits, use `rateLimitPerMinute`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data into the table\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n]);\n// Generate embeddings with rate limit set to 10 per minute\nawait table.aiEmbeddings(\"food\", \"embeddings\", {\n  rateLimitPerMinute: 10,\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I enable debug mode for a SimpleTable?","completion":"You can enable debug mode by passing debug:true in the options object when creating the table.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table with debug mode enabled\\nconst table = sdb.newTable(\\\"debugTable\\\", {}, { debug: true });\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How do I use the `getTable` method with a variable table name?","completion":"You can pass a variable to the `getTable` method to retrieve a table with a dynamic name.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Define a variable for the table name\nconst tableName = \"products\";\n// Retrieve the table using the variable\nconst products = await sdb.getTable(tableName);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fix invalid geometries in a specific column?","completion":"Here's how you can fix invalid geometries in a specific column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We fix invalid geometries in the 'myGeom' column\nawait table.fixGeo(\"myGeom\");\n// We log the first rows to see the fixed data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I cache my data computations to avoid re-running them every time?","completion":"Here's how you can cache your computations using the `cache` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We cache the computations\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"]\n  });\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I write my geospatial table to a GeoJSON file?","completion":"Here’s how to write the table’s geospatial data to a GeoJSON file:\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// We load geospatial data from a file\\nawait table.loadGeoData(\"./my-geodata.geojson\");\\n// We write the data to a GeoJSON file\\nawait table.writeGeoData(\"./output.geojson\");\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"Is it possible to log the extent of multiple columns at once?","completion":"`logExtent` accepts only a single column name; to log multiple extents, call it separately for each column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"sales\");\nawait table.loadData(\"./sales.csv\");\nawait table.logExtent(\"price\");\nawait table.logExtent(\"quantity\");\nawait sdb.done();\n```"}
{"prompt":"Can I chain the `lower` method with other table operations?","completion":"Yes, you can call `lower` before or after other methods like `summarize`. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadData(\"./data.csv\");\n// Convert strings to lowercase first\nawait table.lower(\"category\");\n// Then summarize the data\nawait table.summarize({\n  values: \"price\",\n  categories: \"category\",\n  summaries: [\"sum\"],\n  decimals: 2\n});\n// Log the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I see detailed cache-related messages during execution?","completion":"Set `cacheVerbose` to true.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Log verbose cache messages\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// ... perform operations here ...\nawait sdb.done();\n```"}
{"prompt":"How do I display the histogram in a more compact format?","completion":"Set the `compact` option to `true`. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Compact histogram for the \"temperature\" column\nawait table.logHistogram(\"temperature\", { compact: true });\nawait sdb.done();\n```"}
{"prompt":"What data types can I clone using this method?","completion":"The `cloneColumn` method works with any data type since it simply copies the values. Here's an example with numeric data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data with a numeric column 'sales'\nawait table.loadData(\"./data.csv\");\n// Clone the numeric column\nawait table.cloneColumn(\"sales\", \"totalSales\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to log the extent of a non‑numeric column?","completion":"The method will still attempt to compute min/max, but the result will be `NaN` for non‑numeric values. Here’s an example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"employees\");\n// We load data from a CSV file\nawait table.loadData(\"./employees.csv\");\n// We log the extent of a non‑numeric column\nawait table.logExtent(\"name\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geometries in a specific column?","completion":"If your geometries are stored in a non-default column, you can specify it during reprojection:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reproject geometries in the 'myGeom' column from EPSG:4326 to EPSG:3347\nawait table.reproject(\"EPSG:3347\", { column: \"myGeom\", from: \"EPSG:4326\" });\n// We log the first rows to see the reprojected data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I install the library using Node.js?","completion":"Use the following command to add the library with Node.js:\\n\\n```bash\\nnpx jsr add @nshiab/simple-data-analysis\\n```"}
{"prompt":"How can I compute linear regressions within categories and store the results in a new table?","completion":"Here's how you can compute linear regressions within 'region' categories and store the results in a new table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute linear regressions within 'region' categories and store results in a new table\nconst regressionTable = await table.linearRegressions({\n  categories: \"region\",\n  outputTable: true,\n});\n// We log the results\nawait regressionTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enforce specific column data types when loading?","completion":"Provide a `columnTypes` map:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\", { columnTypes: { age: \"number\", name: \"string\" } });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I write the current database to a SQLite file without metadata?","completion":"Here's how you can write the current database to a SQLite file without metadata:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Write the current database to a SQLite file without metadata files\nawait sdb.writeDB(\"./my_database.sqlite\", { noMetaData: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geometries when I know the original projection?","completion":"Here's how to reproject by specifying the original projection:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./geodata.geojson\");\nawait table.reproject(\"EPSG:3347\", { from: \"EPSG:4326\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What happens if I call unnestGeo on data that doesn't have multi-part geometries?","completion":"The method will still execute but no changes will be made to single-part geometries:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We unnest geometries (no effect if already single-part)\nawait table.unnestGeo();\n// We log the first rows to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table and filter the data based on a condition?","completion":"Here's how you can clone a table and filter the data based on a condition:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\n// Load some data into tableA\nawait tableA.loadData(\"./my-data.csv\");\n// Clone tableA, including only rows where 'column1' is greater than 10\nconst tableB = await tableA.cloneTable({ conditions: `column1 > 10` });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to load multiple files and unify columns so missing columns are filled with NULL?","completion":"Here's how to load multiple files and unify columns so missing columns are filled with NULL.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from multiple files with column unification\nawait table.loadData([\n  \"https://example.com/data1.parquet\",\n  \"https://example.com/data2.parquet\"\n], { unifyColumns: true });\n// We log the table to see the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the object returned by getTypes look like?","completion":"The returned object maps column names to their data types, e.g. `{ \\\"id\\\": \\\"BIGINT\\\", \\\"name\\\": \\\"VARCHAR\\\" }`:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\\\"myTable\\\");\\nawait table.loadData(\\\"./data.csv\\\");\\nconst types = await table.getTypes();\\nconsole.log(\\\"Column types:\\\", types);\\nawait sdb.done();\\n```"}
{"prompt":"How can I view the descriptive statistics for each column in my table?","completion":"Here's how you can log column-level descriptive statistics including data types, null counts, and distinct values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We log descriptive statistics for all columns\nawait table.logDescription();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert the values in a single column to lowercase?","completion":"Here's how you can convert the values in a single column to lowercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We convert the values in 'myColumn' to lowercase\nawait table.lower(\"myColumn\");\n// We log the first rows to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify a custom name for the new table when using outputTable?","completion":"To specify a custom table name for the output, set 'outputTable' to a string value.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\nconst customTable = await table.aggregateGeo(\"intersection\", {\n  column: \"regions\",\n  outputTable: \"custom_intersection\"\n});\nawait customTable.logTable();\nawait sdb.done();\n```"}
{"prompt":"How should I interpret the result of getNbValues?","completion":"The returned number represents the total number of cells (rows × columns) in the table.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Get the total number of values\nconst nbValues = await table.getNbValues();\nconsole.log(`The table contains ${nbValues} values.`);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all column names from a table?","completion":"To retrieve all column names, call getColumns after loading data. Here's how:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get all column names from the table\nconst columns = await table.getColumns();\nconsole.log(columns); // e.g., [\"id\", \"name\", \"age\"]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute centroids if my geometries are in a specific column?","completion":"If your geometries are stored in a specific column, you can specify it like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute centroids from the 'specificGeometry' column and store in 'centroidColumn'\nawait table.centroid(\"centroidColumn\", { column: \"specificGeometry\" });\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I set a custom context window size for Ollama models?","completion":"Here's how you can set a custom context window size for Ollama models:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We use aiQuery with a custom context window size for Ollama\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { ollama: true, contextWindow: 2048 }\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `reducePrecision` method do?","completion":"It reduces the number of decimal places in the coordinates of geometries stored in a table column.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reduce the precision of geometries in the default column to 3 decimal places\nawait table.reducePrecision(3);\n// Log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use JavaScript syntax in the condition to get a row by an integer ID?","completion":"You can use JavaScript operators like `===` in the condition string to match exact values.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We get the row where id is 123 using JavaScript syntax\nconst rowById = await table.getRow(`id === 123`);\n// We log the row\nconsole.log(rowById);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometries in the two columns have different projections?","completion":"The documentation states that both columns must have the same projection. If they don't, the behavior is undefined and likely to produce incorrect results. You should ensure that the columns have the same projection before using the `inside` method.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We check if geometries in 'pointGeom' are inside 'polygonGeom', storing results in 'isInsidePolygon'\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform a cross join between two tables?","completion":"Here's how you can perform a cross join with another table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two new tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// We load data into both tables\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform cross join between tableA and tableB\nawait tableA.crossJoin(tableB);\n// Log the results\nawait tableA.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute descending ranks on a column?","completion":"To compute descending ranks on the `score` column and store them in a new `descRank` column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Compute descending ranks based on the \"score\" column\nawait table.ranks(\"score\", \"descRank\", { order: \"desc\" });\n// Log the table to see the new ranks\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I apply cloneColumnWithOffset within specific categories?","completion":"Yes, you can specify one or more category columns to partition the data. Here's an example with a single category:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We clone the 'temperature' column with an offset of 1 row within each city\nawait table.cloneColumnWithOffset(\"temperature\", \"prev_temp_by_city\", { offset: 1, categories: \"city\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I load a SQLite database file using SimpleDB?","completion":"Yes, you can load a SQLite database file. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load a SQLite database file\nawait sdb.loadDB(\"./my_database.sqlite\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a particular column for reducing geometry precision?","completion":"Yes, you can specify the column name. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We reduce the precision of geometries in the 'myGeom' column to 2 decimal places\nawait table.reducePrecision(2, { column: \"myGeom\" });\n// We log the first rows to see the reduced precision\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle the promise returned by simplify?","completion":"The simplify method returns a promise; you should await it inside an async function:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We call simplify and await its completion\nawait table.simplify(0.1);\n// After simplification, we can proceed with further operations\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I have a `SimpleTable` instance called `productsTable`. How can I remove it using this instance?","completion":"Here's how you can remove a table using a `SimpleTable` instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst productsTable = sdb.newTable(\"products\");\n// ... load data ...\nawait sdb.removeTables(productsTable);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I call `logBottom` without specifying the number of rows?","completion":"The documentation doesn't mention a default value for the `count` parameter. You must provide a number to specify how many rows to log from the bottom of the table. Here's an example of how to use it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We log the last 2 rows\nawait table.logBottom(2);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create separate latitude and longitude columns using the latLon method?","completion":"Use latLon to split the point geometry into two new columns:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Create 'latitude' and 'longitude' columns from 'geom'\nawait table.latLon(\"geom\", \"latitude\", \"longitude\");\n// Log the table to see the new columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check whether the database contains any tables?","completion":"You can check the length of the returned array:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tables = await sdb.getTables();\nif (tables.length === 0) {\n  console.log(\"No tables found\");\n} else {\n  console.log(`Found ${tables.length} tables`);\n}\nawait sdb.done();\n```"}
{"prompt":"Can I combine the suffix and decimal options when calculating horizontal proportions?","completion":"Yes, you can combine both options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We compute horizontal proportions with a custom suffix and decimal places\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"], { suffix: \"Prop\", decimals: 2 });\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I select a single table named 'orders' and remove all other tables?","completion":"Here's how you can select a single table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"orders\");\n// We select the table named 'orders' and remove all others\nawait sdb.selectTables(\"orders\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write my geospatial data to a GeoJSON file?","completion":"Here's how you can write the table's geospatial data to a GeoJSON file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the data to a GeoJSON file\nawait table.writeGeoData(\"./output.geojson\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I round the variance result to a specific number of decimal places?","completion":"Yes, you can specify the number of decimals when calling `getVar`. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Calculate variance of 'price' column rounded to 2 decimals\nconst variance = await table.getVar(\"price\", { decimals: 2 });\nconsole.log(\"Variance (rounded):\", variance);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I remove duplicate rows from my table considering all columns?","completion":"Here's how you can remove duplicate rows based on all columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove duplicate rows based on all columns\nawait table.removeDuplicates();\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I list all the table names in my SimpleDB instance?","completion":"Here's how you can log the names of all tables in your SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the average of numerical values in a column?","completion":"You can use `getValues` to retrieve numerical values and then calculate their average. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get numerical values from the 'price' column\nconst prices = await table.getValues(\"price\");\n// Calculate average price\nconst sum = prices.reduce((acc, val) => acc + Number(val), 0);\nconst avgPrice = sum / prices.length;\nconsole.log(\"Average Price:\", avgPrice);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I get the top 10 rows of a table without any filtering?","completion":"Here's how to get the top 10 rows without filtering:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the top 10 rows\nconst top10 = await table.getTop(10);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows that match multiple values in one column and a specific value in another column?","completion":"Here's how to remove rows where 'job' is 'accountant' or 'developer' and 'city' is 'Montreal':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We remove rows where 'job' is in [\"accountant\", \"developer\"] and 'city' is 'Montreal'\nawait table.remove({ job: [\"accountant\", \"developer\"], city: \"Montreal\" });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove all duplicate rows from a table?","completion":"You can call `removeDuplicates` without any options to drop duplicates based on all columns.\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Remove duplicate rows based on all columns\nawait table.removeDuplicates();\n// Log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I rename multiple columns at once?","completion":"Pass an object with multiple old-to-new mappings to `renameColumns`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Rename multiple columns: \"How old?\" to \"age\" and \"Man or woman?\" to \"sex\"\nawait table.renameColumns({ \"How old?\": \"age\", \"Man or woman?\": \"sex\" });\n// Log the table to verify the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"My data has multiple geometry columns. How does writeMap handle that?","completion":"If you have multiple geometry columns, specify which one to use:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Define the map function using a specific geometry column\nconst mapFunction = (geoJsonData: { features: unknown[] }) =>\n  plot({\n    marks: [\n      geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" })\n    ]\n  });\n// Save the map using a specific geometry column\nawait table.writeMap(mapFunction, \"./output/specific-column-map.png\", {\n  column: \"myGeometryColumn\"\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I run a SQL query that creates a new table without returning the results?","completion":"Here's how you can create a new table using a custom query without returning the results:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table by executing a SQL query (without returning data)\nawait sdb.customQuery(\n  \"CREATE TABLE young_employees AS SELECT * FROM employees WHERE age > 30\",\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I assign descending ranks to a column called 'score' and store them in a new column 'descRank'?","completion":"Here's how to assign descending ranks using the 'order' option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.ranks(\"score\", \"descRank\", { order: \"desc\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I compute the union of two geometry columns in my table?","completion":"Here's how you can compute the union of two geometry columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the union of geometries in 'geomA' and 'geomB', storing results in 'unionGeom'\nawait table.union(\"geomA\", \"geomB\", \"unionGeom\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to select a non-existent table?","completion":"It will throw an error. Here's how to handle it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\ntry {\n  // Try to select a non-existent table\n  await sdb.selectTables(\"nonExistentTable\");\n} catch (error) {\n  console.error(\"Error selecting table:\", error);\n}\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to rename a table that doesn't exist?","completion":"The method is called on an existing table instance, so it will always work as long as the table exists. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We rename the table\nawait table.renameTable(\"newName\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I store selected rows in a new table with a generated name?","completion":"To store selected rows in a new table with a generated name, set `outputTable: true` in the options.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We select 50 rows and store in new table (generated name)\nconst newTable = await table.selectRows(50, { outputTable: true });\n// We log the new table\nawait newTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the distance between two geometry columns using the default SRS unit?","completion":"Here's how you can compute the distance in the default SRS unit:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data (assumed to have columns \"geomA\" and \"geomB\")\nawait table.loadGeoData(\"./geodata.geojson\");\n// Compute distance in SRS units between \"geomA\" and \"geomB\", store in \"distance_srs\"\nawait table.distance(\"geomA\", \"geomB\", \"distance_srs\");\n// Log the table to see the new column\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I generate embeddings using a local Ollama model named \"llama2\" and enable verbose logging?","completion":"Here’s how to generate embeddings using a local Ollama model named 'llama2' and enable verbose logging:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"foodTable\");\\n// Load sample data\\nawait table.loadArray([\\n  { food: \"pizza\" },\\n  { food: \"sushi\" },\\n]);\\n// Generate embeddings with Ollama\\nawait table.aiEmbeddings(\"food\", \"embeddings\", {\\n  ollama: true,\\n  model: \"llama2\",\\n  verbose: true,\\n});\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I compute a 5-day rolling average of a 'price' column, including 2 preceding and 2 following rows?","completion":"Here's how you can compute a rolling average: \n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute a 5-day rolling average of 'price' with 2 preceding and 2 following rows\nawait table.rolling(\"price\", \"rollingAvgPrice\", \"mean\", 2, 2);\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations between all numeric columns in my dataset?","completion":"Use the `correlations` method without specifying `x` or `y` to compute all pairwise correlations:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./data.csv\");\n// Compute all correlations, overwriting the current table\nawait table.correlations();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round the correlation values to 2 decimal places?","completion":"Here's how you can compute correlations and round the values to 2 decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute correlations, rounded to 2 decimal places\nawait table.correlations({ decimals: 2 });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I configure the number of rows logged when displaying table data?","completion":"You can configure the number of rows to log using the `nbRowsToLog` option when creating a SimpleTable. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with options\nconst table = sdb.newTable(\"myTable\", {}, { nbRowsToLog: 5 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter the last row using a SQL WHERE clause?","completion":"You can pass a SQL condition string to the options object:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Get the last row where category equals 'Book'\nconst lastRowBooks = await table.getLastRow({\n  conditions: \"category = 'Book'\"\n});\nconsole.log(lastRowBooks);\nawait sdb.done();\n```"}
{"prompt":"Can I insert data from multiple tables at once?","completion":"Yes, you can insert data from multiple tables simultaneously:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create three tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nconst tableC = sdb.newTable(\"tableC\");\n// Load data into tableB and tableC\nawait tableB.loadData(\"./data1.csv\");\nawait tableC.loadData(\"./data2.csv\");\n// Insert all rows from tableB and tableC into tableA\nawait tableA.insertTables([\"tableB\", \"tableC\"]);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I rename my table to 'customers'?","completion":"Here's how you can rename the table to 'customers':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Rename the table to \"customers\"\nawait table.renameTable(\"customers\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows with quantity less than 5?","completion":"Here's how you can remove rows where the 'quantity' column is less than 5 using a numerical condition:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Remove rows where quantity is less than 5\nawait table.removeRows(`quantity < 5`);\n// Log the table to see the result\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I set a rate limit for AI requests?","completion":"Set `rateLimitPerMinute` to control request speed:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create table and load data\nconst table = sdb.newTable(\"myTable\");\nawait table.loadArray([\n  { input: \"1\" },\n  { input: \"2\" },\n]);\n// Limit requests to 5 per minute\nawait table.aiRowByRow(\n  \"input\",\n  \"output\",\n  \"Return the next number.\",\n  {\n    rateLimitPerMinute: 5\n  }\n);\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I cache my data analysis computations without setting a time-to-live?","completion":"You can cache your data analysis computations without a time-to-live using the `cache` method with a function that performs the operations.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We cache the computations (no TTL)\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter the data in my table using a condition?","completion":"You can use the `getData` method with a `conditions` option to filter the data. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We get data filtered by a condition\nconst booksData = await table.getData({ conditions: \"category === 'Book'\" });\n// We log the filtered data\nconsole.log(booksData);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute linear regression separately for each category in a column named 'region'?","completion":"Here's how you can compute linear regression within each 'region' category using the categories option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We compute linear regression within each 'region' category\nawait table.linearRegressions({ categories: \"region\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I assign a custom name to a loaded database?","completion":"To assign a custom name, pass the name option when calling loadDB:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load a database with a custom name\nawait sdb.loadDB(\"./archive.db\", { name: \"archive_db\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I view the boolean results after calling `intersect`?","completion":"After calling `intersect`, you can log the table to see the boolean results.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Perform the intersection check\nawait table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\n// Log the table to view the new boolean column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I trim whitespace from a single column named 'name'?","completion":"Here's how you can trim whitespace from a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We trim whitespace from the 'name' column\nawait table.trim(\"name\");\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass column names that do not exist in the table to `longer`?","completion":"If a column name is missing, the method will throw an error indicating the column is not found. Here’s an example that demonstrates the error handling:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./employee_counts.csv\");\ntry {\n  // '2025' does not exist in the data\n  await table.longer([\"2021\", \"2025\"], \"Year\", \"Employees\");\n} catch (e) {\n  console.error(\"Error during longer:\", e.message);\n}\nawait sdb.done();\n```"}
{"prompt":"How can I fix the y-axis scales across all small multiples?","completion":"Here's how to ensure all small multiples share the same y-axis scale:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data with date, value, and category\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-03-01\"), value: 30, category: \"A\" },\n  { date: new Date(\"2023-04-01\"), value: 40, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n  { date: new Date(\"2023-03-01\"), value: 35, category: \"B\" },\n  { date: new Date(\"2023-04-01\"), value: 45, category: \"B\" },\n];\nawait table.loadArray(data);\n// Convert date to string format\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Create small multiples with fixed y-axis scales\nawait table.logLineChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  fixedScales: true,\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"I want to use local caching and limit the rate to 20 requests per minute. How can I achieve this?","completion":"You can enable local caching and set a rate limit using the `cache` and `rateLimitPerMinute` options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadArray([{ text: \"Sample text\" }, { text: \"Another sample\" }]);\n// Generate embeddings with caching and rate limiting\nawait table.aiEmbeddings(\"text\", \"embeddings\", {\n  cache: true, // Enable local caching\n  rateLimitPerMinute: 20, // Limit requests to 20 per minute\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I limit the number of characters displayed for text-based cells?","completion":"Here's how you can set the maximum number of characters to display for text-based cells:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with nbCharactersToLog set to 20\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 20\n});\n// We close everything\nawait sdb.done();\n```\nThe `nbCharactersToLog` option limits the length of text-based cells when logging."}
{"prompt":"Can I call `logNbRows` on an empty table?","completion":"Yes, it will log `0` rows without errors.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table without loading data\nconst table = sdb.newTable();\n// Log rows on an empty table\nawait table.logNbRows();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the number of decimal places when rounding?","completion":"You can use the `decimals` option to set the number of decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Round 'price' column to 2 decimal places\nawait table.round(\"price\", { decimals: 2 });\n// Log the rounded values\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify a database file path for SimpleDB?","completion":"Here's how to set a database file path:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a database file\nconst sdb = new SimpleDB({\n  file: \"./my_database.db\"\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select a fixed number of random rows, such as 100 rows?","completion":"Here's how you can select 100 random rows:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We select 100 random rows\nawait table.sample(100);\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();```"}
{"prompt":"How do I check if a specific column exists in a table?","completion":"You can use the `hasColumn` method to verify the presence of a column.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data so the table has columns\nawait table.loadData(\"./sample-data.csv\");\n// Check if the table has a column named \"age\"\nconst hasAgeColumn = await table.hasColumn(\"age\");\nconsole.log(hasAgeColumn); // true or false\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I normalize a column within different categories (e.g., by product group)?","completion":"Here's how to normalize values within specific categories using the 'categories' option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"groupedTable\");\n// Load data from a CSV file\nawait table.loadData(\"./sales_data.csv\");\n// Normalize 'revenue' within 'product_category' groups\nawait table.normalize(\"revenue\", \"normalized_revenue\", { categories: \"product_category\" });\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use `getNbValues` to check if my data has loaded correctly?","completion":"Yes, you can use `getNbValues` to verify the number of values after loading your data. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Check the number of values to confirm data loaded correctly\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues); // Should match expected number based on your data\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I get the median value of a numeric column and round it to two decimal places?","completion":"Here's how to get the median and round to two decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the median of the 'salary' column, rounded to 2 decimal places\nconst medianSalary = await table.getMedian(\"salary\", { decimals: 2 });\nconsole.log(medianSalary);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify the data types for each column during loading?","completion":"Yes, you can use `columnTypes` to define data types. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Define column types\nconst columnTypes = {\n  id: \"number\",\n  name: \"string\"\n};\n// Load data with specified column types\nawait table.loadData(\"./data.csv\", { columnTypes });\n// Log the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I aggregate geometries by a category column, such as \"country\", and compute their union?","completion":"You can aggregate geometries by a category column like this:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Aggregate geometries by the \"country\" column\nawait table.aggregateGeo(\"union\", { categories: \"country\" });\n// Log the aggregated result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to remove rows with missing values in any column using the default settings?","completion":"Here's how to remove rows with missing values in any column (using default settings):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data\nawait table.loadData(\"./data.csv\");\n// Remove rows with missing values in any column (default behavior)\nawait table.removeMissing();\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to remove rows where price is less than 100 AND quantity is 0?","completion":"Here's how you can remove rows using JavaScript logical operators in the condition:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Remove rows where price < 100 AND quantity === 0\nawait table.removeRows(`price < 100 && quantity === 0`);\n// Log the table to see the result\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable caching of AI responses?","completion":"To cache AI responses locally, set the cache option to true:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([{ name: \"Marie\" }, { name: \"John\" }]);\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  { cache: true }\n);\nawait sdb.done();\n```"}
{"prompt":"How do I round a single column to 2 decimal places?","completion":"Here's how to round a single column to 2 decimal places:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data (replace with your CSV path)\\nawait table.loadData(\\\"./data.csv\\\");\\n// Round 'column1' values to 2 decimal places\\nawait table.round(\\\"column1\\\", { decimals: 2 });\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I perform a linear regression between two specific columns?","completion":"Here's how to compute the linear regression of 'sales' over 'advertising':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./yourdata.csv\");\n// Perform linear regression with 'advertising' as x and 'sales' as y\nawait table.linearRegressions({ x: \"advertising\", y: \"sales\" });\n// Log the results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"My geometry data is in a column named 'shape'. How can I add a column with the number of vertices for these geometries?","completion":"Here's how you can add a new column with the number of vertices for geometries in a specific column named 'shape':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add vertex counts for geometries in a specific column named 'shape'\nawait table.nbVertices(\"shapeVertices\", { column: \"shape\" });\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve an existing table named 'employees' from the SimpleDB instance?","completion":"Here's how you can retrieve a table by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We retrieve the table named \"employees\"\nconst employees = await sdb.getTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"If the column I specify in `getMax` does not exist, what will happen?","completion":"The documentation does not specify the behavior if the column does not exist. However, it is likely to return `null` or throw an error. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data here, for example:\n// await table.loadData(\"./data.csv\");\n// Assuming the data is loaded, we can try to get the maximum value from a non-existent column\nconst maxNonExistent = await table.getMax(\"nonExistentColumn\");\nconsole.log(maxNonExistent); // Likely to be null or throw an error\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to specify a geometry column when the table has multiple geometry columns?","completion":"Here's how to specify a geometry column for length computation:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a GeoJSON file\nawait table.loadGeoData(\"./routes.geojson\");\n// We compute the length of geometries in the 'routeGeom' column and store in 'routeLength'\nawait table.length(\"routeLength\", { column: \"routeGeom\" });\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable dark mode for my charts?","completion":"To enable dark mode, set the dark option to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myChartTable\");\n// Sample data\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n// Chart function using Observable Plot\ncost chartFunction = (plotData: unknown[]) =>\n  dot(plotData, { x: \"year\", y: \"value\" });\n// Output path\nconst outputPath = \"output/chart.png\";\n// Enable dark mode\nawait table.writeChart(chartFunction, outputPath, { dark: true });\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows that match either of two conditions?","completion":"You can use the OR operator to combine conditions. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load sample data\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'category' is 'Electronics' OR 'Appliances'\nawait table.removeRows(\n  `category === 'Electronics' || category === 'Appliances`);\n// Log the remaining rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the number of columns in a table after loading data?","completion":"Here’s how to load a CSV file and then retrieve the column count:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the number of columns\nconst nbColumns = await table.getNbColumns();\nconsole.log(nbColumns); // e.g., 5\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do you include data types when logging a table?","completion":"Set types to true in the options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with types shown in logs\nconst table = sdb.newTable(\n  \"myTable\",\n  {},\n  sdb,\n  { types: true }\n);\n// Load data and log it\nawait table.loadData(\"./data.csv\");\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I keep rows where a boolean column is true?","completion":"Pass true as the value for that column. Example: keep rows where isActive is true.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData('./data.csv');\n// Keep rows where isActive is true\nawait table.keep({ isActive: true });\n// Log the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I store my database in a file named \"mydb.duckdb\"?","completion":"Pass the `file` option to the constructor to specify a database file.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance that writes to mydb.duckdb\nconst sdb = new SimpleDB({ file: \"mydb.duckdb\" });\n// ... perform operations here ...\nawait sdb.done();\n```"}
{"prompt":"What does getMin return for a boolean column?","completion":"For booleans, false is considered smaller than true.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./flags.csv\"); // CSV has a \"isActive\" boolean column\nconst minBool = await table.getMin(\"isActive\");\nconsole.log(minBool); // false\nawait sdb.done();\n```"}
{"prompt":"What does the `getFirstRow` method return if no rows match my conditions?","completion":"The `getFirstRow` method returns `null` if no rows match the specified conditions. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the first row where the 'category' is 'Electronics' (assuming no such row exists)\nconst firstRowElectronics = await table.getFirstRow({ conditions: `category === 'Electronics'` });\nconsole.log(firstRowElectronics); // This will likely print null\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load only CSV files from a directory?","completion":"Specify CSV as the file type:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myData\");\nawait table.loadDataFromDirectory(\"./data/\", { fileType: \"csv\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I specify a column other than the default one to aggregate geometries from?","completion":"Here's how you can specify a column to aggregate geometries from using the 'intersection' method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We aggregate geometries in 'regions' column into their intersection\nawait table.aggregateGeo(\"intersection\", { column: \"regions\" });\n// We log the first rows to see the aggregated data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I rename my table to 'new_employees'?","completion":"Here's how you can rename a table using the `renameTable` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Rename the table to \"new_employees\"\nawait table.renameTable(\"new_employees\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a limit to the number of rows loaded from the directory?","completion":"You can use the `limit` option to specify the maximum number of rows to load. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the directory, limiting to 100 rows\nawait table.loadDataFromDirectory(\"./my_data/\", { limit: 100 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I chain skip with other operations like filter or summarize?","completion":"Yes, you can call skip before other methods. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./sales.csv\");\nawait table.skip(10); // skip header or unwanted rows\nawait table.filter({ column: \"status\", value: \"completed\" });\nawait table.summarize({ values: \"amount\", categories: \"product\", summaries: [\"sum\"] });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I use Vertex AI with aiVectorSimilarity?","completion":"Yes, you can configure aiVectorSimilarity to use Vertex AI:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"vertexSearch\");\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Use Vertex AI for similarity search\nconst results = await table.aiVectorSimilarity(\n  \"search text\",\n  \"embeddings\",\n  3,\n  {\n    vertex: true,\n    project: \"my-project-id\",\n    location: \"us-central1\",\n  }\n);\n// Log the results\nawait results.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I trim a custom character from both sides of a column?","completion":"Here’s how to trim a custom character (e.g., hyphen) from both sides of a column:\\n\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\\\"./data.csv\\\");\\nawait table.trim('hyphenColumn', { character: '-', method: 'trim' });\\nawait sdb.done();\\n```\\n"}
{"prompt":"Is there a way to fill NULLs across all columns in the table?","completion":"Yes, by passing all column names to the fill method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Fill NULLs in all columns\nawait table.fill(table.columns);\n// Display updated data\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How many rows will the resulting table have after a cross join?","completion":"The resulting table will have the product of the row counts of the two tables (n * m). You can verify this by logging the table after the join. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable(\"tableA\");\nawait tableA.loadData(\"./dataA.csv\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableB.loadData(\"./dataB.csv\");\nawait tableA.crossJoin(tableB);\n// Log the table to see the number of rows\nawait tableA.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I log the total number of rows in my table?","completion":"Here’s how you can log the total number of rows in a table:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable('myTable');\n// We load data from the file\nawait table.loadData('./data.csv');\n// We log the total number of rows\nawait table.logNbRows();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I have two tables, 'users' and 'posts'. How can I select both of them and remove any other tables?","completion":"Here's how you can select multiple tables by their names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"users\");\n// We select the tables named 'users' and 'posts' and remove all others\nawait sdb.selectTables([\"users\", \"posts\"]);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round my summarized values to a specific number of decimal places?","completion":"Here's how you can round summarized values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We summarize 'price' and 'cost' with 2 decimal places\nawait table.summarize({\n  values: [\"price\", \"cost\"],\n  decimals: 2\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I set date types for my columns using setTypes?","completion":"Yes, you can set date-related types like datetime. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"eventsTable\");\n// Set the data types including datetime\nawait table.setTypes({\n  eventID: \"integer\",\n  eventName: \"string\",\n  eventDate: \"datetime\"\n});\n// Load your data into the table\nawait table.loadData(\"./events.csv\");\n// Log the table to see the structured data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I format the x-axis values differently in a dot chart?","completion":"You can use the `formatX` option to customize x-axis formatting:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data with dates and values\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 },\n  { date: new Date(\"2023-03-01\"), value: 30 },\n  { date: new Date(\"2023-04-01\"), value: 40 },\n];\nawait table.loadArray(data);\n// Convert dates to string format\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Format x-axis as 'Month Year'\nawait table.logDotChart(\"date\", \"value\", {\n  formatX: (d) => new Date(d).toLocaleString('default', { month: 'long', year: 'numeric' })\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join and store the result in a new table with a specific name?","completion":"To store the cross-joined result in a new table with a specific name, set `outputTable` to the desired table name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data from two CSV files\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform cross join and store in new table named \"tableC\"\nconst tableC = await tableA.crossJoin(tableB, { outputTable: \"tableC\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace all occurrences of a specific string within a single column?","completion":"Here's how you can replace all occurrences of a string in a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Replace all occurrences of \"kilograms\" with \"kg\" in 'column1'\nawait table.replace(\"column1\", { \"kilograms\": \"kg\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve a list of all installed DuckDB extensions?","completion":"You can use the `getExtensions` method to get all installed extensions. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get list of installed extensions\nconst extensions = await sdb.getExtensions();\nconsole.log(extensions);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I combine logging specific rows and including types?","completion":"Yes, you can combine these options in a single call:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log 15 rows with column types\nawait table.logTable({ nbRowsToLog: 15, types: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I sort all columns in ascending order?","completion":"Here's how you can sort all columns in ascending order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We sort all columns in ascending order\nawait table.sort();\n// We log the table to see the sorted data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load only the first 100 rows from each file in a directory?","completion":"Use the `limit` option to restrict rows per file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data with row limit\nawait table.loadDataFromDirectory(\"./data/\", { limit: 100 });\n// We log the table to verify limited rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use the cache method to store computations so they only run once unless the function changes?","completion":"Here’s how you can cache a computation so it only runs once unless the function changes.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData('items.csv');\n  await table.summarize({\n    values: 'price',\n    categories: 'department',\n    summaries: ['min', 'max', 'mean'],\n  });\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I compute the union of two geometry columns and store the result in a new column?","completion":"Here's how you can compute the union of two geometry columns and store the result in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// We compute the union of geometries in 'geomA' and 'geomB', storing results in 'unionGeom'\nawait table.union(\"geomA\", \"geomB\", \"unionGeom\");\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data type will the values returned by `getValues` have?","completion":"The `getValues` method returns an array of `string | number | boolean | Date | null`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Get all values from the 'date' column\nconst dates = await table.getValues(\"date\");\nconsole.log(dates); // e.g., [\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Do I need to sort the data before using the rolling method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"sortedTable\");\nawait table.loadData(\"./unsorted.csv\");\n// Sort by the column that defines the order of the rolling window\nawait table.sort(\"date\");\n// Now compute the rolling aggregation\nawait table.rolling(\"sales\", \"rollingAvgSales\", \"mean\", 3, 3);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate all geometries in the default column into a single union geometry?","completion":"Use the `aggregateGeo` method with the \"union\" method and no options.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Aggregate all geometries into a single union geometry\nawait table.aggregateGeo(\"union\");\n// Log the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the distance using the spheroid method and store the result in kilometers?","completion":"Here's how you can calculate the distance using the spheroid method and store the result in kilometers:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.geojson\");\n// We calculate the Spheroid distance between 'area1' and 'area2' in kilometers\nawait table.distance(\"area1\", \"area2\", \"distance_spheroid_km\", {\n  method: \"spheroid\",\n  unit: \"km\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the specified column does not contain geometries?","completion":"The method will throw an error indicating that the column is not a geometry column. You should ensure the column type is correct before calling.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./my-geodata.geojson\");\ntry {\n  // Attempt to fill holes in a non-geometry column\n  await table.fillHoles(\"nonGeometryColumn\");\n} catch (err) {\n  console.error(\"Error filling holes:\", err.message);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I get all values from the 'price' column in my table?","completion":"Here's how you can retrieve all values from the 'price' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"priceTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We get all values from the 'price' column\nconst prices = await table.getValues(\"price\");\n// We log the prices to see the result\nconsole.log(prices);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I rename a table before loading data?","completion":"Rename a table before loading data to set a meaningful name:\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"temp\");\\nawait table.renameTable(\"sales_data\");\\nawait table.loadData(\"./sales.csv\");\\nawait sdb.done();\\n```"}
{"prompt":"How can I set specific data types for my table columns?","completion":"Here's how you can set data types for your table columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Set data types for the columns\nawait table.setTypes({\n  name: \"string\",\n  age: \"integer\",\n  salary: \"float\"\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I skip more rows than the table contains?","completion":"Skipping more rows than exist results in an empty table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load a small CSV file\nawait table.loadData(\"./small.csv\");\n// Skip 100 rows, more than the table has\nawait table.skip(100);\n// Log the table to see it is empty\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the last 10 rows in their original order instead of reverse order?","completion":"Set `originalOrder: true` in the options to preserve the original row sequence:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Get last 10 rows in original order\nconst bottom10Original = await table.getBottom(10, { originalOrder: true });\nconsole.log(bottom10Original);\nawait sdb.done();\n```"}
{"prompt":"Can I compute all possible linear regressions between numeric columns without specifying x and y?","completion":"Yes, omitting x and y will compute regressions for all numeric column permutations:"}
{"prompt":"How can I fix invalid geometries in my geospatial data?","completion":"Here's how you can fix invalid geometries in your data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We fix invalid geometries in the default geometry column\nawait table.fixGeo();\n// We log the first rows to see the fixed data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a column with an offset, grouped by a specific category?","completion":"Here's how you can clone a column with an offset, grouped by the 'city' category:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Clone 'temperature' as 'prev_temp_by_city', offsetting by 1 row within each 'city' category\nawait table.cloneColumnWithOffset(\"temperature\", \"prev_temp_by_city\", {\n  offset: 1,\n  categories: \"city\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the table names to load data into a SimpleTable?","completion":"Here’s how to use the table names to load data into a SimpleTable:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nfor (const name of tableNames) {\n  const table = sdb.newTable(name);\n  await table.loadData(`./${name}.csv`);\n  await table.logTable();\n}\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table to a new table with a default name?","completion":"Here's how you can clone a table to a new table with a default generated name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\n// Load some data into tableA\nawait tableA.loadData(\"./my-data.csv\");\n// Clone tableA to a new table with a default generated name\nconst tableB = await tableA.cloneTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the original projection of the data if it cannot be detected automatically?","completion":"If the projection cannot be detected automatically, you can specify it with the from option:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data and specify the original projection\nawait table.loadGeoData('./some-data.geojson', { from: 'EPSG:3857' });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the intersection results to identify rows where geometries overlap?","completion":"After computing the intersection, you can inspect the new boolean column to find overlapping rows. For example, log only rows where `doIntersect` is true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"geoTable\");\nawait table.loadGeoData(\"./my-geodata.geojson\");\nawait table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\n// Log rows where the geometries intersect\nawait table.logTable({ filter: row => row.doIntersect === true });\nawait sdb.done();\n```"}
{"prompt":"How can I right-trim multiple columns in my data table?","completion":"Here's how you can right-trim multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Right-trim the 'description' and 'notes' columns\nawait table.trim([\"description\", \"notes\"], { method: \"rightTrim\" });\n// Log the table to see the results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"Is it possible to control the width of the bar chart?","completion":"Yes, you can control the width of the bar chart using the `width` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data\nconst data = [\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n];\n// Load the data into the table\nawait table.loadArray(data);\n// Log the bar chart with a custom width\nawait table.logBarChart(\"category\", \"value\", {\n  width: 60,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I combine multiple options when logging a histogram?","completion":"You can mix options like bins, compact, width, and custom labels:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.logHistogram(\"age\", {\n  bins: 15,\n  compact: true,\n  width: 40,\n  formatLabels: (min, max) => `${min}-${max} yrs`\n});\nawait sdb.done();\n```"}
{"prompt":"How do I remove one specific column from my table?","completion":"Here's how you can remove a single column named 'tempColumn':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data with multiple columns\nawait table.loadData(\"./sample_data.csv\");\n// Remove the 'tempColumn' from the table\nawait table.removeColumns(\"tempColumn\");\n// Log the remaining columns to verify removal\nconsole.log(await table.columns());\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log the last few rows of my table?","completion":"Here's how you can log the bottom rows of your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Log the last 5 rows (last row first)\nawait table.logBottom(5);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `isValidGeo` method return?","completion":"The `isValidGeo` method returns a promise that resolves when the validity check is complete. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a new column named 'isValid' to store the validity results\nawait table.isValidGeo(\"isValid\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data type does the `getColumns` method return?","completion":"The `getColumns` method returns a Promise that resolves to an array of strings. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the column names\nconst columns = await table.getColumns();\n// We log the type of columns\nconsole.log(typeof columns);\n// We log the type of the elements inside columns\nconsole.log(typeof columns[0]);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What input does the `logExtent` method require?","completion":"The `logExtent` method requires the name of the numeric column for which you want to log the extent. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We log the extent of the 'salary' column\nawait table.logExtent(\"salary\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute lengths from a specific geometry column?","completion":"You can specify the geometry column using the options parameter:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the length of geometries in the 'routeGeom' column and store it in 'routeLength'\nawait table.length(\"routeLength\", { column: \"routeGeom\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove a table from the database?","completion":"Here's how you can remove a table using the `removeTable` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We remove the table\nawait table.removeTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform a spatial join between two tables based on intersecting geometries?","completion":"Here's how you can merge two tables where their geometries intersect:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load geospatial data into both tables\nawait tableA.loadGeoData(\"./dataA.geojson\");\nawait tableB.loadGeoData(\"./dataB.geojson\");\n// Perform a spatial join where geometries intersect\nawait tableA.joinGeo(tableB, \"intersect\");\n// Log the joined data\nawait tableA.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I round a column down to the nearest integer?","completion":"To round a column down to the nearest integer (floor method), use method: 'floor' in options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Round 'price' column down to nearest integer\nawait table.round(\"price\", { method: \"floor\" });\n// Log the rounded table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows in a table using a simple SQL condition?","completion":"Use the `filter` method with a SQL `WHERE` clause to keep only rows that match the condition.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./sales.csv\");\n// Keep only rows where the 'fruit' column is not 'apple'\nawait table.filter(`fruit != 'apple'`);\n// Log the filtered table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to rename the table to the same name it already has?","completion":"Here's how you can try renaming the table to the same name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Rename the table to \"myTable\"\nawait table.renameTable(\"myTable\");\n// Rename the table to \"myTable\" again\nawait table.renameTable(\"myTable\");\n// We close everything\nawait sdb.done();\n```\nThe method will execute without error, effectively doing nothing."}
{"prompt":"How do I compute the centroid of geometries in the default column and store it in a new column?","completion":"Here is how you can compute the centroid of geometries in the default column and store it in a new column:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable('geoTable');\n// We load geospatial data from a file\nawait table.loadGeoData('./my-geodata.geojson');\n// We compute the centroid of geometries in the default column, storing results in 'centerPoint'\nawait table.centroid('centerPoint');\n// We log the first rows to see the computed centroids\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I perform linear regression separately for each category in a column (e.g., region)?","completion":"Use the `categories` option to run regression within each category group.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data with a 'region' column\nawait table.loadData(\"./data_with_regions.csv\");\n// We compute regression within each region category\nawait table.linearRegressions({ categories: \"region\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Why can’t updateWithJS be used on tables that contain geometries?","completion":"updateWithJS cannot be used on geometry tables because it requires transferring all rows to JavaScript, which is not supported for spatial data. The following code will throw an error.\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./locations.geojson\");\n// Attempting to update will fail\nawait table.updateWithJS((rows) => {\n  // This line will not be reached\n  return rows;\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the bounding box of the default geometry column in my table?","completion":"Here’s how to retrieve the bounding box of the default geometry column:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Get bounding box of default geometry column\nconst bbox = await table.getBoundingBox();\nconsole.log(bbox); // e.g., [45.0, -75.0, 46.0, -73.0]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace NULL values in multiple columns with a string?","completion":"You can replace NULLs in several columns at once by passing an array of column names and the replacement string:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Replace NULLs in 'columnA' and 'columnB' with \"N/A\"\nawait table.replaceNulls([\"columnA\", \"columnB\"], \"N/A\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove multiple columns from my table?","completion":"Here's how you can remove multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We remove multiple columns: 'column1' and 'column2'\nawait table.removeColumns([\"column1\", \"column2\"]);\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I find out the column names in my table?","completion":"Here's how you can retrieve the schema of your table to see the column names and data types:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the schema\nconst schema = await table.getSchema();\n// We log the schema\nconsole.table(schema);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the top 5 rows where the category is 'Books' using SQL syntax?","completion":"Here is how you can get the top 5 rows where the category is 'Books' using SQL syntax:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the top 5 rows where category is 'Books'\nconst top5Books = await table.getTop(5, { conditions: \"category = 'Books'\" });\nconsole.log(top5Books);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform a spatial join where geometries in the left table are entirely within the right table?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load geospatial data for both tables\nawait tableA.loadGeoData(\"./dataA.geojson\");\nawait tableB.loadGeoData(\"./dataB.geojson\");\n// Perform 'inside' join (left geometries entirely within right)\nawait tableA.joinGeo(tableB, \"inside\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove a table from my database?","completion":"You can use the `removeTable` method to delete a table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We remove the table from the database\nawait table.removeTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I switch my chart to dark mode?","completion":"You can switch your chart to dark mode by setting the `dark` option to `true`. Here's an example:\n```\nimport { dot, plot } from \"@observablehq/plot\";\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: \"year\", y: \"value\" }),\n    ],\n  });\n\nconst outputPath = \"output/chart.png\";\nconst darkOptions = { dark: true };\n\nawait table.writeChart(chartFunction, outputPath, darkOptions);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I speed up embedding generation by allowing multiple concurrent requests?","completion":"To speed up embedding generation, you can allow multiple concurrent requests by setting the `concurrent` option:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"foodTable\");\\nawait table.loadArray([\\n  { food: \"pizza\" },\\n  { food: \"sushi\" },\\n]);\\nawait table.aiEmbeddings(\"food\", \"embeddings\", {\\n  concurrent: 5,\\n});\\nawait sdb.done();\\n```"}
{"prompt":"How can I compute vertical proportions within a specific category column?","completion":"To compute proportions within a specific category column, pass the category column name to the options.categories parameter:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData('./data.csv');\n// Compute proportions for 'sales' column within each 'region', store in 'salesPerc'\nawait table.proportionsVertical('sales', 'salesPerc', {\n  categories: 'region',\n});\n// View results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I cache the AI responses to avoid reprocessing the same data?","completion":"You can enable caching by setting `cache: true` in the options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load sample data\nawait table.loadArray([\n  { name: \"Marie\" },\n  { name: \"John\" },\n  { name: \"Alex\" },\n]);\n// We apply the AI prompt with caching enabled\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  { cache: true }\n);\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use options when writing the database?","completion":"You can pass an options object to customize the write behavior:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Write the current database with custom options\nawait sdb.writeDB(\"./my_exported_database.db\", { noMetaData: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What parameters does the `wider` method require?","completion":"The `wider` method requires two parameters: `columnsFrom` and `valuesFrom`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We restructure the table, pivoting 'Year' into new columns with 'Employees' as values\nawait table.wider(\"Year\", \"Employees\");\n// We log the table to see the restructured data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nIn this example, `columnsFrom` is set to \"Year\" and `valuesFrom` is set to \"Employees\"."}
{"prompt":"How do I perform a cross join and store the result in a new table with a generated name?","completion":"Use outputTable: true to store the result in a new table with a generated name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data from two files\nawait tableA.loadData(\"./data1.csv\");\nawait tableB.loadData(\"./data2.csv\");\n// Perform cross join and store in a new table (with generated name)\nconst tableC = await tableA.crossJoin(tableB, { outputTable: true });\nawait tableC.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add a separator between concatenated values?","completion":"You can pass a separator string in the options object. For example, to separate values with a comma and space:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./locations.csv\");\n// Concatenate 'city' and 'country' into 'location' with a comma separator\nawait table.concatenate([\"city\", \"country\"], \"location\", { separator: \", \" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I use the `longer` method to restructure my table?","completion":"Here's how you can use the `longer` method to stack columns into a long format:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data\nawait table.loadData(\"./employee_counts.csv\");\n// We restructure the table by stacking year columns into 'Year' and 'Employees'\nawait table.longer([\"2021\", \"2022\", \"2023\"], \"Year\", \"Employees\");\n// We log the transformed table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nThis will transform your wide format data into a long format."}
{"prompt":"How can I fill NULL values in a specific column using Simple Data Analysis?","completion":"Here's how you can fill NULL values in a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Fill NULL values in 'sales' column with previous non-NULL value\nawait table.fill(\"sales\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I add a new column with ranks based on the values in an existing column?","completion":"Here's how you can add a new column with ranks based on an existing column's values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadData(\"./my-data.csv\");\n// Add a new column named 'rank' based on the 'score' column (ascending order)\nawait table.ranks(\"score\", \"rank\");\n// Log the table to see the new 'rank' column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the tables have different columns and I don't set `unifyColumns`?","completion":"If tables have different columns and `unifyColumns` is not set, `insertTables` will throw an error. You can catch this error to handle it gracefully.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create two tables with different schemas\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableB.loadData(\"./dataB.csv\");\ntry {\n  // Attempt to insert rows from tableB into tableA without unifying columns\n  await tableA.insertTables(\"tableB\");\n} catch (err) {\n  console.error(\"Insert failed due to column mismatch:\", err.message);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What information does getDescription return?","completion":"The getDescription method returns an array of objects, each containing statistics for a column:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst description = await table.getDescription();\n// Print the raw JSON to see the structure\nconsole.log(JSON.stringify(description, null, 2));\nawait sdb.done();\n```"}
{"prompt":"How can I check if the default geometry column is closed and store the result in a new column named 'isClosed'?","completion":"Here's how you can check the default geometry column for closure and store results in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Check if default geometry column is closed and store in 'isClosed'\nawait table.isClosedGeo(\"isClosed\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load all supported data files from a directory?","completion":"Here’s how to load all files from a directory:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/');\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass a count larger than the number of rows in the table?","completion":"If the count exceeds the number of rows, logBottom will simply log all available rows:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load a small dataset\nawait table.loadData(\"./small.csv\");\n// Attempt to log 100 rows, but only the existing rows will be shown\nawait table.logBottom(100);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I cross join and store the results in a new table with a custom name?","completion":"This example shows how to cross join and store results in a new table named 'crossJoinedTable'.\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable('tableA');\nconst tableB = sdb.newTable('tableB');\n// Load data into both tables\nawait tableA.loadData('./dataA.csv');\nawait tableB.loadData('./dataB.csv');\n// Perform cross join, store results in a new table named 'crossJoinedTable'\nconst resultTable = await tableA.crossJoin(tableB, { outputTable: 'crossJoinedTable' });\n// Log the resulting table\nawait resultTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clean the AI response before storing it?","completion":"Provide a clean function to preprocess the response:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([{ name: \"Marie\" }, { name: \"John\" }]);\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  {\n    clean: (response) => response.trim().replace(/[^A-Za-z]/g, \"\")\n  }\n);\nawait sdb.done();\n```"}
{"prompt":"How can I create a dark-themed map?","completion":"Enable dark mode and customize the appearance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Define the map function for dark mode\nconst mapFunction = (geoJsonData: { features: unknown[] }) =>\n  plot({\n    marks: [\n      geo(geoJsonData, { stroke: \"#ffffff\", fill: \"#2b4073\" })\n    ]\n  });\n// Save the map in dark mode\nawait table.writeMap(mapFunction, \"./output/dark-map.png\", {\n  dark: true,\n  style: \"background-color: #1a1a1a;\"\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"If you want to validate data before inserting, you can use the types returned by getTypes. For example, to ensure the \"id\" column is a BIGINT before inserting a new row:","completion":"If you want to validate data before inserting, you can use the types returned by getTypes. For example, to ensure the \\\"id\\\" column is a BIGINT before inserting a new row:\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\\\"users\\\");\\nawait table.loadData(\\\"./users.csv\\\");\\nconst dataTypes = await table.getTypes();\\nif (dataTypes[\\\"id\\\"] === \\\"BIGINT\\\") {\\n  // proceed with insertion logic here\\n  console.log(\\\"id column is BIGINT, safe to insert.\\\");\\n} else {\\n  console.error(\\\"id column is not BIGINT, aborting insertion.\\\");\\n}\\nawait sdb.done();\\n```"}
{"prompt":"What if my geometries are stored in a column named \"regions\" instead of the default?","completion":"Specify the column name in the options:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Aggregate geometries in the \"regions\" column\nawait table.aggregateGeo(\"intersection\", { column: \"regions\" });\n// Log the aggregated result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I view the last few rows of my dataset?","completion":"You can use the `logBottom` method to display the bottom rows. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the last 10 rows\nawait table.logBottom(10);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute horizontal proportions with the default options?","completion":"Here’s how to compute horizontal proportions with default options:\\n```javascript\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Assume the table is already loaded with data\\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"]);\\n// Log the table to see the new proportion columns\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I enable verbose logging for debugging?","completion":"You can enable verbose logging by setting the `verbose` option to `true`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n]);\n// Generate embeddings for the \"food\" column and store them in a new \"embeddings\" column.\nawait table.aiEmbeddings(\"food\", \"embeddings\", {\n  verbose: true, // Enable verbose logging\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the tables have different columns?","completion":"If tables have different columns, you can unify them using the `unifyColumns` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create three tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nconst tableC = sdb.newTable(\"tableC\");\n// Load data into tableB and tableC with different schemas\nawait tableB.loadData(\"./data1.csv\");\nawait tableC.loadData(\"./data2.csv\");\n// Insert rows from both tables, unifying columns\nawait tableA.insertTables([\"tableB\", \"tableC\"], { unifyColumns: true });\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"Can I categorize by multiple columns at the same time?","completion":"Yes, you can categorize by multiple columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Add a 'salesRank' column based on 'sales' within 'department' and 'city' categories\nawait table.ranks(\"sales\", \"salesRank\", { categories: [\"department\", \"city\"] });\n// Log the table to see the new 'salesRank' column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write my geospatial data to a GeoJSON file?","completion":"Here's how you can write the table's geospatial data to a GeoJSON file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the data to a GeoJSON file\nawait table.writeGeoData(\"./output.geojson\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I want to use local caching for my embeddings. How do I enable it?","completion":"You can enable local caching by setting the `cache` option to `true` in the `aiEmbeddings` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadArray([{ text: \"example\" }]);\n// Generate embeddings with caching enabled\nawait table.aiEmbeddings(\"text\", \"embeddings\", { cache: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the maximum date from a column like 'createdAt'?","completion":"To find the latest date in the 'createdAt' column, load your data and use getMax. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the maximum (latest) date from the 'createdAt' column\nconst latestDate = await table.getMax(\"createdAt\");\nconsole.log(\"Latest date:\", latestDate);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I unnest geometries after simplifying them?","completion":"You can chain the methods like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Simplify the geometries first\nawait table.simplify(0.01);\n// Then unnest them\nawait table.unnestGeo();\n// We log the first rows to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I sort a single column in ascending order?","completion":"Here's how you can sort a single column in ascending order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We sort 'column1' in ascending order\nawait table.sort({ column1: \"asc\" });\n// We log the table to see the sorted data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I set contextWindow and thinkingBudget for Ollama models?","completion":"Specify contextWindow and thinkingBudget in the options:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([{ name: \"Marie\" }, { name: \"John\" }]);\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  {\n    ollama: true,\n    contextWindow: 2048,\n    thinkingBudget: 50\n  }\n);\nawait sdb.done();\n```"}
{"prompt":"How can I get the median value of a numeric column without rounding?","completion":"Here's how to get the median without rounding:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file (assumed to have an 'age' column)\nawait table.loadData(\"./data.csv\");\n// Get the median of the 'age' column without rounding\nconst medianAge = await table.getMedian(\"age\");\nconsole.log(medianAge);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I limit the number of AI requests per minute?","completion":"Set rateLimitPerMinute to throttle requests:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([{ name: \"Marie\" }, { name: \"John\" }]);\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  { rateLimitPerMinute: 10 }\n);\nawait sdb.done();\n```"}
{"prompt":"How can I round the variance result to a specific number of decimal places?","completion":"Use the `decimals` option to round the variance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"salesTable\");\nawait table.loadData(\"./sales.csv\");\n// Get variance rounded to 2 decimal places\nconst roundedVariance = await table.getVar(\"amount\", { decimals: 2 });\nconsole.log(roundedVariance); // e.g., 10.23\nawait sdb.done();\n```"}
{"prompt":"How can I get the bounding box of the default geometry column in my table?","completion":"Here's how you can get the bounding box of the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// Get the bounding box of the default geometry column\nconst bbox = await table.getBoundingBox();\nconsole.log(bbox);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load geospatial data from a local .geojson file?","completion":"Here's how you can load a local .geojson file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data from a local .geojson file\nawait table.loadGeoData(\"./data.geojson\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Why is logTypes async and how should I handle it?","completion":"Because it performs I/O to log to the console, you must await it or use .then():\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Await the async logTypes call\nawait table.logTypes();\n// Or use .then()\n// table.logTypes().then(() => console.log(\"Types logged\"));\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I select only the 'id' and 'name' columns from my table?","completion":"Here's how you can select specific columns using the `selectColumns` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We select only the 'id' and 'name' columns\nawait table.selectColumns(['id', 'name']);\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I install the Simple Data Analysis library using Deno?","completion":"Use the following command to add the library to your Deno project:\n```bash\n# Deno installation command\n\nden add jsr:@nshiab/simple-data-analysis\n```"}
{"prompt":"How can I trim a specific character, such as an asterisk, from both ends of a column?","completion":"Specify the character in the options object; the default method trims from both sides.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Trim asterisks from the beginning and end of 'productCode'\nawait table.trim(\"productCode\", { character: \"*\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I control the number of rows displayed when logging a table?","completion":"Here's how to set the number of rows to display:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with row limit\nconst sdb = new SimpleDB({\n  nbRowsToLog: 10\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add extra instructions to the prompt for better context?","completion":"Add extra instructions to the prompt for better context.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([\n  { name: \"Marie\" },\n  { name: \"John\" },\n  { name: \"Alex\" },\n]);\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  { extraInstructions: \"Also consider cultural context when guessing gender.\" }\n);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I specify a custom suffix for the new proportion columns?","completion":"Yes, you can use the `suffix` option to customize the suffix. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data\nawait table.loadData(\"./sample_data.csv\");\n// Compute horizontal proportions with custom suffix 'Ratio'\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"], {\n  suffix: \"Ratio\"\n});\n// Log the updated table with new ratio columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load geospatial data from a local file?","completion":"Here’s how to load geospatial data from a local file:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a local file\nawait table.loadGeoData('./some-data.geojson');\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the cumulative sum of sales in my dataset?","completion":"Here's how you can compute the cumulative sum of sales:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// Compute cumulative sum of 'sales' in a new column\nawait table.accumulate(\"sales\", \"cumulativeSales\");\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I write the database without creating metadata files?","completion":"To write the database without metadata files, set the `noMetaData` option to true:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// ... perform operations on the database ...\nawait sdb.writeDB(\"./my_exported_database.sqlite\", { noMetaData: true });\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve a list of all table names in my database?","completion":"Here's how you can retrieve all table names in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\n// Log the table names\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I simplify the interior of the geometries while preserving the original boundary?","completion":"You can use the `simplifyBoundary` option set to `false` to preserve the boundary. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify geometries with a tolerance of 0.05, preserving the boundary\nawait table.simplify(0.05, { simplifyBoundary: false });\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I perform a cross join and store the result in a new table with a generated name?","completion":"To store the cross-joined result in a new table with a generated name, set `outputTable: true`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data from two CSV files\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform cross join and store in new table with generated name\nconst tableC = await tableA.crossJoin(tableB, { outputTable: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the two geometry columns have different projections?","completion":"Both geometry columns must share the same projection; otherwise intersect will throw an error. ```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"geoTable\");\\nawait table.loadGeoData(\"./geodata1.geojson\");\\n// Assume 'geomB' comes from a different projection\\ntry {\\n  await table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\\n} catch (e) {\\n  console.error(\"Projection mismatch:\", e);\\n}\\nawait sdb.done();```"}
{"prompt":"What happens if I call getSkew on a non-numeric column?","completion":"It will throw an error. Here's how to handle it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data into the table\nawait table.loadData(\"./yourdata.csv\");\ntry {\n  // Attempt to get skewness of non-numeric column 'name'\n  const skewness = await table.getSkew(\"name\");\n} catch (error) {\n  console.error(\"Error: \", error);\n}\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I clone a column and offset its values by one row, but only within each category of another column?","completion":"Here's how you can clone a column and offset its values by one row within each category of another column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Clone 'temperature' as 'prev_temp_by_city', offsetting by 1 row within each 'city' category\nawait table.cloneColumnWithOffset(\"temperature\", \"prev_temp_by_city\", {\n  offset: 1,\n  categories: \"city\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter data using a condition written in JavaScript syntax (e.g., using `===`)?","completion":"Here's how to filter data using a JavaScript condition:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Filter data where category equals 'Book' using JavaScript syntax\nconst booksData = await table.getData({ conditions: `category === 'Book'` });\n// We log the filtered result\nconsole.log(booksData);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a buffer of 5 units around the default geometry column and store results in a new column named 'buffered'?","completion":"Here's how to create a buffer around the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// We create a buffer of 5 units around the default geometry column\nawait table.buffer(\"buffered\", 5);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I normalize a column and round the results to two decimal places?","completion":"Use the 'decimals' option to round normalized values. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Normalize 'data' values rounded to 2 decimal places\nawait table.normalize(\"data\", \"normalizedData\", { decimals: 2 });\n// Log the table to see rounded results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove a table from the database?","completion":"You can use the `removeTable` method to remove a table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Remove the current table from the database\nawait table.removeTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I sample 100 random rows from a table?","completion":"Here’s how to sample 100 random rows from a table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Sample 100 random rows\nawait table.sample(100);\n// Log the sampled rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the cumulative sum of a single column?","completion":"Here's how you can calculate the cumulative sum of a column named 'sales' and store it in a new column called 'cumulativeSales':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data here, for example:\n// await table.loadData(\"./my-data.csv\");\n// Ensure your data is sorted before accumulating.\n// For example, sort by date.\n// await table.sort(\"date\");\n// Compute the cumulative sum of 'sales' in a new 'cumulativeSales' column\nawait table.accumulate(\"sales\", \"cumulativeSales\");\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the 90th percentile of a column and round the result to two decimal places?","completion":"Pass decimals: 2 in options to round the result. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get 90th percentile of 'score' column, rounded to 2 decimals\nconst percentile90 = await table.getQuantile(\"score\", 0.9, { decimals: 2 });\nconsole.log(`90th percentile: ${percentile90}`);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I handle geospatial data that is not in WGS84 projection?","completion":"Here's how you can load geospatial data that is not in WGS84 projection:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data and specify the original projection\nawait table.loadGeoData(\"./some-data.shp.zip\", { toWGS84: true, from: \"EPSG:32610\" });\n// We log the first rows to verify the data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I store the similarity results in a new output table?","completion":"Store the similarity results in a new table by using outputTable:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([\n  { food: 'pizza' },\n  { food: 'sushi' },\n]);\nawait table.aiEmbeddings('food', 'embeddings');\nconst similar = await table.aiVectorSimilarity(\n  'pizza',\n  'embeddings',\n  5,\n  { outputTable: 'similar_foods' }\n);\nawait similar.logTable();\nawait sdb.done();\n```"}
{"prompt":"What does the `returnDataFrom` option do?","completion":"It controls whether the query result is returned or not; set it to \"none\" to skip returning data.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Query that returns data\nconst data = await sdb.customQuery(\n  \"SELECT COUNT(*) AS cnt FROM employees\",\n  { returnDataFrom: \"query\" }\n);\nconsole.log(data);\n// Query that does not return data\nawait sdb.customQuery(\n  \"UPDATE employees SET salary = salary * 1.05 WHERE age > 50\",\n  { returnDataFrom: \"none\" }\n);\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use `getSum` on a non-numeric column?","completion":"The documentation doesn't specify the behavior when using `getSum` on a non-numeric column. However, it's reasonable to expect an error or unexpected result. Here's an example demonstrating its usage with a numeric column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data (assuming a CSV file named 'data.csv' exists)\nawait table.loadData(\"./data.csv\");\n// Calculate the sum of the 'price' column\nconst totalPrice = await table.getSum(\"price\");\nconsole.log(totalPrice); // Output the total price\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleTable?","completion":"Create a table from a SimpleDB instance:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a map from my geospatial data using writeMap?","completion":"Here's how you can create and save a map from your GeoJSON data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Define the map function using Observable Plot\nconst mapFunction = (geoJsonData: { features: unknown[] }) =>\n  plot({\n    marks: [\n      geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" }),\n    ],\n  });\n// Save the map as a PNG file\nawait table.writeMap(mapFunction, \"./output/map.png\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the median of a column named 'sales' in my table?","completion":"Here's how you can calculate the median (50th percentile) of the 'sales' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./sales_data.csv\");\n// Calculate the median of the 'sales' column\nconst median = await table.getQuantile(\"sales\", 0.5);\nconsole.log(median);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clean my column names using SimpleDataAnalysis?","completion":"Here's how you can clean your table's column names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We clean all column names in the table\nawait table.cleanColumnNames();\n// We log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get information about my table's columns?","completion":"You can use the `logDescription` method to log descriptive information about your table's columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log descriptive information about the columns\nawait table.logDescription();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What are the different trimming methods available?","completion":"You can choose between `leftTrim`, `rightTrim`, or `trim` (both sides) using the `method` option.\n\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Right-trim whitespace from 'description' and 'notes'\nawait table.trim([\"description\", \"notes\"], { method: \"rightTrim\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I load multiple arrays into the same table?","completion":"Yes, you can load multiple arrays into the same table. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// First array of data\nconst firstData = [\n  { letter: \"a\", number: 1 },\n  { letter: \"b\", number: 2 }\n];\n// Load the first array\nawait table.loadArray(firstData);\n// Second array of data\nconst secondData = [\n  { letter: \"c\", number: 3 },\n  { letter: \"d\", number: 4 }\n];\n// Load the second array\nawait table.loadArray(secondData);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I use SQL-like conditions to filter the data?","completion":"Yes, you can use SQL-like conditions within the `conditions` option of the `getData` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We get data filtered by a condition\nconst booksData = await table.getData({ conditions: `category = 'Book'` });\nconsole.log(booksData);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What are the required parameters for the `intersect` method?","completion":"The `intersect` method requires three parameters: `column1`, `column2`, and `newColumn`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Check if geometries in 'geomA' and 'geomB' intersect, storing results in 'doIntersect'\nawait table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the mean value of a specific numeric column in my dataset?","completion":"Here's how you can calculate the mean value of a numeric column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Calculate and log the mean of the 'age' column\nconst meanAge = await table.getMean(\"age\");\nconsole.log(\"Mean age:\", meanAge);\n// We close everything\nawait sdb.done();\n```\nThis code calculates the average value of the 'age' column in your dataset."}
{"prompt":"How do I log descriptive information for all columns after loading data?","completion":"Use the `logDescription` method after loading your data into the table.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Log descriptive information for all columns\nawait table.logDescription();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What if I want to change types of an existing table?","completion":"To change types of an existing table, use the convert method instead of setTypes. Example:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\n// Convert existing columns to new types\nawait table.convert({\n  age: 'float',\n  salary: 'integer',\n});\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a particular column for reducing geometry precision?","completion":"Yes, you can specify the column using the `options` parameter. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We reduce the precision of geometries in the 'myGeom' column to 2 decimal places\nawait table.reducePrecision(2, { column: \"myGeom\" });\n// We log the first rows to see the reduced precision data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What does the `getExtensions` method return?","completion":"The `getExtensions` method returns a promise that resolves to an array of objects. Each object represents an installed extension and contains information about it. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We get the list of extensions\nconst extensions = await sdb.getExtensions();\n// We log the extensions to the console\nconsole.log(extensions); // Output: [{ extension_name: \"spatial\", loaded: true, ... }]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I find out the data types of the columns in my table?","completion":"Here's how you can use the `getTypes` method to retrieve the data types of each column in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the data types of all columns\nconst dataTypes = await table.getTypes();\nconsole.log(dataTypes);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I change the delimiter and skip initial lines in a CSV file?","completion":"Use delim and skip options to customize parsing:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { delim: \";\", skip: 2 });\nawait sdb.done();\n```"}
{"prompt":"Can I use boolean values to replace NULLs?","completion":"Yes, you can use any valid TypeScript value including booleans:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a new instance\nconst sdb = new SimpleDB();\n// Create table and load data\nconst table = sdb.newTable();\nawait table.loadData(\"./survey.csv\");\n// Replace NULL responses with false\nawait table.replaceNulls([\"question1\", \"question2\"], false);\n// Log the updated responses\nawait table.logTable();\n// Close connection\nawait sdb.done();\n```"}
{"prompt":"What if my table has no geometry column?","completion":"Calling nbVertices on a table without a geometry column will result in an error because the method cannot find a geometry to count vertices:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load non-geospatial data\nawait table.loadData('path/to/your/data.csv');\n// Attempt to add vertex counts (will throw an error)\nawait table.nbVertices('vertexCount');\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the average value of a column named 'price' in my table?","completion":"Here's how you can calculate the average of the 'price' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./my-data.csv\");\n// Calculate the mean of the 'price' column\nconst meanPrice = await table.getMean(\"price\");\nconsole.log(meanPrice);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I extract a substring from one column and update another column with it?","completion":"Here's how you can extract a substring from one column and update another column with it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Update 'column1' with the left 5 characters of 'column2'\nawait table.updateColumn(\"column1\", `LEFT(column2, 5)`);\n// Log the table to see the updated values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript logical operators in removeRows conditions?","completion":"Yes, you can use JavaScript syntax. For example, to remove rows where quantity is less than 5 and price is greater than 10:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"inventory\");\nawait table.loadData(\"./inventory.csv\");\nawait table.removeRows(`quantity < 5 && price > 10`);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What does the `updateWithJS` method do and how can I use it?","completion":"updateWithJS allows you to modify table rows by providing a JavaScript function that receives and returns an array of row objects.\n\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Update rows using a JS function\nawait table.updateWithJS((rows) => {\n  // modify rows here\n  return rows;\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if a string is shorter than the requested number of characters?","completion":"If a string is shorter than the requested number of characters, right returns the entire string without error. \n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./shortcodes.csv\");\nawait table.right(\"shortCode\", 5);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I specify the precision of the coordinates when writing to a GeoJSON file?","completion":"Yes, you can specify the precision of the coordinates when writing to a GeoJSON file using the `precision` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the data to a GeoJSON file with a precision of 6 decimal places\nawait table.writeGeoData(\"./output_high_precision.geojson\", { precision: 6 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I unnest geometries in the default geometry column without specifying a column name?","completion":"Here's how to unnest geometries in the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// We unnest geometries in the default column\nawait table.unnestGeo();\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the area of geometries in square meters and store the result in a new column named 'area_m2'?","completion":"Here's how to compute area in square meters and store in 'area_m2':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// Compute area in square meters and store in 'area_m2'\nawait table.area(\"area_m2\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I determine the number of columns in my table?","completion":"Here's how you can use the `getNbColumns` method to find the number of columns in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the number of columns\nconst nbColumns = await table.getNbColumns();\n// We log the number of columns\nconsole.log(nbColumns);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I do not provide the `decimals` option when calling `getStdDev`?","completion":"Without the `decimals` option, the method returns the raw standard deviation value without rounding.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We compute the standard deviation of the 'height' column without rounding\nconst heightStdDev = await table.getStdDev(\"height\");\nconsole.log(heightStdDev); // e.g., 5.234567890123\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove multiple tables at once?","completion":"Here's how to remove multiple tables by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get GeoJSON data with polygon coordinates rewound for D3.js compatibility?","completion":"Set `rewind: true` in the options object to rewind polygon coordinates for D3.js.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./data.geojson\");\nconst geojson = await table.getGeoData(undefined, { rewind: true });\nconsole.log(geojson);\nawait sdb.done();\n```"}
{"prompt":"How can I get and display the descriptive statistics for my table's columns?","completion":"Here's how you can get and log the descriptive statistics of your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the descriptive statistics\nconst description = await table.getDescription();\n// Log the statistics in a table format\nconsole.table(description);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve all table names from the SimpleDB instance?","completion":"Here's how to get all table names in alphabetical order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve all table names\nconst tableNames = await sdb.getTableNames();\n// Log the table names\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I safely handle different data types in a column?","completion":"Here's how you can safely modify values based on their type:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Handle different types in 'valueColumn'\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    valueColumn: typeof d.valueColumn === \"number\"\n      ? d.valueColumn * 2\n      : typeof d.valueColumn === \"string\"\n      ? d.valueColumn.toUpperCase()\n      : d.valueColumn,\n  }));\n  return modifiedRows;\n});\n// We log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I retrieve all data from a table without any filtering?","completion":"Here's how to get all data from a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get all data without filtering\nconst allData = await table.getData();\n// We log the result\nconsole.log(allData);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert linestrings in a specific column to polygons?","completion":"Here's how you can convert linestrings in a specific column to polygons:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We transform closed linestrings in the 'routeLines' column into polygons\nawait table.linesToPolygons(\"routeLines\");\n// We log the first rows to see the transformed data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I format the labels of the histogram bins?","completion":"You can format the labels using the `formatLabels` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./age_data.csv\");\n// We generate a histogram with custom labels for the 'age' column\nawait table.logHistogram(\"age\", {\n  formatLabels: (min, max) => `${min}-${max} years`,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I check if multiple columns exist in my table?","completion":"Yes, you can loop through each column name and use `hasColumn` for each. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// List of columns to check\nconst columnsToCheck = [\"name\", \"age\", \"email\"];\n// Check each column\nfor (const col of columnsToCheck) {\n  const exists = await table.hasColumn(col);\n  console.log(`Does the table have ${col} column?`, exists);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform an inner join between `tableA` and `tableB` using the `id` column as the common key and store the result in a new table named `tableC`?","completion":"Here's how you can perform an inner join and store the result in a new table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into the tables (replace with your actual data loading)\nawait tableA.loadData(\"./data1.csv\");\nawait tableB.loadData(\"./data2.csv\");\n// Perform an inner join with 'tableB' on the 'id' column, storing results in a new table named 'tableC'\nconst tableC = await tableA.join(tableB, {\n  commonColumn: \"id\",\n  type: \"inner\",\n  outputTable: \"tableC\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I see the column names and their data types?","completion":"Here's how you can log the column names along with their data types:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We log the column names and their types\nawait table.logColumns({ types: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a table with geospatial projections?","completion":"Create a table with geospatial projections:\\n\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// We create a new table with a projection for the 'location' column\\nconst table = sdb.newTable('geo', { location: 'EPSG:4326' });\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I calculate the median of a column named 'income' and round the result to 2 decimal places?","completion":"Here's how you can calculate the median of the 'income' column and round it to 2 decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We calculate the median of the 'income' column, rounded to 2 decimal places\nconst medianIncome = await table.getMedian(\"income\", { decimals: 2 });\nconsole.log(medianIncome);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I store the aggregated results in a new table?","completion":"Use the `outputTable` option to create a new table with the results:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We aggregate geometries and store results in a new table\nconst aggregatedTable = await table.aggregateGeo(\"intersection\", { outputTable: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the variance of a numeric column using SimpleTable?","completion":"You can use the `getVar` method after loading your data. Here’s a simple example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your CSV data\nawait table.loadData(\"./data.csv\");\n// Get the variance of the \"sales\" column\nconst variance = await table.getVar(\"sales\");\nconsole.log(variance); // e.g., 25.5\n// We close everything\nawait sdb.done();\n```"}