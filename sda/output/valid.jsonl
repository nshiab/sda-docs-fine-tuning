{"prompt":"What are the limitations of `updateWithJS`?","completion":"updateWithJS cannot be used on tables that contain geometry columns.\n\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Attempting to use updateWithJS on a table with geometries will throw an error\ntry {\n  await table.updateWithJS((rows) => rows);\n} catch (e) {\n  console.error('Error:', e.message);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I log the last 10 rows of a table?","completion":"Hereâ€™s how to log the last 10 rows of a table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Log the last 10 rows (last row first)\nawait table.logBottom(10);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify any categories when using outliersIQR?","completion":"Outlier detection will be performed across the entire column without grouping. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We detect outliers in 'value' column without any grouping\nawait table.outliersIQR(\"value\", \"isOutlier\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I retrieve the top 5 rows where the 'category' is 'Books'?","completion":"Here's how you can retrieve the top 5 rows where the 'category' is 'Books':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the top 5 rows where the category is 'Books'\nconst top5Books = await table.getTop(5, { conditions: `category === 'Books'` });\n// We log the results\nconsole.log(top5Books);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax for conditions in getData?","completion":"JavaScript syntax can also be used for conditions by passing a string that evaluates to a boolean expression.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst expensiveInStock = await table.getData({ conditions: \"price > 20 && inStock === true\" });\nconsole.log(expensiveInStock);\nawait sdb.done();\n```"}
{"prompt":"How can I ensure my random sample is repeatable using a seed?","completion":"Here's how to use a seed for repeatable sampling with the sample method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Select 10% of rows with a fixed seed\nawait table.sample(\"10%\", { seed: 123 });\n// Log the sampled table\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"Can I compute proportions with multiple categories and rounded decimals?","completion":"Yes, you can combine both features. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute proportions for 'sales' within multiple categories and round to 3 decimals\nawait table.proportionsVertical(\"sales\", \"sales_proportion\", {\n  categories: [\"region\", \"product_type\"],\n  decimals: 3\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I load all supported data files from a directory into a SimpleTable?","completion":"Here is how to load all supported files from a directory:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load all supported data files from the \"./data/\" directory\nawait table.loadDataFromDirectory(\"./data/\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add a new numeric column that sums two existing columns?","completion":"Use `addColumn` with a float type and a SQL expression that adds the two columns:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data first\nawait table.loadData(\"./sales.csv\");\n// Add a new column 'total' as a float, calculated from 'price' and 'quantity'\nawait table.addColumn(\"total\", \"float\", \"price + quantity\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert a date column named 'event_date' to a string with the format 'YYYY-MM-DD HH:MM:SS'?","completion":"Convert datetime values to strings using a specific date format:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Convert 'event_date' to string with format YYYY-MM-DD HH:MM:SS\nawait table.convert({ event_date: \"string\" }, { datetimeFormat: \"%Y-%m-%d %H:%M:%S\" });\n// We close everything\nawait sdb.done();```"}
{"prompt":"How can I enable dark mode for my charts?","completion":"To enable dark mode, set the dark option to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myChartTable\");\n// Sample data\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n// Chart function using Observable Plot\ncost chartFunction = (plotData: unknown[]) =>\n  dot(plotData, { x: \"year\", y: \"value\" });\n// Output path\nconst outputPath = \"output/chart.png\";\n// Enable dark mode\nawait table.writeChart(chartFunction, outputPath, { dark: true });\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify a particular column to use for buffering?","completion":"You can specify a column using the `options` parameter. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We create a buffer of 10 units around geometries in the 'pointsGeom' column,\n// storing the results in 'pointsBuffer'\nawait table.buffer(\"pointsBuffer\", 10, { column: \"pointsGeom\" });\n// We log the first rows to see the buffered data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load a CSV file and specify a custom delimiter?","completion":"Here's how you can load a CSV file with a custom delimiter using the `loadData` method. This example uses a semicolon (`;`) as the delimiter."}
{"prompt":"How do I compute a cumulative sum within a single category?","completion":"Here's how you can compute a cumulative sum within a single category:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Note: Ensure the table is sorted by the category column and then by the order column before calling accumulate.\nawait table.accumulate(\"orders\", \"cumulativeOrders\", { categories: \"customer_id\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a column using the default offset of 1 row?","completion":"Use the method without specifying the offset to apply the default value of 1.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadData(\"./sample.csv\");\n// Clone 'value' as 'previous_value' with default offset of 1\nawait table.cloneColumnWithOffset(\"value\", \"previous_value\");\n// Log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific DuckDB extension is loaded?","completion":"You can filter the list of installed extensions to check for a specific one. For example, checking if the 'spatial' extension is loaded:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get the list of installed extensions\nconst extensions = await sdb.getExtensions();\n// Check if 'spatial' extension is loaded\nconst isSpatialLoaded = extensions.some(ext => ext.extension_name === \"spatial\" && ext.loaded);\nconsole.log(\"Is spatial extension loaded?\", isSpatialLoaded);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the cumulative sum of a column grouped by multiple categories?","completion":"Here's how you can compute the cumulative sum of 'revenue' grouped by 'region' and 'product_category' and store the results in 'cumulativeRevenue':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We compute the cumulative sum of 'revenue' within 'region' and 'product_category' categories\nawait table.accumulate(\"revenue\", \"cumulativeRevenue\", {\n  categories: [\"region\", \"product_category\"],\n});\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round a column's values down to the nearest integer?","completion":"Here's how you can round a column's values down to the nearest integer:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We round the 'price' column down to the nearest integer (floor)\nawait table.round(\"price\", { method: \"floor\" });\n// We log the table to see the rounded values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the two geometry columns have different projections?","completion":"`removeIntersection` requires both columns to share the same projection; if they differ, the method will throw an error. You can catch this error as follows:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./geodata1.geojson\"); // projection A\nawait table.loadGeoData(\"./geodata2.geojson\"); // projection B\ntry {\n  await table.removeIntersection(\"geomA\", \"geomB\", \"result\");\n} catch (err) {\n  console.error(\"Projection mismatch error:\", err.message);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I enable dark mode for the generated map image?","completion":"Enable dark mode by setting the `dark` option to true.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./my-geodata.geojson');\nimport { geo, plot } from '@observablehq/plot';\nconst mapFunction = (geoJsonData) =>\n  plot({\n    projection: { type: 'mercator', domain: geoJsonData },\n    marks: [geo(geoJsonData, { stroke: 'white', fill: 'darkgray' })],\n  });\nawait table.writeMap(mapFunction, './output/darkMap.png', { dark: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use multiple columns to create new columns when using the wider method?","completion":"Yes, you can specify multiple columns by passing an array to `columnsFrom`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"employeeCounts\");\n// We load data from the file\nawait table.loadData(\"./department-employees.csv\");\n// We restructure the table by pivoting 'Year' and another column into columns with 'Employees' as values\nawait table.wider([\"Year\", \"Quarter\"], \"Employees\");\n// We log the transformed table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nThis will create new columns based on unique combinations of values from both 'Year' and 'Quarter' columns."}
{"prompt":"How do I compute distances in kilometers using the Haversine method?","completion":"Here's how to use Haversine with kilometers:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// Load WGS84 geospatial data\nawait table.loadGeoData(\"./wgs84_points.geojson\");\n// Compute Haversine distance in kilometers\nawait table.distance(\"pointA\", \"pointB\", \"distance_km\", {\n  method: \"haversine\",\n  unit: \"km\"\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I get the schema of my table?","completion":"Here's how you can retrieve and log the schema of your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We get the schema of the table\nconst schema = await table.getSchema();\n// We log the schema in a readable table format\nconsole.table(schema);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve a list of all table names in the database?","completion":"Here's how you can retrieve all table names in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names from the database\nconst tableNames = await sdb.getTableNames();\n// Log the table names to the console\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geometries to EPSG:3347 without specifying the original projection?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// Reproject to EPSG:3347 (auto-detecting original projection and geometry column)\nawait table.reproject(\"EPSG:3347\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I call `hasColumn` before loading any data into the table?","completion":"Calling `hasColumn` before loading data will always return `false` because no columns exist yet. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"emptyTable\");\n// Check for a column before loading data\nconst exists = await table.hasColumn(\"price\");\nconsole.log(exists); // false\n// Now load data and check again\nawait table.loadData(\"./data.csv\");\nconst existsAfter = await table.hasColumn(\"price\");\nconsole.log(existsAfter); // true or false depending on the file\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set fixed y-axis scales for small multiples?","completion":"Here's how to set fixed y-axis scales for small multiples using the `fixedScales` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load sample data with category column\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n];\nawait table.loadArray(data);\n// Convert date column to string for display\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Log line chart with fixed y-axis scales for small multiples\nawait table.logLineChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  fixedScales: true,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I load only specific file types when loading data from a directory?","completion":"Yes, you can specify the file type to load. For example, loading only CSV files:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"csvFiles\");\nawait table.loadDataFromDirectory(\n  \"./data/\",\n  { fileType: \"csv\" }\n);\nawait sdb.done();\n```"}
{"prompt":"How can I use aiQuery to generate and execute a SQL query based on a prompt?","completion":"Here's how you can use aiQuery with a simple prompt:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./employees.csv\");\n// We use aiQuery to generate and execute a SQL query\nawait table.aiQuery(\n  \"Give me the average salary by department\"\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I limit the number of characters logged for string columns and include data types in the log?","completion":"Use `nbCharactersToLog` and `types` options when creating the table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create a new table with character and type logging options\nconst table = sdb.newTable(\"logOptions\", {}, { nbCharactersToLog: 50, types: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use the longer method to reshape a table?","completion":"Hereâ€™s how to use the longer method to reshape a table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadData(\"./employee_counts.csv\");\n// Reshape the table by stacking year columns into 'Year' and 'Employees'\nawait table.longer([\"2021\", \"2022\", \"2023\"], \"Year\", \"Employees\");\n// Log the reshaped table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the column name I provide already exists in the table?","completion":"If the column name already exists, the method will overwrite the existing column with the new row numbers. Hereâ€™s an example that demonstrates overwriting:\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\"./data.csv\");\\n// First add a column named 'rowNumber'\\nawait table.addRowNumber(\"rowNumber\");\\n// Add another column with the same name to overwrite it\\nawait table.addRowNumber(\"rowNumber\");\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"Can I load an array with mixed data types into my table?","completion":"Yes, you can load arrays containing various data types. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"mixedData\");\n// Define your array with mixed data types\nconst data = [\n  { id: 1, name: \"Item 1\", price: 29.99, active: true },\n  { id: 2, name: \"Item 2\", price: null, active: false },\n];\n// Load the array into the table\nawait table.loadArray(data);\n// Log the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the distance between two geometry columns using the default SRS units?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./geodata.csv\");\n// We compute distance between 'geomA' and 'geomB' in SRS units, store in 'distance_srs'\nawait table.distance('geomA', 'geomB', 'distance_srs');\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I group the summary by multiple categories, such as 'region' and 'product_type'?","completion":"Explanation: Summarize 'sales' grouped by both 'region' and 'product_type'.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"myTable\");\\nawait table.loadData(\"./data.csv\");\\nawait table.summarize({ values: \"sales\", categories: [\"region\", \"product_type\"] });\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How can I check if geometries in my table are valid and store the results in a new column?","completion":"Use `isValidGeo` without specifying a geometry column to auto-detect it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./data.geojson\");\n// Automatically detects geometry column and stores validity in 'isValid'\nawait table.isValidGeo(\"isValid\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I convert a string column to datetime with a specific format?","completion":"You can specify the datetime format using the `datetimeFormat` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Convert 'dateColumn' to datetime with format \"YYYY-MM-DD\"\nawait table.convert({ dateColumn: \"datetime\" }, { datetimeFormat: \"%Y-%m-%d\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the minimum and maximum values for a specific column using getExtent?","completion":"Here's how you can retrieve the extent (min and max) of a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the extent (min and max) of the 'temperature' column\nconst extent = await table.getExtent(\"temperature\");\n// Log the result to see the min and max values\nconsole.log(extent);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I offset a column by two rows to compare with a value two rows back?","completion":"Here's how you can specify an offset of 2 rows to create a 'two_days_ago' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data with a 'sales' column\nawait table.loadData(\"./sales_data.csv\");\n// Clone 'sales' as 'sales_2_days_ago' with offset 2\nawait table.cloneColumnWithOffset(\"sales\", \"sales_2_days_ago\", { offset: 2 });\n// Log results to verify the offset\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select the first 100 rows of a table?","completion":"Hereâ€™s how to select the first 100 rows:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Select the first 100 rows\nawait table.selectRows(100);\n// Log the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if geometries in a specific column named 'boundary' are closed and store the result in a new column named 'boundaryClosed'?","completion":"Here's how you can check the closed status of a specific geometry column and store the result in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We check closed status of 'boundary' column and store in 'boundaryClosed'\nawait table.isClosedGeo(\"boundaryClosed\", { column: \"boundary\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the correlation between two specific columns?","completion":"Specify both x and y in the options to compute the correlation between two columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlation between 'column1' and 'column2'\nawait table.correlations({ x: \"column1\", y: \"column2\" });\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging for cache operations?","completion":"Enable verbose cache logging by setting `cacheVerbose: true` in the SimpleDB constructor:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with verbose cache logging\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// We create a new table\nconst table = sdb.newTable();\n// We cache the data loading and summarization\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get a description of the columns in my table?","completion":"Here's how you can use the `getDescription` method to get descriptive statistics for each column in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the description of the columns\nconst description = await table.getDescription();\n// We log the description to the console\nconsole.table(description);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I flip coordinates in the default geometry column of a table?","completion":"Hereâ€™s how to flip coordinates in the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Flip coordinates in default geometry column\nawait table.flipCoordinates();\n// Log table\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"Is logTypes synchronous or asynchronous?","completion":"logTypes is asynchronous; you must await it before proceeding:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"metrics\");\nawait table.loadData(\"./metrics.csv\");\n// Await the async logTypes call\nawait table.logTypes();\nawait sdb.done();\n```"}
{"prompt":"How can I add metadata to the GeoJSON output?","completion":"You can add metadata to the GeoJSON output using the `metadata` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the data to a GeoJSON file with metadata\nawait table.writeGeoData(\"./output_with_metadata.geojson\", { metadata: { source: \"SimpleDataAnalysis\" } });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I verify that columns have been removed?","completion":"After removing columns, you can log the table to confirm they are gone:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('inventory');\nawait table.loadData('./inventory.csv');\nawait table.removeColumns(['oldField']);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I specify the original projection when auto-detection fails?","completion":"If auto-detection fails, specify the original projection with the `from` option.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Reproject from EPSG:4326 to EPSG:3347\nawait table.reproject('EPSG:3347', { from: 'EPSG:4326' });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I find out the column names in my table?","completion":"Here's how you can retrieve the schema of your table to see the column names and data types:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the schema\nconst schema = await table.getSchema();\n// We log the schema\nconsole.table(schema);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I create multiple tables and want to see their names?","completion":"The `logTableNames` method will show all table names regardless of when they were created. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create multiple tables\nsdb.newTable(\"sales\");\nsdb.newTable(\"customers\");\nsdb.newTable(\"products\");\n// Log all table names\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```\nThis will display the names of all tables in alphabetical order."}
{"prompt":"How can I add metadata to my GeoJSON output?","completion":"Here's how you can include custom metadata in your GeoJSON output:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the geospatial data with custom metadata\nawait table.writeGeoData(\"./output_with_metadata.geojson\", {\n  metadata: { source: \"My Geo Data Project\" }\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I retrieve the last 10 rows of a table using the default behavior?","completion":"Hereâ€™s how to get the last 10 rows (the last row first) using `getBottom`:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your file path)\nawait table.loadData(\"./data.csv\");\n// Get the last 10 rows (last row first)\nconst bottom10 = await table.getBottom(10);\nconsole.log(bottom10);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I pass an empty projections object?","completion":"You can pass an empty projections object; the table will have no projections.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"noProj\", {});\\n// No additional code needed\\nawait sdb.done();\\n```"}
{"prompt":"Is the `getTables` method synchronous or asynchronous, and how do I handle the result?","completion":"The `getTables` method is asynchronous and returns a Promise. You should use `await` to handle the result. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the number of tables\nconsole.log(tables.length);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometry columns have different projections when calling `union`?","completion":"If the columns have different projections, the method will throw an error.\\n\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadGeoData(\"./polygons.geojson\");\\ntry {\\n  await table.union(\"geomA\", \"geomB\", \"unionGeom\");\\n} catch (err) {\\n  console.error(\"Projection mismatch:\", err);\\n}\\nawait sdb.done();\\n```"}
{"prompt":"Can I aggregate geometries by category?","completion":"Yes, you can aggregate geometries within each category using the `categories` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We aggregate geometries by 'country' and 'region'\nawait table.aggregateGeo(\"union\", { categories: [\"country\", \"region\"] });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I identify outliers in a column, grouped by categories?","completion":"Here's how you can identify outliers in a column, grouped by categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We identify outliers in the 'sales' column, grouped by 'region' categories, and store the results in a new 'isOutlier' column\nawait table.outliersIQR(\"sales\", \"isOutlier\", { categories: \"region\" });\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `getColumns` method return?","completion":"The `getColumns` method returns a Promise that resolves to an array of strings. Each string in the array represents a column name in the table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the column names\nconst columns = await table.getColumns();\n// We log the column names\nconsole.log(columns);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute linear regressions with a specific column as the independent variable and all other numeric columns as dependent variables?","completion":"Here's how you can compute linear regressions with a specific column as the independent variable:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute linear regressions with 'column1' as the independent variable\nawait table.linearRegressions({ x: \"column1\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I install the Simple Data Analysis library using Deno?","completion":"Here's how to install the library using Deno:\n```bash\ndeno add jsr:@nshiab/simple-data-analysis\n```"}
{"prompt":"How can I start binning from a specific value instead of the columnâ€™s minimum?","completion":"You can specify a custom start value using the options parameter:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Assign bins starting at 0 with an interval of 10\nawait table.bins(\"column1\", 10, \"bins\", { startValue: 0 });\n// Log the table to see the new 'bins' column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I keep the loaded database attached instead of detaching it?","completion":"To keep the database attached, set `detach` to `false`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load the database and keep it attached\nawait sdb.loadDB(\"./my_database.sqlite\", { detach: false });\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I validate the AI's response before storing it?","completion":"Validate AI responses with a `test` function:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./people.csv');\nawait table.aiRowByRow(\n  'name',\n  'gender',\n  'Guess whether the name is a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".',\n  {\n    test: (dataPoint: unknown) => {\n      if (typeof dataPoint !== 'string' || !['Man', 'Woman', 'Neutral'].includes(dataPoint)) {\n        throw new Error(`Invalid response: ${dataPoint}`);\n      }\n    }\n  }\n);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What should I do after flipping coordinates to maintain correct projections?","completion":"Flipping coordinates can invalidate stored projections; you should reset or update the projection metadata after the operation.\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Flip coordinates in the default geometry column\nawait table.flipCoordinates();\n// Update the projection to match the new coordinate order (example: WGS84)\nawait table.setProjection(\"EPSG:4326\");\n// Log the table to verify changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate a 5-day rolling average of a 'price' column and store the result in a new column called 'rollingPrice'?","completion":"Here's how you can calculate a rolling average and store it in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data here, for example:\n// await table.loadData(\"./my-data.csv\");\n// Compute a 5-day rolling average of 'price' with 2 preceding and 2 following rows\nawait table.rolling(\"price\", \"rollingPrice\", \"mean\", 2, 2);\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load geospatial data from a GeoJSON file?","completion":"Here's how you can load geospatial data from a GeoJSON file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a local GeoJSON file\nawait table.loadGeoData(\"./path/to/your/geodata.geojson\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the centroid of a specific geometry column named 'areaGeom'?","completion":"Here is how to compute the centroid of a specific geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute centroid of the 'areaGeom' column, store in 'areaCentroid'\nawait table.centroid(\"areaCentroid\", { column: \"areaGeom\" });\n// Log the table to see the new centroid column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load a GeoJSON file from a URL?","completion":"Here's how you can load a GeoJSON file from a URL:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the URL\nawait table.loadGeoData(\"https://example.com/my-data.geojson\");\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I customize the appearance of my chart using CSS?","completion":"You can customize the chart's appearance using the `style` option. Here's an example:\n```\nimport { dot, plot } from \"@observablehq/plot\";\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: \"year\", y: \"value\" }),\n    ],\n  });\n\nconst outputPath = \"output/chart.png\";\nconst styleOptions = { style: \"font-family: sans-serif;\" };\n\nawait table.writeChart(chartFunction, outputPath, styleOptions);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable caching when generating embeddings?","completion":"To cache embeddings locally, use the `cache` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data into the table\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n]);\n// Generate embeddings with caching enabled\nawait table.aiEmbeddings(\"food\", \"embeddings\", {\n  cache: true,\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I create an index on the embeddings column to speed up the search?","completion":"Set the `createIndex` option to `true` in the `aiVectorSimilarity` call to create an index:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"indexedTable\");\n// Load data\nawait table.loadArray([\n  { description: \"A beautiful sunset\" },\n  { description: \"A calm ocean\" },\n  { description: \"A bustling city\" }\n]);\n// Generate embeddings for the \"description\" column\nawait table.aiEmbeddings(\"description\", \"embeddings\", { cache: true });\n// Find the 2 most similar descriptions to \"sunset\" and create an index\nconst results = await table.aiVectorSimilarity(\n  \"sunset\",\n  \"embeddings\",\n  2,\n  { createIndex: true }\n);\nawait results.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I round the proportions to two decimal places?","completion":"You can specify the number of decimals. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute proportions for 'column1' within 'column2', rounded to two decimals\nawait table.proportionsVertical(\"column1\", \"perc\", {\n  categories: \"column2\",\n  decimals: 2\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the number of rows to load from a CSV file?","completion":"Here's how you can specify the number of rows to load from a CSV file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file, limiting the number of rows to 100\nawait table.loadData(\"./my-data.csv\", { limit: 100 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to use bins with the default start value?","completion":" By default, bins uses the minimum value in the specified column as the starting point. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.bins(\"column1\", 10, \"bins\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve all values from a specific column in my table?","completion":"You can use the `getValues` method to get all values from a specified column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get all values from the 'productName' column\nconst productNames = await table.getValues(\"productName\");\nconsole.log(productNames); // e.g., [\"Laptop\", \"Mouse\", \"Keyboard\"]\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I round the proportions to three decimal places without using categories?","completion":"Here's how you can compute vertical proportions and round to three decimal places without categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We compute proportions for 'column1' and store in 'perc', rounded to 3 decimals\nawait table.proportionsVertical(\"column1\", \"perc\", {\n  decimals: 3,\n});\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I select a specific number of random rows from my table?","completion":"Here's how you can select a specific number of random rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We sample 50 random rows\nawait table.sample(50);\n// We log the first rows to see the sampled data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve all tables in the SimpleDB instance?","completion":"Here is how you can retrieve all tables:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the number of tables\nconsole.log(`Found ${tables.length} tables`);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the standard deviation of a column named 'price' and round the result to 2 decimal places?","completion":"Here's how you can calculate the standard deviation of the 'price' column and round the result to 2 decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./product_data.csv\");\n// We calculate the standard deviation of the 'price' column, rounded to 2 decimal places\nconst priceStdDev = await table.getStdDev(\"price\", { decimals: 2 });\nconsole.log(priceStdDev); // e.g., 5.25\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the mean of a numeric column and round the result to two decimal places?","completion":"To calculate the mean of a numeric column and round the result to two decimal places, use the `getMean` method with the `decimals` option.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Calculate the mean of the 'salary' column, rounded to 2 decimal places\nconst meanSalary = await table.getMean(\"salary\", { decimals: 2 });\n// Log the result\nconsole.log(meanSalary);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the returned data types to filter columns by type?","completion":"You can filter columns by type after retrieving the types, for example to get all numeric columns:\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\\\"myTable\\\");\\nawait table.loadData(\\\"./data.csv\\\");\\nconst types = await table.getTypes();\\nconst numericColumns = Object.entries(types)\\n  .filter(([, type]) => type.includes(\\\"INT\\\") || type.includes(\\\"FLOAT\\\"))\\n  .map(([col]) => col);\\nconsole.log(\\\"Numeric columns:\\\", numericColumns);\\nawait sdb.done();\\n```"}
{"prompt":"How do I count the number of occurrences for each value in a column?","completion":"You can combine `getValues` with a reduce function to count values. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get all values and count occurrences\nconst counts = await table.getValues(\"category\").then(values => {\n  return values.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n});\nconsole.log(counts);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute correlations between a specific column and all other numeric columns?","completion":"Specify the `x` option to focus on one column while correlating it with all others:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./data.csv\");\n// Compute correlations of 'sales' with all other numeric columns\nawait table.correlations({ x: \"sales\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I log table names after adding a new table?","completion":"Yes, you can log after each newTable call:\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Create a table\\nconst table = sdb.newTable(\"orders\");\\n// Log names now\\nawait sdb.logTableNames();\\n// Add another table\\nconst table2 = sdb.newTable(\"products\");\\n// Log again\\nawait sdb.logTableNames();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I replace multiple strings across multiple columns?","completion":"Here's how to replace multiple strings across 'column1' and 'column2':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We replace 'oldValue1' with 'newValue1' and 'oldValue2' with 'newValue2' in both columns\nawait table.replace([\"column1\", \"column2\"], { \"oldValue1\": \"newValue1\", \"oldValue2\": \"newValue2\" });\n// We log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I fill NULL values in multiple columns at once?","completion":"Yes, you can fill NULL values in multiple columns simultaneously. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Fill NULL values in both 'sales' and 'revenue' columns\nawait table.fill([\"sales\", \"revenue\"]);\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I join two tables on multiple columns?","completion":"Pass an array of column names to the commonColumn option.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Join on both \"name\" and \"category\" columns\nawait tableA.join(tableB, {\n  commonColumn: [\"name\", \"category\"],\n  type: \"left\",\n});\n// Log the joined table\nawait tableA.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I simplify geometries using the default settings?","completion":"Hereâ€™s how to simplify geometries in the default column with a tolerance of 0.1:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData('./my-geodata.geojson');\n// Simplify geometries with default column and tolerance\nawait table.simplify(0.1);\n// Log the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I limit the number of rows loaded from each file?","completion":"Use the limit option to cap rows:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { limit: 100 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I skip the first 10 rows of my table?","completion":"You can use the `skip` method to remove the first 10 rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Skip the first 10 rows\nawait table.skip(10);\n// Log the remaining rows to verify\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the geospatial data from my table as a GeoJSON object?","completion":"Here's how you can retrieve the GeoJSON data from the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We get the GeoJSON data\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use `aiQuery` to get the average salary by department and enable caching?","completion":"Here's how you can use the `aiQuery` method to get the average salary by department and enable caching. The generated query will be cached locally in the `.journalism-cache` directory. Remember to add `.journalism-cache` to your `.gitignore` file."}
{"prompt":"How do I retrieve all column names from a table?","completion":"You can call the `getColumns` method after loading data into the table.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data so the table has columns\nawait table.loadData(\"./data.csv\");\n// Get all column names\nconst columns = await table.getColumns();\nconsole.log(columns); // e.g., [\"id\", \"name\", \"age\"]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data types can I use when adding a new column?","completion":"You can use JavaScript types like 'number' or 'string', or SQL types like 'integer', 'float', 'varchar', etc. Here's an example using the 'integer' type:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Add a new column 'new_column' as an integer\nawait table.addColumn(\"new_column\", \"integer\", \"1\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set the data types for columns in a new table?","completion":"You can set column data types using the `setTypes` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We set the data types for columns\nawait table.setTypes({\n  name: \"string\",\n  salary: \"integer\",\n  raise: \"float\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I view the results of the `inside` operation after it completes?","completion":"After calling `inside`, you can log the table to see the new boolean column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadGeoData(\"./geodata.geojson\");\n// Perform inside check\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n// Log the table to view the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a geometry column and none is automatically detected?","completion":"If no geometry column is found, the method will throw an error. Ensure your data contains a column with line geometries or explicitly provide the column name using the `column` option.\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./my-lines.csv\");\n// This will error if no geometry column is detected\ntry {\n  await table.length(\"length_m\");\n} catch (e) {\n  console.error(\"No geometry column found:\", e.message);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I update a column with a conditional expression?","completion":"You can use SQL's CASE statement for conditional updates:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Set 'status' to 'active' where 'isActive' is true\nawait table.updateColumn(\n  \"status\",\n  \"CASE WHEN isActive THEN 'active' ELSE 'inactive' END\"\n);\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What data types can I use with the `setTypes` method?","completion":"You can use the following data types with the `setTypes` method: `integer`, `float`, `number`, `string`, `date`, `time`, `datetime`, `datetimeTz`, `bigint`, `double`, `varchar`, `timestamp`, `timestamp with time zone`, `boolean`, and `geometry`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We set the data types for the columns\nawait table.setTypes({\n  id: \"integer\",\n  name: \"string\",\n  date: \"date\",\n  price: \"float\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove duplicate rows based on a single column, for example, 'email'?","completion":"Here's how you can remove duplicate rows based on a specific column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove duplicate rows based on the 'email' column\nawait table.removeDuplicates({ on: \"email\" });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify the name of the new column for the point geometries?","completion":"Pass the desired column name as the third argument to `points`. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\n// Create point geometries in a column called 'location'\nawait table.points('lat', 'lon', 'location');\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What does the `raw` option do when writing to a Google Sheet?","completion":"The `raw` option prevents Google Sheets from attempting to guess the data type and formatting the values. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a Google Sheet in raw format\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  raw: true\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute linear regressions between all numeric columns?","completion":"Here's how you can compute linear regressions between all numeric columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute all linear regressions between all numeric columns, overwriting the current table\nawait table.linearRegressions();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What's the difference between removeRows and filter?","completion":"removeRows removes rows that meet the condition, while filter keeps them. Here's how to use removeRows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'category' is 'Electronics' or 'Appliances'\nawait table.removeRows(\n  `category === 'Electronics' || category === 'Appliances'`\n);\n// Log the remaining rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I add a message before my data in the Google Sheet?","completion":"Yes, you can prepend text to your data. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We export with a message before the data\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  prepend: \"Data exported on:\"\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I format the x-axis dates in the dot chart?","completion":"To format the x-axis dates as \"YYYY-MM-DD\", provide a formatX function:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 },\n  { date: new Date(\"2023-03-01\"), value: 30 },\n];\nawait table.loadArray(data);\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\nawait table.logDotChart(\"date\", \"value\", {\n  formatX: d => new Date(d).toISOString().split(\"T\")[0],\n});\nawait sdb.done();\n```"}
{"prompt":"How can I compute linear regressions between all numeric columns in my table, overwriting the current table?","completion":"Here's how you can compute linear regressions between all numeric columns, overwriting the current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute linear regressions between all numeric columns, overwriting the current table\nawait table.linearRegressions();\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the 90th percentile of a column?","completion":"Yes, you can calculate any quantile between 0 and 1. Here's how to get the 90th percentile:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get 90th percentile of 'rating' column\nconst ninetyPercentile = await table.getQuantile(\"rating\", 0.9);\nconsole.log(\"90th percentile:\", ninetyPercentile);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I create multiple tables sequentially?","completion":"Create multiple tables sequentially:\\n\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// Create first table\\nconst table1 = sdb.newTable('first');\\n// Create second table\\nconst table2 = sdb.newTable('second');\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I specify the number of decimal places for the computed proportions?","completion":"You can specify the number of decimal places using the `decimals` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We compute horizontal proportions with a specified number of decimal places\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"], { decimals: 2 });\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `fillHoles` method do?","completion":"The `fillHoles` method removes holes from polygon geometries in the table. Hereâ€™s a simple example that loads geospatial data, fills holes, and logs the result:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadGeoData('./my-geodata.geojson');\nawait table.fillHoles();\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get the maximum of a non-numeric column?","completion":"The `getMax` method works with numeric, string, date, or boolean columns. Here's an example with a string column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the maximum value from the 'category' column\nconst maxCategory = await table.getMax(\"category\");\nconsole.log(\"Maximum category:\", maxCategory);\n// We close everything\nawait sdb.done();\n```\nFor string columns, it returns the lexicographically largest string."}
{"prompt":"How can I retrieve all table names in alphabetical order?","completion":"The `getTableNames` method returns table names sorted alphabetically. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names in alphabetical order\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I store the result of a containment check in my table?","completion":"The `inside` method allows you to specify a new column name where the boolean results will be stored. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// Load point and polygon data\nawait table.loadGeoData(\"./points.geojson\");\nawait table.loadGeoData(\"./polygons.geojson\", \"polygons\");\n// Check containment and store results in 'isContained'\nawait table.inside(\"points\", \"polygons\", \"isContained\");\n// View the updated table with new column\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\nThe results will be stored as `TRUE` or `FALSE` in the specified column."}
{"prompt":"How can I round summarized values to two decimal places?","completion":"We set the `decimals` option to 2 to round all summarized values.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Summarize 'price' and 'cost' with rounding to 2 decimal places\nawait table.summarize({ values: [\"price\", \"cost\"], decimals: 2 });\n// Log the summarized table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How does the `area` method handle multiple geometry columns?","completion":"The `area` method will automatically find and use a geometry column if none is specified. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file with multiple geometry columns\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the area of geometries in the automatically detected column and store it in 'area_m2'\nawait table.area(\"area_m2\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I remove multiple tables by name?","completion":"You can remove multiple tables by name using the `removeTables` method with an array of table names.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables: \"customers\" and \"products\"\nconst customersTable = sdb.newTable(\"customers\");\nconst productsTable = sdb.newTable(\"products\");\n// We remove both tables by their names in an array\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How does `getBoundingBox` handle cases where no geometries are present?","completion":"If there are no geometries, the method will throw an error. Here's how to handle it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data without geometry column\nawait table.loadData(\"./non-geo-data.csv\");\ntry {\n  const bbox = await table.getBoundingBox();\n  console.log(\"Bounding Box:\", bbox);\n} catch (error) {\n  console.error(\"No geometries found in the table.\", error);\n}\n// We close everything\nawait sdb.done();\n```\nThis example shows handling the case where no geometry data is present."}
{"prompt":"How do I use the buffer method with a custom distance and geometry column?","completion":"Specify both the distance and the geometry column in the options:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data if needed\nawait table.loadData(\"./geo.csv\");\n// Create a buffer of 15 units around the 'geoGeom' column\nawait table.buffer(\"geoBuffer\", 15, { column: \"geoGeom\" });\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What does getTop return and how can I access the data?","completion":"getTop returns an array of objects representing the rows. You can inspect the type with typeof.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./sample.csv\");\n// Retrieve top 3 rows\nconst top3 = await table.getTop(3);\nconsole.log(typeof top3); // 'object'\nconsole.log(Array.isArray(top3)); // true\nconsole.log(top3[0]); // first row object\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I list all installed DuckDB extensions using SimpleDB?","completion":"Hereâ€™s how you can retrieve the list of installed DuckDB extensions:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get a list of all installed extensions\nconst extensions = await sdb.getExtensions();\nconsole.log(extensions);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate geometries from a specific column?","completion":"You can specify the column to aggregate using the `column` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We aggregate geometries in the 'regions' column using union\nawait table.aggregateGeo(\"union\", { column: \"regions\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `longer` method actually do to my data?","completion":"The `longer` method transforms wide-format data into a long format by stacking specified columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We restructure the table by stacking columns '2021' and '2022'\nawait table.longer([\"2021\", \"2022\"], \"year\", \"value\");\n// We log the table to see the restructured data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I interpret the values stored in the new column created by `inside`?","completion":"The new column will contain boolean values: `TRUE` if the geometry in `column1` is completely inside the geometry in `column2`, and `FALSE` otherwise. You can filter or aggregate based on these values:\n```\n// Count how many points are inside the polygon\nawait table.summarize({\n  values: \"isInsidePolygon\",\n  summaries: [\"count\"],\n  decimals: 0,\n});\nawait table.logTable();\n```"}
{"prompt":"How does `logUniques` handle different data types when stringified?","completion":"Here's how `logUniques` handles different data types with stringify:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log unique values for mixed data types with stringify\nawait table.logUniques(\"mixedData\", { stringify: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I log the extent of a numeric column in a table?","completion":"Use the `logExtent` method after loading data into the table. It prints the minimum and maximum values of the specified numeric column to the console.\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"sales\");\n// Load data from a CSV file\nawait table.loadData(\"./sales.csv\");\n// Log the extent of the 'price' column\nawait table.logExtent(\"price\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I have a `SimpleTable` instance called `myTable`. How can I remove it using this instance?","completion":"You can remove a table by passing the `SimpleTable` instance to the `removeTables` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// ... load data ...\nawait sdb.removeTables(table);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the mean of a specific column in my table?","completion":"Here's how you can calculate the mean of a column named 'price':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We calculate the mean of the 'price' column\nconst meanPrice = await table.getMean(\"price\");\nconsole.log(meanPrice);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the median of a numeric column?","completion":"Here's how to calculate the median (50th percentile) of a numeric column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Calculate the median (0.5 quantile) of the 'price' column\nconst median = await table.getQuantile(\"price\", 0.5);\n// Log the median value\nconsole.log(\"Median price:\", median);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all table names from the database?","completion":"Hereâ€™s how to retrieve all table names:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\nawait sdb.done();\n```"}
{"prompt":"How do I compute the distance between two geometry columns using the default SRS units?","completion":"Hereâ€™s how to compute the distance between two geometry columns using the default SRS units:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.distance('geomA', 'geomB', 'distance_srs');\nawait sdb.done();\n```"}
{"prompt":"Can I specify the number of decimal places when calculating skewness?","completion":"Yes, you can specify the number of decimal places using the `decimals` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We calculate the skewness of the 'price' column, rounded to 2 decimal places\nconst priceSkew = await table.getSkew(\"price\", { decimals: 2 });\nconsole.log(priceSkew); // e.g., -0.33\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify geospatial projections when creating a table?","completion":"Yes, you can define projections for geospatial data. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a table with specific projections\nconst table = sdb.newTable(\"geoTable\", {\n  geometry: \"EPSG:4326\"\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I apply the offset within a single category like city?","completion":"Use the categories option with a single column name.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Clone 'temperature' as 'prev_temp_by_city' with offset 1 within each city\nawait table.cloneColumnWithOffset(\"temperature\", \"prev_temp_by_city\", {\n  offset: 1,\n  categories: \"city\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the last 10 rows of my table while preserving the original order?","completion":"Here's how you can retrieve the last 10 rows of your table in their original order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the last 10 rows in their original order\nconst bottom10OriginalOrder = await table.getBottom(10, {\n  originalOrder: true\n});\n// We log the results\nconsole.log(bottom10OriginalOrder);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I need to verify if multiple columns exist in my dataset. How can I do that?","completion":"You can use the `hasColumn` method in a loop or with multiple calls to check for multiple columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// List of columns to check\nconst requiredColumns = [\"population\", \"area\", \"year\"];\nlet allColumnsExist = true;\n\nfor (const column of requiredColumns) {\n  const exists = await table.hasColumn(column);\n  if (!exists) {\n    allColumnsExist = false;\n    console.log(`Missing column: ${column}`);\n  }\n}\n\nconsole.log(\"All required columns exist:\", allColumnsExist);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I select columns and then perform a summarization on the selected columns?","completion":"Here is how you can select columns and then perform a summarization on the selected columns:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We select the 'price' and 'category' columns\nawait table.selectColumns([\"price\", \"category\"]);\n// We summarize to count the number of items sold and sum up the total sales for each category\nawait table.summarize({\n  values: \"price\",\n  categories: \"category\",\n  summaries: [\"count\", \"sum\"],\n  decimals: 2,\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where specific columns have custom missing values?","completion":"You can combine `columns` and `missingValues` options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'address' is missing or 'N/A'\nawait table.removeMissing({ \n  columns: \"address\",\n  missingValues: [\"N/A\"]\n});\n// Log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Does the `loadGeoData` method automatically flip the coordinates for GeoJSON files?","completion":"Yes, the `loadGeoData` method automatically flips the coordinates to `[latitude, longitude]` for files ending with `.json` or `.geojson`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load a GeoJSON file\nawait table.loadGeoData(\"./my-data.geojson\");\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I customize the map appearance using options.style?","completion":"You can customize the map appearance by passing a CSS string in options.style:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./CanadianProvincesAndTerritories.geojson\");\n\nconst mapFunction = (geoJsonData) =>\n  plot({\n    projection: { type: \"conic-conformal\", rotate: [100, -60], domain: geoJsonData },\n    marks: [geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" })],\n  });\n\nconst outputPath = \"./output/custom_style_map.png\";\n\nawait table.writeMap(mapFunction, outputPath, {\n  style: \"background: #f0f0f0; border: 1px solid #ccc;\",\n});\nawait sdb.done();\n```"}
{"prompt":"How can I use Vertex AI with `aiQuery`?","completion":"Here's how you can use Vertex AI with the `aiQuery` method. Ensure that the `AI_PROJECT` and `AI_LOCATION` environment variables are set, or pass the `project` and `location` options directly."}
{"prompt":"How can I specify a specific column containing the geometries when computing the length?","completion":"Here's how you can specify a specific column containing the geometries when computing the length:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the length of geometries in a specific column named 'routeGeom'\nawait table.length(\"routeLength\", { column: \"routeGeom\" });\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geometries in a specific column?","completion":"If your geometries are stored in a non-default column, you can specify it during reprojection:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reproject geometries in the 'myGeom' column from EPSG:4326 to EPSG:3347\nawait table.reproject(\"EPSG:3347\", { column: \"myGeom\", from: \"EPSG:4326\" });\n// We log the first rows to see the reprojected data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What separator is used if I donâ€™t provide one?","completion":"If the separator option is omitted, the method defaults to an empty string, effectively concatenating the values without any delimiter:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Concatenate \"firstName\" and \"lastName\" into \"fullName\" with no separator\nawait table.concatenate([\"firstName\", \"lastName\"], \"fullName\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is the `getTable` method asynchronous? If so, how do I use `await` with it?","completion":"Yes, the `getTable` method is asynchronous, as indicated by the `async` keyword in its signature and the fact that it returns a `Promise`. You should use `await` to wait for the promise to resolve before using the returned `SimpleTable` instance.\n\nHere's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve the \"products\" table\nconst products = await sdb.getTable(\"products\");\n// Now you can work with the 'products' table\n// For example, log the table\n// await products.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I specify a custom start value for binning?","completion":"Yes, you can set a specific start value using the `startValue` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We assign bins starting at 0 with an interval of 10\nawait table.bins(\"score\", 10, \"score_bins\", { startValue: 0 });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I capitalize a single column in my table?","completion":"Hereâ€™s how to capitalize the \"name\" column after loading data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Capitalize the \"name\" column\nawait table.capitalize(\"name\");\n// Log the table to verify the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select the first 100 rows of my table without creating a new table?","completion":"Here's how you can select the first 100 rows and keep them in the current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We select the first 100 rows (modifying current table)\nawait table.selectRows(100);\n// We log the current table to see the selected rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I add a header or message before the data in the Google Sheet?","completion":"Yes, use the `prepend` option to add text before the data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadData(\"./data.csv\");\n// Export to Google Sheets with a header\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  prepend: \"Data exported on\"\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How does the cache know when to re-run my computations?","completion":"The cache will re-run your computations if the cached data is expired (based on TTL) or if the content of the `run` function changes. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Cache will re-run if TTL is reached or function content changes\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"]\n  });\n}, { ttl: 60 });\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I format the bin labels in the histogram?","completion":"Use the `formatLabels` option with a function to customize bin label formatting.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Format bin labels as 'min-max years'\nawait table.logHistogram(\"age\", {\n  formatLabels: (min, max) => `${min}-${max} years`\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I chain selectColumns with other methods?","completion":"You can chain selectColumns with other methods. For example, after selecting columns you can summarize them:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./sales.csv\");\n// Keep only 'product' and 'price'\nawait table.selectColumns([\"product\", \"price\"]);\n// Summarize total sales per product\nawait table.summarize({\n  values: \"price\",\n  categories: \"product\",\n  summaries: [\"sum\"],\n  decimals: 2,\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I replace only if the entire string matches?","completion":"Here's how you can replace only when the entire string is 'kilograms':\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable('myTable');\n// We load data from the file\nawait table.loadData('./data.csv');\n// Replace only if entire string is 'kilograms' in 'column1'\nawait table.replace('column1', { 'kilograms': 'kg' }, { entireString: true });\n// Log the updated table\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What does logUniques return?","completion":"logUniques resolves to the SimpleTable instance, allowing method chaining:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Log uniques and then immediately log the table\nawait table.logUniques(\"name\").then(t => t.logTable());\nawait sdb.done();\n```"}
{"prompt":"How do I replace NULL values with a specific date?","completion":"You can pass a Date object as the replacement value:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create instance and table\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./dates.csv\");\n// Replace NULLs in 'dateColumn' with January 1, 2023\nawait table.replaceNulls(\"dateColumn\", new Date(\"2023-01-01\"));\n// Log the updated dates\nawait table.logTable();\n// Close connection\nawait sdb.done();\n```"}
{"prompt":"What does the `wider` method do with the values in the `columnsFrom` column?","completion":"The `wider` method uses the unique values in the `columnsFrom` column to create new column headers. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We restructure the table, pivoting 'Year' into new columns with 'Employees' as values\nawait table.wider(\"Year\", \"Employees\");\n// We log the table to see the restructured data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nIn this example, each unique value in the \"Year\" column will become a new column header."}
{"prompt":"How do I summarize all columns with all available summary operations, overwriting the current table?","completion":"Use the `summarize` method with the `values` option set to all columns and omit the `outputTable` option to overwrite the current table.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Summarize all columns with all summary operations, overwriting the current table\nconst columns = await table.getColumns();\nawait table.summarize({ values: columns });\n// Log the summarized table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove the default 'value' column in the output?","completion":"Here's how you can remove the default 'value' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We summarize 'value_column' without the default 'value' column\nawait table.summarize({\n  values: \"value_column\",\n  noColumnValue: true\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I fill NULL values in a single column with the previous non-NULL value?","completion":"To fill NULL values in a single column, use the `fill` method with the column name as a string.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file containing NULL values\nawait table.loadData(\"./data.csv\");\n// Fill NULL values in 'column1' with the previous non-NULL value\nawait table.fill(\"column1\");\n// Log the table to verify the fill operation\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use the `inside` method to check if points are inside polygons?","completion":"Hereâ€™s how to load a table, run the containment check, and view the results:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// Load data that contains a point geometry column and a polygon geometry column\nawait table.loadGeoData(\"./points_and_polygons.geojson\");\n// Check if each point in 'pointGeom' lies inside the polygon in 'polygonGeom'\n// and store the boolean result in a new column 'isInsidePolygon'\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove duplicate rows based on multiple columns, such as 'firstName' and 'lastName'?","completion":"Here's how you can remove duplicate rows based on multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove duplicate rows based on 'firstName' and 'lastName'\nawait table.removeDuplicates({ on: [\"firstName\", \"lastName\"] });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute unions for multiple pairs of geometry columns?","completion":"You can chain union operations for different pairs as needed:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file containing multiple geometry columns\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute union for first pair\nawait table.union(\"geomA\", \"geomB\", \"union1\");\n// Compute union for second pair\nawait table.union(\"geomC\", \"geomD\", \"union2\");\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I flip the coordinates in a specific column named 'myGeom'?","completion":"Here's how to flip coordinates in a specific column named 'myGeom' by passing the column name to the method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We flip coordinates in the 'myGeom' column\nawait table.flipCoordinates(\"myGeom\");\n// We log the table to verify changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I change the width of the bar chart?","completion":"Set the `width` option to control the chartâ€™s character width:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 }\n]);\n// Log a wider bar chart (80 characters wide)\nawait table.logBarChart(\"category\", \"value\", { width: 80 });\nawait sdb.done();\n```"}
{"prompt":"Is getNbValues synchronous or asynchronous, and how do I handle its promise?","completion":"getNbValues is asynchronous and returns a Promise<number>. Use await to get the result. Example:\\n```ts\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable('metrics');\\nawait table.loadData('./metrics.csv');\\nconst count = await table.getNbValues();\\nconsole.log(`Total values: ${count}`);\\nawait sdb.done();\\n```"}
{"prompt":"What data type will the values returned by `getValues` have?","completion":"The `getValues` method returns an array of `string | number | boolean | Date | null`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Get all values from the 'date' column\nconst dates = await table.getValues(\"date\");\nconsole.log(dates); // e.g., [\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column to float while replacing unconvertible values with NULL?","completion":"Here's how to convert a column to float while replacing unconvertible values with NULL:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./data.csv\");\n// Convert 'price' to float, replacing invalid values with NULL\nawait table.convert({ price: \"float\" }, { try: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove missing values only in specific columns?","completion":"You can specify which columns to check for missing values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows with missing values only in 'firstName' and 'lastName'\nawait table.removeMissing({ columns: [\"firstName\", \"lastName\"] });\n// Log the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the column is empty or has no values?","completion":"If the column has no values, getMin resolves to null.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./empty.csv\"); // CSV has a column \"emptyCol\" but no rows\nconst minVal = await table.getMin(\"emptyCol\");\nconsole.log(minVal); // null\nawait sdb.done();\n```"}
{"prompt":"What does the `getExtensions` method return?","completion":"The `getExtensions` method returns a promise that resolves to an array of objects. Each object represents an installed extension and contains information about it. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We get the list of extensions\nconst extensions = await sdb.getExtensions();\n// We log the extensions to the console\nconsole.log(extensions); // Output: [{ extension_name: \"spatial\", loaded: true, ... }]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I control the number of rows displayed when logging a table?","completion":"You can control the number of rows displayed when logging a table using the `nbRowsToLog` option. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ nbRowsToLog: 5 });\n// Only the first 5 rows will be displayed when logging a table\nawait sdb.done();\n```"}
{"prompt":"How do I ignore parsing errors when loading data?","completion":"Set ignoreErrors to true to skip rows with errors:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\", { ignoreErrors: true });\nawait sdb.done();\n```\n"}
{"prompt":"How can I identify outliers in the 'salary' column separately for each 'department' category?","completion":"Use the `categories` option to run outlier detection per department:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData('./employees.csv');\n// Identify outliers in 'salary' within each 'department'\nawait table.outliersIQR('salary', 'salaryOutlier', { categories: 'department' });\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log table names after creating a new table?","completion":"After creating a new table, you can immediately log the table names to verify it was added:\\n\\n```ts\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Create a new table named \\\"employees\\\"\\nconst table = sdb.newTable(\\\"employees\\\");\\nawait sdb.logTableNames(); // Should include \\\"employees\\\"\\nawait sdb.done();\\n```"}
{"prompt":"How can I use getNbColumns in a conditional to check if the table has at least a certain number of columns?","completion":"Use getNbColumns in a conditional to ensure the table has enough columns before proceeding.\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData('./data.csv');\n// Get the number of columns\nconst nbColumns = await table.getNbColumns();\n// Check if there are at least 3 columns\nif (nbColumns >= 3) {\n  console.log('Table has enough columns.');\n} else {\n  console.log('Table does not have enough columns.');\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I initialize SimpleDB with a specific database file?","completion":"Here's how you can create a SimpleDB instance with a specified database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a specific database file\nconst sdb = new SimpleDB({\n  file: './mydatabase.db'\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute linear regression for all numeric column permutations without specifying x and y?","completion":"Here's how to compute linear regression for all numeric column permutations:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Compute all linear regressions between all numeric columns\nawait table.linearRegressions();\nawait sdb.done();\n```"}
{"prompt":"How does performance affect when using `updateWithJS` on large tables?","completion":"It can be slow because it transfers data between DuckDB and JavaScript. Here's a simple example:"}
{"prompt":"How can I limit the number of characters logged for strings in the table?","completion":"You can limit the number of characters logged for strings using the `nbCharactersToLog` option when creating a SimpleTable. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with options\nconst table = sdb.newTable(\"myTable\", {}, { nbCharactersToLog: 20 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the bounding box of the default geometry column in my table?","completion":"Here's how you can get the bounding box of the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// Get the bounding box of the default geometry column\nconst bbox = await table.getBoundingBox();\nconsole.log(bbox);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations within different categories (e.g., by 'category' column)?","completion":"Use the `categories` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations within 'categoryColumn' categories\nawait table.correlations({ categories: \"categoryColumn\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use splitExtract with different separators?","completion":"Yes, you can use any separator. For example, splitting by spaces:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Let's assume the data has an 'address' column with values like \"123 Main St\"\nawait table.loadData(\"./data.csv\");\n// Split 'address' by space and extract the first part (index 0) into a new 'streetNumber' column\nawait table.splitExtract(\"address\", \" \", 0, \"streetNumber\");\n// Log the results to see the extracted street numbers\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove multiple columns from my table?","completion":"Here's how you can remove multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We remove multiple columns: 'column1' and 'column2'\nawait table.removeColumns([\"column1\", \"column2\"]);\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a buffer of 1 unit around the default geometry column and store the result in a new column called 'bufferedGeom'?","completion":"To create a buffer around the default geometry column, use the `buffer` method without specifying the `column` option.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"bufferTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We create a buffer of 1 unit around the default geometry column, storing in 'bufferedGeom'\nawait table.buffer(\"bufferedGeom\", 1);\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the perimeter using a specific geometry column named 'landParcelGeom' and store the result in a new column named 'landParcelPerimeter'?","completion":"Here's how you can compute the perimeter using a specific geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// We compute the perimeter using the 'landParcelGeom' column\nawait table.perimeter(\"landParcelPerimeter\", { column: \"landParcelGeom\" });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the Haversine distance in kilometers, rounded to two decimal places?","completion":"Here's how you can calculate the Haversine distance in kilometers, rounded to two decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.geojson\");\n// We compute the Haversine distance between 'point1' and 'point2' in kilometers, rounded to 2 decimal places\n// Make sure your geometries are in EPSG:4326\nawait table.distance(\"point1\", \"point2\", \"distance_km\", {\n  method: \"haversine\",\n  unit: \"km\",\n  decimals: 2,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I write data in Parquet format?","completion":"Here's how you can write your data to a Parquet file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We write the data to a Parquet file\nawait table.writeData(\"./output.parquet\");\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens if I don't provide the `decimals` option when calculating the mean?","completion":"If you don't provide the `decimals` option, the mean will be calculated without rounding. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We calculate the mean of the 'value' column without rounding\nconst meanValue = await table.getMean(\"value\");\nconsole.log(meanValue);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set a column to a constant value using `updateColumn`?","completion":"To set a column to a constant value, use a literal in the expression. For example, set 'category' to 'misc' for all rows:\n\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"inventory\");\n// We load data from the file\nawait table.loadData(\"./inventory.csv\");\n// We set 'category' to a constant value 'misc'\nawait table.updateColumn(\"category\", `'misc'`);\n// We log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I use a negative offset to shift values upwards?","completion":"A negative offset moves values upwards (earlier rows). For example, to get the value from the next row:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Clone \"temperature\" to \"next_temperature\" with offset -1\nawait table.cloneColumnWithOffset(\"temperature\", \"next_temperature\", { offset: -1 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I use a CASE expression to set values conditionally?","completion":"Hereâ€™s how to set `status` based on the value of `isActive` using a CASE expression:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Update 'status' conditionally\\nawait table.updateColumn('status', `CASE WHEN isActive THEN 'active' ELSE 'inactive' END`);\\n// Log the updated table\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I select rows and store them in a specific named table?","completion":"You can specify the new table's name using `outputTable`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Select 75 rows and store in \"top_customers\"\nconst topCustomers = await table.selectRows(75, { outputTable: \"top_customers\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check the data types of all columns in my table?","completion":"You can use the `logTypes` method to display the data types of each column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the types of all columns\nawait table.logTypes();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I log only the column names of a table?","completion":"Hereâ€™s how to log just the column names:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data so the table has columns\nawait table.loadData(\"./data.csv\");\n// Log only the column names\nawait table.logColumns();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I check if a specific column exists in a table?","completion":"You can use the `hasColumn` method to verify the presence of a column.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data so the table has columns\nawait table.loadData(\"./sample-data.csv\");\n// Check if the table has a column named \"age\"\nconst hasAgeColumn = await table.hasColumn(\"age\");\nconsole.log(hasAgeColumn); // true or false\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the correlation between two specific columns, such as 'price' and 'quantity'?","completion":"Here's how to compute the correlation between two specific columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlation between 'price' and 'quantity'\nawait table.correlations({ x: \"price\", y: \"quantity\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What type of value can getMax return?","completion":"getMax can return a string, number, boolean, Date, or null. For instance, to get the maximum boolean value from an 'isActive' column:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"users\");\n// Load data from CSV\nawait table.loadData(\"./users.csv\");\n// Get the maximum boolean from the 'isActive' column\nconst maxBool = await table.getMax(\"isActive\");\n// Log the maximum boolean value\nconsole.log(\"Maximum isActive value:\", maxBool);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens if my linestrings are not closed?","completion":"The `linesToPolygons` method only transforms closed linestrings. If your linestrings are not closed, they will remain as linestrings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We attempt to convert linestrings to polygons\nawait table.linesToPolygons();\n// Only closed linestrings will be converted to polygons\n// Open linestrings will remain unchanged\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I remove multiple columns at once?","completion":"To remove multiple columns at once, pass an array of column names to removeColumns:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait table.loadData('./data.csv');\nawait table.removeColumns(['colA', 'colB']);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I execute a custom SQL query using SimpleDB?","completion":"You can use the `customQuery` method to run any SQL query. Here's an example of creating a new table with a query:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Execute a query to create a new table\nawait sdb.customQuery(\n  \"CREATE TABLE young_employees AS SELECT * FROM employees WHERE age > 30\"\n);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Is it possible to combine filtering and column selection when cloning?","completion":"Yes, you can provide both `conditions` and `columns` in the options object.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Clone active rows created after 2023-01-01 and keep only selected columns\nconst tableB = await tableA.cloneTable({\n  outputTable: \"filtered_data\",\n  conditions: `status = 'active' AND created_date >= '2023-01-01'`,\n  columns: [\"name\", \"status\", \"created_date\"],\n});\nawait sdb.done();\n```"}
{"prompt":"How can I specify a different geometry column when simplifying?","completion":"You can target a specific geometry column by passing the column name in the options:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./my-geodata.geojson');\n// Simplify geometries in the 'geom' column\nawait table.simplify(0.05, { column: 'geom' });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How to write a table's data to a compressed JSON file (with GZIP)?","completion":"Here's how you can write the table's data to a compressed JSON file (with GZIP):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We write the data to a compressed JSON file\nawait table.writeData(\"./output.json\", { compression: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I verify that the new column was added correctly?","completion":"After concatenation, you can log the table or inspect the specific column; here we log the table and then print the first few rows of the new column:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./people.csv\");\n// Concatenate columns into a new column\nawait table.concatenate([\"firstName\", \"lastName\"], \"fullName\");\n// Log the entire table\nawait table.logTable();\n// Optionally, log just the new column to verify its contents\nawait table.logColumn(\"fullName\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I call setTypes on an existing table?","completion":"Calling `setTypes` on an existing table will replace it. Here's how to handle that:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a new instance\nconst sdb = new SimpleDB();\n// Create and load data into an initial table\nconst table = sdb.newTable(\"existingTable\");\nawait table.loadData(\"./data.csv\");\n// Replace the table with new types\nawait table.setTypes({\n  id: \"bigint\",\n  name: \"varchar\"\n});\n// Load data again into the new table structure\nawait table.loadData(\"./new_data.csv\");\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I create a dot chart with small multiples (facets)?","completion":"Here's how you can create a dot chart with small multiples using the `smallMultiples` option. This will create a separate chart for each unique value in the specified column."}
{"prompt":"Is it possible to load data from a remote file?","completion":"Yes, you can load data from a remote URL:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a remote Parquet file\nawait table.loadData(\"https://example.com/data.parquet\");\n// We log the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I ensure all small multiples share the same y-axis scale?","completion":"Set the fixedScales option to true to share the same y-axis scale across small multiples:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-03-01\"), value: 30, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n  { date: new Date(\"2023-03-01\"), value: 35, category: \"B\" },\n];\nawait table.loadArray(data);\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  fixedScales: true,\n});\nawait sdb.done();\n```"}
{"prompt":"How can I keep rows where the 'job' column is either 'accountant' or 'developer'?","completion":"Here's how you can keep rows where the job is one of several values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We keep rows where job is 'accountant' or 'developer'\nawait table.keep({ job: [\"accountant\", \"developer\"] });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table with a specific name, filtered data, and specific columns?","completion":"Here's how you can clone a table to a specific table name with filtered data and specific columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\n// Load some data into tableA\nawait tableA.loadData(\"./my-data.csv\");\n// Clone tableA to a specific table name with filtered data and specific columns\nconst tableB = await tableA.cloneTable({ \n  outputTable: \"filtered_data\",\n  conditions: `status = 'active' AND created_date >= '2023-01-01'`,\n  columns: [\"name\", \"status\", \"created_date\"],\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I verify that the capitalization worked?","completion":"After calling capitalize, use logTable to inspect the updated values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Capitalize the \"city\" column\nawait table.capitalize(\"city\");\n// Log the table to see the capitalized city names\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I know how many rows will be logged when using `logBottom`?","completion":"The number of rows logged is specified by the first argument. For example, to log 10 rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the last 10 rows\nawait table.logBottom(10);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I remove rows based on multiple values in a single column?","completion":"Yes, you can pass an array of values to remove from a specific column. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'category' is either 'electronics' or 'clothing'\nawait table.remove({ category: ['electronics', 'clothing'] });\n// Log the remaining data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the centroid for a specific geometry column named 'areaGeom' and store it in 'areaCentroid'?","completion":"Here is how you can compute the centroid for a specific geometry column and store it in a new column:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable('geoTable');\n// We load geospatial data from a file\nawait table.loadGeoData('./my-geodata.geojson');\n// We compute the centroid of geometries in the 'areaGeom' column, storing results in 'areaCentroid'\nawait table.centroid('areaCentroid', { column: 'areaGeom' });\n// We log the first rows to see the computed centroids\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I get the sum of a column with zero values?","completion":"Yes, `getSum` works with columns containing zeros. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data with zero values in 'price' column\nawait table.loadData(\"./data-with-zeros.csv\");\n// Get sum of 'price' column which may contain zeros\nconst total = await table.getSum(\"price\");\nconsole.log(total); // e.g., 0\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I filter data using a SQL WHERE clause condition?","completion":"Here's how you can filter data using a SQL-style WHERE clause:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Filter using SQL WHERE clause: category = 'Book'\nconst booksData = await table.getData({ conditions: \"category = 'Book'\" });\nconsole.log(booksData);\nawait sdb.done();\n```"}
{"prompt":"How can I convert a column named 'price' to a float data type?","completion":"Here's how you can convert a column to a float data type:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We convert the 'price' column to a float\nawait table.convert({ price: \"float\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the column name when simplifying geometries?","completion":"If you don't specify the column name, the method will automatically attempt to find a geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify geometries with a tolerance of 0.1\nawait table.simplify(0.1);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I chain `logTypes` with other SimpleTable methods?","completion":"Yes, because `logTypes` returns the table instance.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Chain logTypes with another method (e.g., logTable)\nawait table.logTypes().logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I insert new rows into a SimpleTable?","completion":"You can use the `insertRows` method to add rows to the table. ```// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Define the rows to insert\nconst newRows = [\n  { letter: \"c\", number: 3 },\n  { letter: \"d\", number: 4 },\n];\n// Insert the rows into the table\nawait table.insertRows(newRows);\n// We close everything\nawait sdb.done();```"}
{"prompt":"Can I compute the area in square kilometers instead of square meters?","completion":"Yes, you can specify the unit as 'km2'. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the area of geometries in square kilometers and store it in 'area_km2'\nawait table.area(\"area_km2\", { unit: \"km2\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Is the output of `logTableNames` sorted in any particular order?","completion":"Yes, the table names are sorted alphabetically before being logged. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify custom geometry columns for a spatial join?","completion":"Use `leftTableColumn` and `rightTableColumn` options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create left and right tables\nconst tableA = sdb.newTable(\"leftTable\");\nconst tableB = sdb.newTable(\"rightTable\");\n// Load data into both tables\nawait tableA.loadGeoData(\"./tableA.geojson\");\nawait tableB.loadGeoData(\"./tableB.geojson\");\n// Join using specific geometry columns\nawait tableA.joinGeo(tableB, \"intersect\", {\n  leftTableColumn: \"geomA\",\n  rightTableColumn: \"geomB\"\n});\n// Log the results\nawait tableA.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I create a map image from my GeoJSON data?","completion":"Here's how you can use the `writeMap` method to create a map image from your GeoJSON data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { geo, plot } from \"@observablehq/plot\";\n\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n\n// Load your GeoJSON data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n\n// Define a map function using Observable Plot\nconst mapFunction = (geoJsonData: { features: unknown[] }) =>\n  plot({\n    projection: {\n      type: \"conic-conformal\",\n      rotate: [100, -60],\n      domain: geoJsonData,\n    },\n    marks: [\n      geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" }),\n    ],\n  });\n\n// Define the output path for the map image\nconst outputPath = \"./output/map.png\";\n\n// Write the map to the specified path\nawait table.writeMap(mapFunction, outputPath);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the `aiRowByRow` method to add a new column with AI-generated content based on an existing column?","completion":"Here's how you can use the `aiRowByRow` method to add a new column with AI-generated content. This example uses a simple prompt and some common options.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load some data\nawait table.loadArray([ { \"text\": \"This is a sentence.\" }, { \"text\": \"Another sentence here.\" } ]);\n// Use aiRowByRow to add a new column with sentiment analysis\nawait table.aiRowByRow(\n  \"text\",\n  \"sentiment\",\n  \"What is the sentiment of this text? Answer with 'positive', 'negative', or 'neutral'.\",\n  { \n    cache: true, // Enable caching\n    batchSize: 2, // Process 2 rows at a time\n    rateLimitPerMinute: 10, // Limit requests to 10 per minute\n  }\n);\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add a row number column with a custom name to my table?","completion":"Here's how to add a row number column with a specific name using the addRowNumber method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Add a new column named 'rowNumber' with row numbers\nawait table.addRowNumber(\"rowNumber\");\n// Log the table to verify the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I capitalize multiple columns at once?","completion":"Pass an array of column names to `capitalize`.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data\nawait table.loadData(\"./data.csv\");\n// Capitalize column1 and column2\nawait table.capitalize([\"column1\", \"column2\"]);\n// Log to verify\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What values are stored in the new column created by `isClosedGeo`?","completion":"The new column contains `TRUE` for closed geometries (e.g., polygons) and `FALSE` for open geometries (e.g., linestrings).\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Add 'isClosed' column with boolean results\nawait table.isClosedGeo(\"isClosed\");\n// Log the table to see TRUE/FALSE values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I flip the coordinates in my geospatial data without specifying a column?","completion":"Here's how you can flip coordinates using the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We flip the coordinates in the default geometry column\nawait table.flipCoordinates();\n// We log the first rows to see the flipped data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert a single column to lowercase?","completion":"Here's how you can convert a single column to lowercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We convert the 'name' column to lowercase\nawait table.lower(\"name\");\n// We log the first rows to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the total number of values in my table (columns multiplied by rows)?","completion":"Here's how you can get the total number of values (columns multiplied by rows) in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the total number of values\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a custom suffix for the new proportion columns?","completion":"Yes, you can use the `suffix` option to customize the suffix. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data\nawait table.loadData(\"./sample_data.csv\");\n// Compute horizontal proportions with custom suffix 'Ratio'\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"], {\n  suffix: \"Ratio\"\n});\n// Log the updated table with new ratio columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I round the computed proportions to two decimal places?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file (assuming it has a column named 'column1')\nawait table.loadData(\"./data.csv\");\n// We compute the proportion of each value in 'column1' relative to the total sum of 'column1'\n// and store it in a new column 'perc', rounding to two decimal places\nawait table.proportionsVertical(\"column1\", \"perc\", {\n  decimals: 2,\n});\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I split a string column into parts using a specific separator?","completion":"Here's how you can split strings in a column by a separator and extract a specific part:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Split 'address' by comma and extract the second part (index 1) into a new 'city' column\nawait table.splitExtract(\"address\", \",\", 1, \"city\");\n// Log the results to see the extracted city names\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows with missing values from all columns?","completion":"To remove rows with missing values from all columns, call removeMissing without any options.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData('./data.csv');\n// We remove rows with missing values in any column\nawait table.removeMissing();\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve a row where the 'city' column equals 'London'?","completion":"Here's how you can retrieve a row based on a specific condition:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get a row where 'city' is 'London'\nconst londonRow = await table.getRow(\"city = 'London'\");\nconsole.log(londonRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I extract the last three characters from the 'id' column?","completion":"Here's how you can extract the last three characters from the 'id' column using the `right` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We extract the last three characters from the 'id' column\nawait table.right(\"id\", 3);\n// We log the table to see the updated values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table and only include specific columns in the new table?","completion":"Here's how you can clone a table and specify which columns to include:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"myTable\");\n// Load some data into tableA (replace with your actual data loading)\nawait tableA.loadData(\"./my-data.csv\");\n// Clone tableA with only specific columns\nconst tableB = await tableA.cloneTable({ columns: [\"name\", \"age\", \"city\"] });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I get the bottom rows in their original order?","completion":"Yes, you can use the `originalOrder` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the last 5 rows in original order\nconst bottomRowsOriginalOrder = await table.getBottom(5, {\n  originalOrder: true\n});\nconsole.log(bottomRowsOriginalOrder);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I rename multiple columns in my table at once?","completion":"Here's how you can rename multiple columns simultaneously:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We rename two columns: \"How old?\" to \"age\" and \"Man or woman?\" to \"sex\"\nawait table.renameColumns({ \"How old?\": \"age\", \"Man or woman?\": \"sex\" });\n// We log the table to verify the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log more than 10 rows from my table?","completion":"You can specify the number of rows you want to log. Here's an example logging 50 rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Log 50 rows\nawait table.logTable(50);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the centroid of a specific geometry column named `areaGeom` and store it in a new column?","completion":"To compute the centroid of a specific geometry column and store it in a new column, specify the column in the options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the centroid of geometries in the 'areaGeom' column, storing results in 'areaCentroid'\nawait table.centroid(\"areaCentroid\", { column: \"areaGeom\" });\n// We log the first rows to see the centroid data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use a local Ollama model with aiQuery?","completion":"To use a local Ollama model, set ollama to true or pass an Ollama instance:\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"employees\");\\nawait table.loadData(\"./employees.csv\");\\nawait table.aiQuery(\"Give me the average salary by department\", { ollama: true });\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How can I verify that the column names were cleaned?","completion":"Use logTable after calling cleanColumnNames to inspect the updated column names. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./mixed_names.csv\");\nawait table.cleanColumnNames();\nawait table.logTable(); // see cleaned names in the console\nawait sdb.done();\n```"}
{"prompt":"How can I log the schema in a readable table format?","completion":"You can use console.table to display the schema nicely:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\"./data.csv\");\\nconst schema = await table.getSchema();\\nconsole.table(schema);\\nawait sdb.done();\\n```"}
{"prompt":"How can I use quantiles to analyze data within multiple categories?","completion":"Here's how you can use quantiles with multiple categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"multiCategoryTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We assign quantiles to 'valueColumn' within each combination of 'category1' and 'category2'\nawait table.quantiles(\"valueColumn\", 4, \"quartileColumn\", { categories: [\"category1\", \"category2\"] });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What input does the `logExtent` method require?","completion":"The `logExtent` method requires the name of the numeric column for which you want to log the extent. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We log the extent of the 'salary' column\nawait table.logExtent(\"salary\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I have a `SimpleTable` instance called `productsTable`. How can I remove it using this instance?","completion":"You can remove a table by passing the `SimpleTable` instance to the `removeTables` method. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"products\");\n// We load data into the table\n// ... load data ...\nconst productsTable = table;\n// Remove a single table using a SimpleTable instance\nawait sdb.removeTables(productsTable);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log a specific number of rows, for example 50 rows?","completion":"You can specify the number of rows to log by passing a number to logTable:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the first 50 rows\nawait table.logTable(50);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I normalize a column and round the normalized values to a specific number of decimal places?","completion":"You can round the normalized values to a specific number of decimal places. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// Normalize 'data' values, rounded to 2 decimal places\nawait table.normalize(\"data\", \"normalizedData\", { decimals: 2 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does `logNbRows` return?","completion":"It returns the `SimpleTable` instance, allowing method chaining.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Log the row count and immediately log the table contents\nawait table.logNbRows().logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does getNbRows return if the table has no rows?","completion":"getNbRows returns 0 when the table has no rows. For example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load an empty CSV file (no rows)\nawait table.loadData(\"./empty.csv\");\n// Get number of rows\nconst nbRows = await table.getNbRows();\nconsole.log(nbRows); // 0\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens to tables that are not selected?","completion":"After calling selectTables, only the specified tables remain in the database; all others are removed. For example, if you select only the 'employees' table, attempting to access 'customers' will result in an error because it has been removed.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Load two tables\\nconst employeesTable = sdb.newTable('employees');\\nawait employeesTable.loadData('./employees.csv');\\nconst customersTable = sdb.newTable('customers');\\nawait customersTable.loadData('./customers.csv');\\n// Select only the employees table\\nawait sdb.selectTables('employees');\\n// Trying to log the customers table will throw an error\\ntry {\\n  await customersTable.logTable();\\n} catch (e) {\\n  console.error('Customers table has been removed:', e.message);\\n}\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I remove rows where a column equals a specific value?","completion":"Here's how to remove rows where the 'fruit' column equals 'apple':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"fruits\");\nawait table.loadData(\"./fruits.csv\");\nawait table.removeRows(`fruit = 'apple'`);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I simplify geometries in a specific column named 'myGeom' without simplifying the boundary?","completion":"Here's how you can simplify geometries in the 'myGeom' column without simplifying the boundary:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify geometries in 'myGeom' column without simplifying boundary\nawait table.simplify(0.05, { column: \"myGeom\", simplifyBoundary: false });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fill holes in my polygon geometries?","completion":"Here's how you can fill holes in your polygon geometries using the `fillHoles` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We fill holes in the default geometry column\nawait table.fillHoles();\n// We log the first rows to see the modified geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table and include only specific columns (e.g., 'name', 'age')?","completion":"Here's how you can clone a table and include only specific columns (e.g., 'name', 'age'):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable(\"tableA\");\nawait tableA.loadData(\"./data.csv\");\nconst tableB = await tableA.cloneTable({ columns: [\"name\", \"age\"] });\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging for cache operations?","completion":"You can enable verbose logging by setting the `cacheVerbose` option when creating the `SimpleDB` instance. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// We create a new table\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I limit the rate of AI requests to avoid hitting API limits?","completion":"To limit the rate of requests to 10 per minute, use rateLimitPerMinute:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadArray([\n  { food: \\\"pizza\\\" },\n  { food: \\\"sushi\\\" },\n  { food: \\\"burger\\\" }\n]);\n// Generate embeddings with a rate limit of 10 requests per minute\nawait table.aiEmbeddings(\\\"food\\\", \\\"embeddings\\\", {\n  rateLimitPerMinute: 10,\n  verbose: true,\n});\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable caching when using `aiVectorSimilarity`?","completion":"Here's how you can enable caching when using the `aiVectorSimilarity` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadArray([\n  { text: \"This is the first document.\" },\n  { text: \"This is the second document.\" },\n  { text: \"And this is the third one.\" },\n]);\n// Generate embeddings for the 'text' column\nawait table.aiEmbeddings(\"text\", \"embeddings\", { cache: true });\n// Find the 3 most similar texts to \"a new document\" based on embeddings\nconst similarTexts = await table.aiVectorSimilarity(\n  \"a new document\",\n  \"embeddings\",\n  3,\n  {\n    cache: true, // Enable caching for the input text\n  },\n);\n// Log the results\nawait similarTexts.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add a column that shows the geometry type for each row without specifying the geometry column?","completion":"Here's how to add a geometry type column using the auto-find feature:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData('./data.geojson');\n// We add a column with the geometry type (using auto-find for the geometry column)\nawait table.typeGeo('geometryType');\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the bottom 5 rows in their original order (oldest first) instead of reversed?","completion":"Use the originalOrder option set to true to preserve the original row order.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the last 5 rows in original order\nconst bottom5Original = await table.getBottom(5, { originalOrder: true });\n// Log the result\nconsole.log(bottom5Original);\n// Close the database\nawait sdb.done();\n```"}
{"prompt":"How can I concatenate two columns with a comma and space as the separator?","completion":"Here's how you can concatenate two columns with a comma and space separator:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file that has 'city' and 'country' columns\nawait table.loadData(\"./data.csv\");\n// We concatenate 'city' and 'country' into 'location' with a comma and space separator\nawait table.concatenate([\"city\", \"country\"], \"location\", { separator: \", \" });\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert multiple columns to uppercase at once?","completion":"Here is how you convert multiple columns to uppercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We convert 'firstName' and 'lastName' columns to uppercase\nawait table.upper([\"firstName\", \"lastName\"]);\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I combine filtering and original order when getting bottom rows?","completion":"Yes, you can use both options together:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get last 4 rows where price > 100 in original order\nconst combinedOptions = await table.getBottom(4, {\n  conditions: \"price > 100\",\n  originalOrder: true\n});\nconsole.log(combinedOptions);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I export my table data to a Google Sheet?","completion":"Here's how you can export your table data to a Google Sheet:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We export the data to Google Sheets\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\");\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I use a variable for the table name when calling `getTable`?","completion":"Yes, you can use a variable for the table name. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Define the table name\nconst tableName = \"products\";\n// Retrieve the table using the variable\nconst products = await sdb.getTable(tableName);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the schema output look like and how can I interpret it?","completion":"The schema is an array of objects with column names and types:\n```javascript\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data so the table has columns\nawait table.loadData(\"./data.csv\");\n// Get the schema of the table\nconst schema = await table.getSchema();\n// Log the schema to see its structure\nconsole.log(\"Schema output:\", schema);\n// Expected output: [{name: 'id', type: 'number'}, {name: 'name', type: 'string'}, ...]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove duplicate rows based on multiple columns, for example firstName and lastName?","completion":"Pass an array of column names to the `on` option.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./contacts.csv\");\n// Remove duplicate rows based on 'firstName' and 'lastName'\nawait table.removeDuplicates({ on: [\"firstName\", \"lastName\"] });\n// Log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify custom environment variable names for Google API credentials?","completion":"Here's how to override default environment variable names for API credentials:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Write data using custom environment variable names\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/1abc123/edit#gid=0\", {\n  apiEmail: \"CUSTOM_SERVICE_ACCOUNT\",\n  apiKey: \"CUSTOM_PRIVATE_KEY\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable verbose cache-related messages and debugging information?","completion":"You can enable verbose cache messages and debugging information using the `cacheVerbose` and `debug` options in the SimpleDB constructor. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ cacheVerbose: true, debug: true });\n// You can now perform database operations using 'sdb'\nawait sdb.done();\n```"}
{"prompt":"How can I compute the centroid of geometries in my geospatial data?","completion":"Here's how you can compute centroids for your geometries:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the centroid of geometries and store them in 'centroidColumn'\nawait table.centroid(\"centroidColumn\");\n// We log the first rows to see the new centroids\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I use getMedian inside an async function?","completion":"Simply await the method inside an async function:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./metrics.csv\");\nasync function showMedian() {\n  const medianValue = await table.getMedian(\"metric\");\n  console.log(\"Median:\", medianValue);\n}\nawait showMedian();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use regular expressions for more complex string replacements?","completion":"Yes, you can use regex to replace patterns in strings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Replace any sequence of one or more digits with a hyphen in 'column1' using regex\nawait table.replace(\"column1\", { \"\\d+\": \"-\" }, { regex: true });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How does getSkew handle empty or missing values in the column?","completion":"It will calculate skewness based on available data. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with empty data\nconst table = sdb.newTable();\n// Create some test data with missing values\nawait table.loadData(\"data.csv\"); // Assume 'score' column has some nulls\ntry {\n  // Get skewness of 'score' column which may have nulls\n  const skewness = await table.getSkew(\"score\");\n  console.log(\"Skewness: \", skewness);\n} catch (error) {\n  console.error(\"Error calculating skewness: \", error);\n}\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I use SQL-like conditions with the `getTop` method?","completion":"Yes, you can use SQL-like conditions with the `getTop` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the top 5 rows where the price is greater than 100\nconst top5Expensive = await table.getTop(5, { conditions: `price > 100` });\n// We log the results\nconsole.log(top5Expensive);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a simple bar chart and save it as a PNG?","completion":"Hereâ€™s how to create a simple bar chart and save it as a PNG:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nimport { plot, bar } from '@observablehq/plot';\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data from an array\\nawait table.loadArray([{ year: 2024, value: 10 }, { year: 2025, value: 15 }]);\\n// Define the chart function\\nconst chartFunction = (data) => plot({\\n  marks: [\\n    bar(data, { x: 'year', y: 'value' })\\n  ]\\n});\\n// Write the chart to a PNG file\\nawait table.writeChart(chartFunction, 'output/bar.png');\\n// Close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I normalize a single column in my table and store the results in a new column?","completion":"Here's how you can normalize a column and store the results in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We normalize the values in 'myColumn' and store them in 'normalizedColumn'\nawait table.normalize(\"myColumn\", \"normalizedColumn\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write JSON data with dates formatted as ISO strings?","completion":"Here's how you can write JSON data with dates formatted as ISO strings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We write JSON data with dates formatted as ISO strings\nawait table.writeData(\"./output_dates.json\", { formatDates: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does getColumns return if the table has no data?","completion":"If the table has no rows, getColumns resolves to an empty array:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// No data loaded\nconst cols = await table.getColumns();\nconsole.log(cols); // []\nawait sdb.done();\n```"}
{"prompt":"How can I compute the length in kilometers instead of meters?","completion":"Specify the `unit` option as \"km\" when calling `length`:\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./my-lines.csv\");\n// Compute the length in kilometers and store it in 'length_km'\nawait table.length(\"length_km\", { unit: \"km\" });\nawait sdb.done();\n```"}
{"prompt":"How can I check if points are inside a polygon using the `inside` method?","completion":"Here's how to check if point geometries are inside polygon geometries:"}
{"prompt":"How can I create a buffer of 10 units around a specific geometry column named 'pointsGeom' and store it in a new column called 'pointsBuffer'?","completion":"Here's how to create a buffer around a specific geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We create a buffer of 10 units around the 'pointsGeom' column, storing results in 'pointsBuffer'\nawait table.buffer(\"pointsBuffer\", 10, { column: \"pointsGeom\" });\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I format the x-axis dates in a custom way when logging a dot chart?","completion":"Use the `formatX` option to customize the x-axis labels:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 },\n]);\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\nawait table.logDotChart(\"date\", \"value\", {\n  formatX: (d) => new Date(d).toLocaleDateString(\"en-US\", { month: \"short\", year: \"numeric\" }),\n});\nawait sdb.done();\n```"}
{"prompt":"How do I add a column indicating whether each geometry is closed?","completion":"Use the `isClosedGeo` method to create a new boolean column that marks closed geometries as `TRUE` and open ones as `FALSE`.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Add 'isClosed' column with boolean results\nawait table.isClosedGeo(\"isClosed\");\n// Log the table to see results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I view a summary of my table's columns, including data types and null counts?","completion":"Here's how you can log descriptive information about all columns in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the column description\nawait table.logDescription();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the last 10 rows of the table (with the last row first)?","completion":"The default behavior of `getBottom` returns the last row first.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the last 10 rows (last row first, default behavior)\nconst bottom10 = await table.getBottom(10);\n// Log the result\nconsole.log(bottom10);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What happens when I load a .geojson file regarding coordinate order?","completion":"Loading a .geojson file automatically flips coordinates to [latitude, longitude] order, so the toWGS84 option has no additional effect:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load .geojson file; coordinates are flipped automatically\nawait table.loadGeoData(\"./some-data.geojson\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Which data types can I specify in the types object?","completion":"Here is a complete mapping of supported types you can use with setTypes:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Set a wide range of types\nawait table.setTypes({\n  id: 'integer',\n  amount: 'float',\n  total: 'number',\n  name: 'string',\n  birthDate: 'date',\n  eventTime: 'time',\n  createdAt: 'datetime',\n  updatedAt: 'datetimeTz',\n  bigNumber: 'bigint',\n  precise: 'double',\n  description: 'varchar',\n  createdTimestamp: 'timestamp',\n  updatedTimestamp: 'timestamp with time zone',\n  isActive: 'boolean',\n  location: 'geometry',\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round the median result to a specific number of decimal places?","completion":"You can pass the `decimals` option to round the median:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./salaries.csv\");\n// Get the median of the \"salary\" column, rounded to 2 decimal places\nconst medianSalary = await table.getMedian(\"salary\", { decimals: 2 });\nconsole.log(medianSalary); // e.g., 50000.00\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I summarize multiple columns at once?","completion":"Pass an array of column names to `values`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We summarize multiple columns\nawait table.summarize({\n  values: [\"sales\", \"profit\"]\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I remove the intersection between two geometry columns in my table?","completion":"Here's how you can remove the intersection of two geometries and store the result in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Remove the intersection of 'geomB' from 'geomA', storing the result in 'geomA_minus_geomB'\nawait table.removeIntersection(\"geomA\", \"geomB\", \"geomA_minus_geomB\");\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens if I pass column names that do not exist in the table to `longer`?","completion":"If a column name is missing, the method will throw an error indicating the column is not found. Hereâ€™s an example that demonstrates the error handling:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./employee_counts.csv\");\ntry {\n  // '2025' does not exist in the data\n  await table.longer([\"2021\", \"2025\"], \"Year\", \"Employees\");\n} catch (e) {\n  console.error(\"Error during longer:\", e.message);\n}\nawait sdb.done();\n```"}
{"prompt":"What data type will the `getMin` method return?","completion":"The `getMin` method can return a string, number, boolean, Date, or null, depending on the data type of the values in the specified column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./my_data.csv\");\n// Get the minimum value from the 'date' column\nconst minDate = await table.getMin(\"date\");\nconsole.log(minDate); // e.g., 2023-01-01\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use different summary functions such as \"min\" or \"median\" with the rolling method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"summaryTable\");\nawait table.loadData(\"./data.csv\");\n// Rolling minimum of 'price'\nawait table.rolling(\"price\", \"rollingMinPrice\", \"min\", 2, 2);\n// Rolling median of 'price'\nawait table.rolling(\"price\", \"rollingMedianPrice\", \"median\", 2, 2);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I assign a custom name to a loaded database?","completion":"To assign a custom name, pass the name option when calling loadDB:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load a database with a custom name\nawait sdb.loadDB(\"./archive.db\", { name: \"archive_db\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace NULL values in a date column with a specific date?","completion":"Here's how to replace NULL values in a date column with a specific date:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Replace NULL values in \"dateColumn\" with 2023-01-01\nawait table.replaceNulls(\"dateColumn\", new Date(\"2023-01-01\"));\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I assign ranks within specific categories?","completion":"You can assign ranks within categories by specifying the `categories` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We assign ranks within each 'department' category based on 'salary'\nawait table.ranks(\"salary\", \"salaryRank\", { categories: \"department\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I calculate the Z-score for a specific column in my table?","completion":"Here's how you can calculate the Z-score for a column and store the results in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We calculate the Z-score for the 'value' column and store it in 'valueZScore'\nawait table.zScore(\"value\", \"valueZScore\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the number of columns in my table?","completion":"You can use the `getNbColumns` method to get the total count of columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the number of columns in the table\nconst nbColumns = await table.getNbColumns();\nconsole.log(nbColumns); // e.g., 3\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write the table data to a Google Sheet using the `toSheet` method?","completion":"Here's how you can write the table data to a Google Sheet:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a Google Sheet\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is it possible to call getTop without any conditions?","completion":"Yes, you can call getTop with just the count to retrieve the top rows without filtering:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Retrieve the top 5 rows without any filter\nconst top5 = await table.getTop(5);\n// Log the result\nconsole.log(top5);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I sort a column using French collation for handling accents?","completion":"Here's how you can sort a column using French collation:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We sort 'column1' in ascending order with French collation\nawait table.sort({ column1: \"asc\" }, { lang: { column1: \"fr\" } });\n// We log the sorted table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I define the data types of columns in a new table?","completion":"Here's how you can set the data types for columns in a new table using the `setTypes` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We set the data types for the columns\nawait table.setTypes({\n  id: \"integer\",\n  name: \"string\",\n  price: \"float\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I log the first 10 rows of my table by default?","completion":"The default behavior of `logTable` logs the first 10 rows without any parameters.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I adjust the reasoning token budget for the AI query?","completion":"Adjust the reasoning token budget:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"employees\");\nawait table.loadData(\"./employees.csv\");\nawait table.aiQuery(\"Give me the average salary by department\", { thinkingBudget: 200 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"If my CSV files donâ€™t have headers, how do I load them?","completion":"Set header to false:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { header: false });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I select multiple tables by name?","completion":"Here is how you can select multiple tables by name:\\n```// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst dummyTable = sdb.newTable();\\nawait sdb.selectTables([\"customers\", \"products\"]);\\nawait sdb.done();\\n```"}
{"prompt":"How do I see the full prompt sent to the AI model?","completion":"Enable the `verbose` option to log the complete prompt used for query generation.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./employees.csv\");\n// Verbose mode shows the prompt\nawait table.aiQuery(\"List top 5 highest paid employees\", { verbose: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"I have several columns to rename. How do I update their names without affecting other columns?","completion":"You can specify only the columns you want to rename, leaving others unchanged:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data with multiple columns\nawait table.loadData(\"./data.csv\");\n// Rename specific columns without affecting others\nawait table.renameColumns({ \n  \"oldColumn1\": \"newName1\",\n  \"anotherOld\": \"anotherNew\"\n});\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove a table using its SimpleTable instance?","completion":"You can pass the SimpleTable instance directly to remove it. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and define the employees table\nconst employeesTable = sdb.newTable(\"employees\");\n// ... (load data into employeesTable if needed) ...\n// Remove the employees table using its instance\nawait sdb.removeTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I keep only rows that contain missing values?","completion":"Keep only rows that contain missing values (invert)\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Keep only rows with missing values\nawait table.removeMissing({ invert: true });\n// Log table\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I format dates in my GeoJSON output?","completion":"You can format date and timestamp columns to ISO 8601 strings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the geospatial data with formatted dates\nawait table.writeGeoData(\"./output.geojson\", { formatDates: true });\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I create a SimpleDB instance that uses an in-memory database?","completion":"Here's how to create an in-memory SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with in-memory database (no file specified)\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform a full outer join and store the result in a new table?","completion":"import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into both tables\nawait tableA.loadGeoData(\"./dataA.geojson\");\nawait tableB.loadGeoData(\"./dataB.geojson\");\n// Perform full outer join and store in new table\nconst joinedTable = await tableA.joinGeo(tableB, \"intersect\", {\n  type: \"full\",\n  outputTable: true,\n});\n// Log the joined table\nawait joinedTable.logTable();\n// We close everything\nawait sdb.done();"}
{"prompt":"I have a column named 'location' that stores my geometries. How can I add a column indicating the geometry type specifically for this column?","completion":"Here's how you can add a new column with the geometry type for a specific column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a new column 'locationType' with the type of each geometry in the 'location' column\nawait table.typeGeo(\"locationType\", { column: \"location\" });\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a column with an offset applied within multiple categories (e.g., by stock symbol and exchange)?","completion":"Pass an array of category columns to the `categories` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Clone 'stock_price' as 'prev_price_by_stock_and_exchange' with offset 1 within each stock symbol and exchange\nawait table.cloneColumnWithOffset(\n  \"stock_price\",\n  \"prev_price_by_stock_and_exchange\",\n  {\n    offset: 1,\n    categories: [\"stock_symbol\", \"exchange\"],\n  }\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens when the extraction index is beyond the number of parts in a string?","completion":"Here's an example showing that out-of-bounds indices result in empty strings for affected rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file containing an 'address' column with inconsistent parts\nawait table.loadData(\"./split_data.csv\");\n// We split the 'address' column by comma and extract index 2 (out of bounds for all rows)\nawait table.splitExtract(\"address\", \",\", 2, \"part3\");\n// We log the table to see empty strings for out-of-bounds rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I assign bins to a column using the default starting value (minimum value in the column)?","completion":"Here's how you can assign bins with the default starting value (minimum value in the column):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file (assuming it has a column named \"column1\")\nawait table.loadData(\"./data.csv\");\n// We assign bins to \"column1\" with interval 10, storing in new column \"bins\"\n// Bins will start at minimum value in \"column1\"\nawait table.bins(\"column1\", 10, \"bins\");\n// We log the table to see the new bins column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Does the `cleanColumnNames` method modify the original data, or does it create a new table with the cleaned column names?","completion":"The `cleanColumnNames` method modifies the existing table in place. It does not create a new table.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadData(\"./my-data.csv\");\n// Clean the column names\nawait table.cleanColumnNames();\n// Log the table to see the cleaned column names\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I add the source file name as a column in the table?","completion":"Enable fileName to include the file name:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { fileName: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What happens when I call `logTypes` on a table?","completion":"It logs the data type of each column in the table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the column types\nawait table.logTypes();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify the original projection of the data if it's not automatically detected?","completion":"Yes, you can specify the original projection using the `from` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data and specify the original projection\nawait table.loadGeoData(\"./my-data.shp\", { from: \"EPSG:4326\" });\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if geometries in my geospatial data are closed and store the results in a new column named 'isClosed'?","completion":"Here's how to check geometry closure and store results in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We check if geometries are closed and store in 'isClosed'\nawait table.isClosedGeo(\"isClosed\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove duplicate rows from a table considering all columns?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./data.csv\");\n// We remove duplicate rows considering all columns (default behavior)\nawait table.removeDuplicates();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `renameTable` method do?","completion":"The `renameTable` method changes the name of the current table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Rename the table to \"orders\"\nawait table.renameTable(\"orders\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load a CSV file into a table?","completion":"Load a CSV file into a table using the loadData method:\\n\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"myTable\");\\n// Load data from the CSV file\\nawait table.loadData(\"path/to/your/data.csv\");\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How do I remove duplicate rows based on a single column, such as 'email'?","completion":"To remove duplicates based on a single column, specify the column name in the `on` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Remove duplicates based on 'email' column\nawait table.removeDuplicates({ on: \"email\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I close the SimpleDB instance?","completion":"Here's how you can close the SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove duplicate rows from my table considering all columns?","completion":"Here's how you can remove duplicate rows based on all columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove duplicate rows based on all columns\nawait table.removeDuplicates();\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add metadata to my GeoJSON output?","completion":"You can include metadata using the options parameter. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the geospatial data to a GeoJSON file with metadata\nawait table.writeGeoData(\"./output.geojson\", { \n  metadata: { source: \"My Project\" }\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I define my own set of missing value indicators?","completion":"You can define custom missing values like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'status' is missing or marked as 'N/A'\nawait table.removeMissing({ \n  columns: 'status',\n  missingValues: ['N/A']\n});\n// Log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove the intersection of two geometry columns and store the result in a new column?","completion":"Here's how you can remove the intersection of two geometry columns and store the result in a new column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// We remove the intersection of 'geomB' from 'geomA', storing the result in 'geomA_minus_geomB'\nawait table.removeIntersection(\"geomA\", \"geomB\", \"geomA_minus_geomB\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the haversine method for a within spatial join with 10 kilometers distance?","completion":"Set distance to 10000 (meters) and distanceMethod to 'haversine' for 10 km:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"./dataA.csv\");\nconst tableB = sdb.newTable();\nawait tableB.loadData(\"./dataB.csv\");\n// Merge using haversine (10 km = 10000 meters)\nawait tableA.joinGeo(tableB, \"within\", {\n  distance: 10000,\n  distanceMethod: \"haversine\"\n});\nawait sdb.done();\n```"}
{"prompt":"How do I load a remote Parquet file?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a remote Parquet file\nawait table.loadData(\"https://example.com/data.parquet\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a column with the default offset of 1 row?","completion":"The default offset is 1, so you can omit the offset option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Clone 'value' as 'previous_value' with default offset of 1\nawait table.cloneColumnWithOffset(\"value\", \"previous_value\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a new table with the summarized data, using a generated name?","completion":"Here's how you can create a new table with the summarized data, using a generated name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We get all columns\nconst columns = await table.getColumns();\n// We summarize all columns and store the results in a new table with a generated name\nconst summaryTable = await table.summarize({ values: columns, outputTable: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I chain logUniques with other methods?","completion":"Because logUniques returns the SimpleTable instance, you can chain it with other methods. Example:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data from a CSV file\\nawait table.loadData(\"./data.csv\");\\n// Log unique values and then log the whole table\\nawait table.logUniques(\"category\");\\nawait table.logTable();\\n// Close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I sort a single column in ascending order?","completion":"Use `sort({ columnName: \"asc\" })` to sort one column in ascending order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Sort 'price' column ascendingly\nawait table.sort({ price: \"asc\" });\n// Log the sorted table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I install the Simple Data Analysis library with Deno?","completion":"Use the Deno add command:\n```\n# Install the library with Deno\n\nden add jsr:@nshiab/simple-data-analysis\n```"}
{"prompt":"How do I create a buffer around geometries in the default geometry column and store the result in a new column?","completion":"Hereâ€™s how to buffer geometries in the default column and store the result in a new column:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We compute a buffer of 5 units around geometries in the default column, storing results in 'bufferedGeom'\nawait table.buffer(\"bufferedGeom\", 5);\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select the first 100 rows of a table without skipping any rows?","completion":"Use `selectRows(100)` to get the first 100 rows directly in the current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.selectRows(100);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I call getNbColumns before loading any data?","completion":"Yes, you can call it before loading data; it will simply return 0:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Call getNbColumns before loading data\nconst nbColumns = await table.getNbColumns();\nconsole.log(nbColumns); // 0\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fill NULL values in multiple columns with the previous non-NULL value?","completion":"To fill NULL values in multiple columns, use the `fill` method with an array of column names.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file containing NULL values\nawait table.loadData(\"./data.csv\");\n// Fill NULL values in multiple columns\nawait table.fill([\"columnA\", \"columnB\"]);\n// Log the table to verify the fill operation\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations separately for each category in a column named 'region'?","completion":"Here's how to compute correlations within each category of the 'region' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations within each 'region'\nawait table.correlations({ categories: \"region\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"If I don't provide a separator, what will be used to join the concatenated columns?","completion":"If you don't provide a separator, an empty string will be used. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load some data (replace with your actual data loading)\nawait table.loadData('./my-data.csv');\n// Concatenate 'prefix' and 'number' into 'phoneNumber' with no separator\nawait table.concatenate(['prefix', 'number'], 'phoneNumber');\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I overwrite the original column with the split result?","completion":"Yes, you can overwrite the original column by using the same name for newColumn:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Split 'fileName' by dot and extract the first part (index 0), overwriting 'fileName'\nawait table.splitExtract(\"fileName\", \".\", 0, \"fileName\");\n// Log the results to see the updated fileName column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable the creation of an index on the new embeddings column to speed up similarity searches?","completion":"Here's how to create an index on the new embeddings column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load some data into the table\nawait table.loadArray([\n  { description: \"Item 1\" },\n  { description: \"Item 2\" }\n]);\n// Generate embeddings and create an index\nawait table.aiEmbeddings(\"description\", \"embeddings\", {\n  createIndex: true // Enable index creation\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging to see the full prompt sent to the AI?","completion":"Set `verbose` to true to log detailed information:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([{ name: \"Marie\" }]);\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  { verbose: true }\n);\nawait sdb.done();\n```"}
{"prompt":"How do I specify which column contains the geometry data when multiple geometry columns exist?","completion":"Specify the geometry column using the `column` option in `writeMap`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { geo, plot } from \"@observablehq/plot\";\n\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We define a map function\nconst mapFunction = (geoJsonData) => plot({ ... });\n// We specify the geometry column\nconst outputPath = \"./output/map.png\";\nawait table.writeMap(mapFunction, outputPath, { column: \"geometry_column\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write a GeoJSON file with a specific precision and add metadata?","completion":"Here's how you can write a GeoJSON file with a specific precision and add metadata:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write GeoJSON with specific precision and metadata\nawait table.writeGeoData(\"./output_high_precision.geojson\", {\n  precision: 6,\n  metadata: { source: \"SimpleDataAnalysis\" },\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I trim whitespace from a single column named 'name' using default settings?","completion":"Here's how to trim whitespace from the 'name' column using default settings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Trim whitespace from the 'name' column (default: trim both sides, whitespace)\nawait table.trim(\"name\");\n// Log the table to verify changes\nawait table.logTable();\n// Close the database\nawait sdb.done();\n```"}
{"prompt":"How can I convert linestrings to polygons using the default geometry column?","completion":"Here's how you can convert linestrings to polygons using the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We transform closed linestrings into polygons\nawait table.linesToPolygons();\n// We log the first rows to see the transformed data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I limit the number of characters logged for string values?","completion":"Yes, use the `nbCharactersToLog` option to set a character limit:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create table with string logging limit\nconst table = sdb.newTable(\"myTable\", {}, sdb, { nbCharactersToLog: 20 });\n// Load data and log table\nawait table.loadData(\"./data.csv\");\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if my geometries are closed?","completion":"Here's how you can add a column indicating whether geometries are closed:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We check if geometries are closed and store results in 'isClosed' column\nawait table.isClosedGeo(\"isClosed\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I verify that the point geometries were created correctly?","completion":"After calling `points`, use `logTable` to inspect the new column. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\nawait table.points('lat', 'lon', 'geom');\n// Log the table to see the point geometries\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the variance of a numeric column in my table?","completion":"To compute the variance of a numeric column, simply call `getVar` after loading your data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// Load data from a CSV file\nawait table.loadData(\"./sales.csv\");\n// Calculate the variance of the \"amount\" column\nconst variance = await table.getVar(\"amount\");\nconsole.log(variance); // e.g., 25.5\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I rename my table to 'customers'?","completion":"Here's how you can rename the table to 'customers':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Rename the table to \"customers\"\nawait table.renameTable(\"customers\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve all tables created in my SimpleDB instance?","completion":"Here's how you can get all tables in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all tables\nconst tables = await sdb.getTables();\n// Log the tables to see the list\nconsole.log(\"All tables:\", tables);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"Can I choose the file format when saving the database?","completion":"Yes, you can save the database in either `.db` (DuckDB) or `.sqlite` format. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We write the database to a SQLite file\nawait sdb.writeDB(\"./my_exported_database.sqlite\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the schema of a table, including column names and data types?","completion":"Here's how you can get the schema of a table after loading data:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file to have a schema\nawait table.loadData(\"./data.csv\");\n// Get the schema of the table\nconst schema = await table.getSchema();\n// Log the schema in a readable table format\nconsole.table(schema);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I save my data as a SQLite database?","completion":"Use the `.sqlite` extension with `writeData`. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We write the data to a SQLite database\nawait table.writeData(\"./output.sqlite\");\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I remove rows where a column has multiple possible values?","completion":"You can pass an array of values to the `remove` method for that column. Here's an example removing products with certain statuses:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./products.csv\");\n// Remove rows where 'status' is either 'expired' or 'archived'\nawait table.remove({ status: [\"expired\", \"archived\"] });\n// Log the remaining data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I transform closed linestrings in the default geometry column to polygons?","completion":"Here's how you can convert closed linestrings to polygons using the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We transform closed linestrings to polygons in the default geometry column\nawait table.linesToPolygons();\n// We log the first rows to see the transformed data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I add a geometry column that stores the centroid of an existing geometry column?","completion":"Load geospatial data, then use `addColumn` with a geometry type and specify the projection:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data first\nawait table.loadGeoData(\"./countries.geojson\");\n// Add a new geometry column 'centroid' using the centroid of the 'geom' column\nawait table.addColumn(\"centroid\", \"geometry\", \"ST_Centroid(geom)\", {\n  projection: table.projections.geom,\n});\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I select only the 'name' and 'age' columns from my table?","completion":"Here's how you can select specific columns using the `selectColumns` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We select only the 'name' and 'age' columns\nawait table.selectColumns(['name', 'age']);\n// We log the table to see the selected columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I format date columns as ISO 8601 strings in the GeoJSON output?","completion":"Set the `formatDates` option to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./my-geodata.geojson\");\nawait table.writeGeoData(\"./output_dates.geojson\", { formatDates: true });\nawait sdb.done();\n```"}
{"prompt":"Is there a way to see what's happening with the cache?","completion":"Yes, you can enable verbose logging by setting `cacheVerbose` to true when creating the SimpleDB instance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with verbose cache logging\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// We create a new table\nconst table = sdb.newTable();\n// Cache operations will now log detailed information\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"]\n  });\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I write table data to a Google Sheet using the default credentials?","completion":"Here is how to write data to a Google Sheet using the default credentials:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Write the table data to the Google Sheet\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I provide a table name for debugging or logging purposes when executing a custom query?","completion":"You can provide a table name using the `table` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Execute a query with a table name for logging\nawait sdb.customQuery(\n  \"SELECT * FROM my_table\",\n  { \n    table: \"my_table\",\n    returnDataFrom: \"query\"\n  }\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I unnest geometries in a specific column named 'multiGeom'?","completion":"Here's how to unnest geometries in a specific column named 'multiGeom':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// We unnest geometries in the 'multiGeom' column\nawait table.unnestGeo(\"multiGeom\");\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the length of line geometries in meters and store the result in a new column called 'length_m'?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// Compute the length in meters and store in 'length_m'\nawait table.length(\"length_m\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows based on multiple columns simultaneously?","completion":"To remove rows that match multiple column conditions, use the following code:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data\\nawait table.loadData(\"./data.csv\");\\n// Remove rows where city is Montreal and job is accountant or developer\\nawait table.remove({ job: [\"accountant\", \"developer\"], city: \"Montreal\" });\\n// Log the table to verify\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"What parameters do I need to pass to the `longer` method and what do they represent?","completion":"The `longer` method requires three arguments:\n- `columns`: an array of column names to unpivot.\n- `columnsTo`: the name of the new column that will hold the original column names.\n- `valuesTo`: the name of the new column that will hold the values from the stacked columns.\nExample:\n```\nawait table.longer(['2021', '2022', '2023'], 'year', 'employees');\n```"}
{"prompt":"Does the `logTableNames` method change the data in my tables?","completion":"No, the `logTableNames` method only logs the names of the tables to the console. It does not modify any data within the tables. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table and load some data\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./my-data.csv\");\n// Log the table names\nawait sdb.logTableNames();\n// Log the table data to verify it hasn't changed\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I keep only the rows where the 'country' column is either 'USA' or 'Canada'?","completion":"Here's how you can keep rows based on multiple values in a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We keep only rows where the country is USA or Canada\nawait table.keep({ country: [\"USA\", \"Canada\"] });\n// We log the table to see the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all values from a specific column using SimpleTable?","completion":"Hereâ€™s how to get all values from the 'productName' column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./sales.csv\");\n// Get all values from the 'productName' column\nconst productNames = await table.getValues(\"productName\");\nconsole.log(productNames);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the top 3 rows where the 'price' is greater than 100?","completion":"Here's how you can get the top 3 rows where the 'price' is greater than 100:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the top 3 rows where the price is greater than 100\nconst top3Expensive = await table.getTop(3, { conditions: `price > 100` });\n// We log the results\nconsole.log(top3Expensive);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I summarize only specific columns, such as 'sales' and 'profit'?","completion":"Explanation: Summarize only the 'sales' and 'profit' columns.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"myTable\");\\nawait table.loadData(\"./data.csv\");\\nawait table.summarize({ values: [\"sales\", \"profit\"] });\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How to set fixed y-axis scales for all small multiples in a dot chart?","completion":"Set fixedScales to true to make all small multiples share the same y-axis scale.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data with category column\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n];\nawait table.loadArray(data);\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Generate dot chart with fixed y-axis scales\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  fixedScales: true,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert closed linestrings to polygons using the default geometry column?","completion":"Here's how you can transform closed linestrings in the default geometry column into polygons:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We convert closed linestrings to polygons using the default geometry column\nawait table.linesToPolygons();\n// We log the first rows to see the transformed data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What if my geometry column has a custom name? How do I specify it?","completion":"If your geometry column has a custom name, pass it via the column option:\n```\n// Compute the length of geometries in a specific column named 'routeGeom'\nawait table.length('routeLength', { column: 'routeGeom' });\n```"}
{"prompt":"Can I give a custom name to my loaded database?","completion":"Yes, you can specify a custom name when loading the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load with a custom name\nawait sdb.loadDB(\"./archive.db\", { name: \"archive_db\" });\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I determine the total number of values in my table?","completion":"Here's how you can use the `getNbValues` method to find the total number of values in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the total number of values\nconst nbValues = await table.getNbValues();\n// We log the result\nconsole.log(nbValues);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a new table with the results of the spatial join instead of overwriting the original table?","completion":"Here's how you can create a new table with the results of the spatial join:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Assuming both tables have been loaded with data\n// We perform an intersection join, creating a new table\nconst tableC = await tableA.joinGeo(tableB, \"intersect\", {\n  outputTable: true,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I generate embeddings for a column named 'description' and store them in a new column called 'description_embeddings'?","completion":"Here's how you can generate embeddings for a specific column and store them in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadArray([{ description: \"This is a test\" }, { description: \"Another test\" }]);\n// Generate embeddings for the 'description' column and store them in 'description_embeddings'\nawait table.aiEmbeddings(\"description\", \"description_embeddings\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I see both column names and their data types?","completion":"Here's how you can log column names along with their data types:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log column names and their types\nawait table.logColumns({ types: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How does the coordinate order work when getting GeoJSON data?","completion":"The method flips coordinates from WGS84/EPSG:4326 to RFC7946 standard. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Get GeoJSON data and see the flipped coordinates\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Is the output sorted alphabetically by default?","completion":"Yes, the method sorts the table names alphabetically before logging.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst t1 = sdb.newTable(\"zeta\");\nconst t2 = sdb.newTable(\"alpha\");\nawait sdb.logTableNames(); // Logs: [\"alpha\",\"zeta\"]\nawait sdb.done();\n```"}
{"prompt":"How do I compute lengths from a specific geometry column?","completion":"You can specify the geometry column using the options parameter:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the length of geometries in the 'routeGeom' column and store it in 'routeLength'\nawait table.length(\"routeLength\", { column: \"routeGeom\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle compressed CSV files?","completion":"Use the `compression` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"compressedCSV\");\nawait table.loadDataFromDirectory(\"./data/\", { \n  fileType: \"csv\",\n  compression: \"gzip\"\n});\nawait sdb.done();\n```"}
{"prompt":"How do I fix invalid geometries in my geospatial data?","completion":"Here's how you can fix invalid geometries in your geospatial data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We fix invalid geometries in the default geometry column\nawait table.fixGeo();\n// We log the first rows to see the fixed data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What if I want to treat custom values as missing?","completion":"Use the `missingValues` option to define your own missing value markers:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'age' is missing or equals -1\nawait table.removeMissing({ columns: \"age\", missingValues: [-1] });\nawait sdb.done();\n```"}
{"prompt":"How can I round the correlation values to a specific number of decimals?","completion":"Use the `decimals` option to specify the number of decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations with 2 decimal places\nawait table.correlations({ decimals: 2 });\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I store the similarity results in a separate table instead of modifying the current one?","completion":"Here is how you can store the results in a new table using the outputTable option:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n  { food: \"pasta\" },\n  { food: \"salad\" }\n]);\n// Generate embeddings for the \"food\" column\nawait table.aiEmbeddings(\"food\", \"embeddings\");\n// Find the 3 most similar foods to \"italian food\" and store results in \"similarFoods\" table\nconst similarFoods = await table.aiVectorSimilarity(\n  \"italian food\",\n  \"embeddings\",\n  3,\n  { outputTable: \"similarFoods\" }\n);\n// Log the new table\nawait similarFoods.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the unique values from a column named 'country' in my table?","completion":"Here's how you can retrieve unique values from a specific column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get unique values from the 'country' column\nconst uniqueCountries = await table.getUniques(\"country\");\nconsole.log(uniqueCountries); // e.g., [\"USA\", \"Canada\", \"Mexico\"]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I fill NULL values across multiple columns at once?","completion":"Yes, you can fill NULL values in multiple columns simultaneously:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data with NULL values in multiple columns\nawait table.loadData(\"./data.csv\");\n// Fill NULLs in both 'revenue' and 'expenses' columns\nawait table.fill([\"revenue\", \"expenses\"]);\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round a column to two decimal places?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.round('column1', { decimals: 2 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the first row where a specific column matches a certain value using SQL syntax?","completion":"Here's how you can retrieve the first row based on a SQL condition:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the first row where the 'category' is 'Electronics'\nconst firstRowElectronics = await table.getFirstRow({ conditions: \"category = 'Electronics'\" });\nconsole.log(firstRowElectronics);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the specified column does not exist in the table?","completion":"The documentation doesn't explicitly state the behavior if the column doesn't exist. However, based on the return type, it's likely to return `null`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Get the minimum value from a non-existent column\nconst minNonExistent = await table.getMin(\"nonExistentColumn\");\nconsole.log(minNonExistent); // e.g., null\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What is the difference between 'haversine' and 'spheroid' methods?","completion":"The 'haversine' method is faster but less accurate, while 'spheroid' is more accurate but slower. Both require EPSG:4326 data.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file (must be EPSG:4326)\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Example using both methods for comparison\n// Haversine method\nawait table.distance(\"point1\", \"point2\", \"haversine_dist\", { method: \"haversine\" });\n// Spheroid method\nawait table.distance(\"point1\", \"point2\", \"spheroid_dist\", { method: \"spheroid\" });\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I use the intersect method to determine if two geometry columns overlap?","completion":"You can call intersect on two geometry columns and store the boolean result in a new column. ```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"geoTable\");\\n// We load geospatial data from a file\\nawait table.loadGeoData(\"./my-geodata.geojson\");\\n// We check intersection between 'geomA' and 'geomB', storing in 'doIntersect'\\nawait table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\\n// We log the results\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();```"}
{"prompt":"How can I clone a column with an offset of 1 row?","completion":"Here's how you can clone a column with a default offset of 1 row:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Clone 'value' as 'previous_value', offsetting by 1 row\nawait table.cloneColumnWithOffset(\"value\", \"previous_value\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use getNbValues after loading a CSV file?","completion":"After loading data, simply call getNbValues to retrieve the total count of values.\n\nExample:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// Load the sales data\nawait table.loadData(\"./sales.csv\");\n// Retrieve the total number of values\nconst totalValues = await table.getNbValues();\nconsole.log(`Total values: ${totalValues}`);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I store the summary results in a new table?","completion":"You can specify a name for the new table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a new instance\nconst sdb = new SimpleDB();\n// Create a table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./data.csv\");\n// Summarize and store in a new table\nconst summaryTable = await table.summarize({\n  values: \"sales\",\n  outputTable: \"summaryResults\"\n});\n// Close the connection\nawait sdb.done();\n```"}
{"prompt":"What if my geometry column has a different name?","completion":"You can specify any column name for extraction:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Extract latitude and longitude into custom column names\nawait table.latLon(\"geometry\", \"latitude\", \"longitude\");\n// Log the results to see the new columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I round the mean to a specific number of decimal places?","completion":"Use the optional decimals option to round the result:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./salaries.csv\");\n// Calculate the mean of the \"salary\" column, rounded to 2 decimals\nconst meanSalary = await table.getMean(\"salary\", { decimals: 2 });\nconsole.log(meanSalary); // e.g., 55000.23\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use Ollama with `aiQuery`?","completion":"To use Ollama, set the `ollama` option to `true`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// We run the aiQuery using Ollama\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { ollama: true }\n);\nawait sdb.done();\n```"}
{"prompt":"How can I keep only rows where the 'status' column is 'active'?","completion":"Here's how you can filter rows to keep only those with status 'active':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We keep rows where status is 'active'\nawait table.keep({ status: \"active\" });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the centroid of geometries using the default geometry column and store the result in a new column?","completion":"Here's how to compute the centroid using the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We compute the centroid using the default geometry column\nawait table.centroid(\"centerPoint\");\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I rename a table to a new name?","completion":"You can rename the current table by calling the `renameTable` method with the desired name.\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Rename the table to \"new_employees\"\nawait table.renameTable(\"new_employees\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert multiple columns to lowercase at once?","completion":"You can pass an array of column names to the `lower` method. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Convert 'FirstName' and 'LastName' columns to lowercase\nawait table.lower([\"FirstName\", \"LastName\"]);\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I write the table data to a SQLite database file?","completion":"Hereâ€™s how to write the table data to a SQLite database file:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Write to SQLite\nawait table.writeData(\"./my_database.sqlite\");\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute ranks within categories?","completion":"Here's how you can compute ranks within categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadData(\"./my-data.csv\");\n// Compute ranks within 'department' categories, based on 'salary' values\nawait table.ranks(\"salary\", \"salaryRank\", {\n  categories: \"department\",\n});\n// Log the table to see the new 'salaryRank' column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I give the new table a custom name when selecting rows?","completion":"Provide a string for `outputTable` to name the new table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Select 75 rows and store them in a new table named \"top_customers\"\nconst topCustomersTable = await table.selectRows(75, {\n  outputTable: \"top_customers\",\n});\nawait sdb.done();\n```"}
{"prompt":"How can I multiply all values in a column named 'sales' by 2?","completion":"Here's how you can update the 'sales' column by multiplying its values by 2:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We update the 'price' column\nawait table.updateColumn(\"price\", `price * 2`);\n// We log the first rows to see the updated data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if geometries in the 'pointGeom' column are inside the 'polygonGeom' column and store the result in a new column called 'isInsidePolygon'?","completion":"Here's how to use the `inside` method with the specified columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"geoTable\");\nawait table.loadGeoData(\"./geodata.geojson\");\n// Check if points in 'pointGeom' are inside polygons in 'polygonGeom'\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n// Log results to see boolean values\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I export my data to DuckDB?","completion":"Yes, use the `.db` extension with `writeData`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We write the data to a DuckDB database\nawait table.writeData(\"./output.db\");\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I extract latitude and longitude from a point geometry column using the `latLon` method?","completion":"Here is how you can extract latitude and longitude from the 'geom' column into 'lat' and 'lon' columns:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData('./data.csv');\n// Extract latitude and longitude\nawait table.latLon('geom', 'lat', 'lon');\n// Log the table to see the new columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens when I reproject to WGS84?","completion":"Reprojecting to WGS84 will return latitude/longitude order.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Reproject to WGS84 (EPSG:4326)\nawait table.reproject('WGS84');\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I round Z-scores to two decimal places?","completion":"Here's how you can round Z-scores to a specific number of decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Compute Z-scores for 'score' and round to 2 decimal places\nawait table.zScore(\"score\", \"scoreZScore\", { decimals: 2 });\n// Log the table to see the rounded values\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"Does `unnestGeo` modify the original table, or does it create a new one?","completion":"The `unnestGeo` method modifies the existing table in place. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We unnest the geometries\nawait table.unnestGeo();\n// We log the first rows to see the unnested data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table using the default generated name?","completion":"Clone the table and let the library generate a name automatically.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the original table\nawait table.loadData(\"./data.csv\");\n// Clone the table with default name\nconst clonedTable = await table.cloneTable();\n// Log the cloned table to verify\nawait clonedTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get information about my table's columns?","completion":"You can use the `logDescription` method to log descriptive information about your table's columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log descriptive information about the columns\nawait table.logDescription();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the median value of a numeric column in my dataset?","completion":"Here's how you can calculate the median value of a numeric column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the median of the 'age' column\nconst medianAge = await table.getMedian(\"age\");\nconsole.log(\"Median age:\", medianAge);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I select multiple tables by name?","completion":"Here's how to select multiple tables by name, keeping only those tables and removing others:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create two tables: \"customers\" and \"products\"\nconst customersTable = sdb.newTable(\"customers\");\nconst productsTable = sdb.newTable(\"products\");\n// Select both tables, removing any other tables\nawait sdb.selectTables([\"customers\", \"products\"]);\nawait sdb.done();\n```"}
{"prompt":"How do I transform closed linestrings in a specific column named 'routeLines' into polygons?","completion":"You can transform closed linestrings in a specific column by passing the column name to `linesToPolygons`.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// Transform closed linestrings in the 'routeLines' column into polygons\nawait table.linesToPolygons(\"routeLines\");\n// Log the table to see the transformed polygons\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if a column contains only `NULL` values?","completion":"Here's how the `fill` method behaves when a column contains only `NULL` values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We fill NULL values in 'myColumn'\nawait table.fill(\"myColumn\");\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nThe `fill` method will leave the column with `NULL` values as there is no preceding non-`NULL` value to use."}
{"prompt":"What type of data does the `loadArray` method expect?","completion":"The `loadArray` method expects an array of JavaScript objects. Each object in the array represents a row of data, and the properties of each object represent the columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We define the data as an array of objects\nconst data = [\n  { name: \"Alice\", age: 30 },\n  { name: \"Bob\", age: 25 },\n];\n// We load the data into the table\nawait table.loadArray(data);\n// We log the table to see the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I chain logUniques with other table methods?","completion":"Because `logUniques` returns the table, you can chain it with other methods like `logTable`:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\nawait table.logUniques('name').logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the skewness of a numeric column using SimpleTable?","completion":"You can call the `getSkew` method after loading your data:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the skewness of the 'sales' column\nconst salesSkew = await table.getSkew(\"sales\");\nconsole.log(\"Skewness of sales:\", salesSkew);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the original projection when reprojecting?","completion":"You can provide the source SRS using the `from` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reproject geometries from EPSG:4326 to EPSG:3347\nawait table.reproject(\"EPSG:3347\", { from: \"EPSG:4326\" });\n// Log the reprojected data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I use hasTable in a conditional statement to create a table only if it doesn't exist?","completion":"Yes, you can use an if statement to create the table only when hasTable returns false.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\nconst exists = await sdb.hasTable('new_table');\nif (!exists) {\n  // Create the table only if it doesn't exist\n  const table = sdb.newTable('new_table');\n  console.log('Created new table.');\n} else {\n  console.log('Table already exists.');\n}\nawait sdb.done();\n```"}
{"prompt":"How do I load a DuckDB database file with default options?","completion":"You can load a DuckDB file using the default settings by simply calling `loadDB` with the file path:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load a DuckDB database file with default options\nawait sdb.loadDB(\"./my_database.db\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate quartiles for a column named 'revenue' and store them in a new column called 'revenueQuartile'?","completion":"Here's how you can calculate quartiles for a column and store the results:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We assign quartiles based on the 'sales' column\nawait table.quantiles(\"sales\", 4, \"salesQuartile\");\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I log all table names in my SimpleDB instance?","completion":"Use the `logTableNames` method after creating or loading tables. It prints the names to the console.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a couple of tables\nconst table1 = sdb.newTable(\"employees\");\nconst table2 = sdb.newTable(\"customers\");\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I merge two tables using an inside spatial join?","completion":"Use the 'inside' method to merge where geometries of the current table are entirely within the other table's geometries:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"./dataA.csv\");\nconst tableB = sdb.newTable();\nawait tableB.loadData(\"./dataB.csv\");\n// Merge tableA with tableB using inside (overwriting tableA)\nawait tableA.joinGeo(tableB, \"inside\");\nawait sdb.done();\n```"}
{"prompt":"How can I display the histogram in a compact format?","completion":"Use the `compact` option to show a more compact view. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Generate a compact histogram for 'price'\nawait table.logHistogram(\"price\", { compact: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to write a table's data to a DuckDB database file?","completion":"Here's how you can write the table's data to a DuckDB database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We write the data to a DuckDB database file\nawait table.writeData(\"./my_database.db\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What is the format of the array returned by getBoundingBox?","completion":"The method returns an array in the order [minLat, minLon, maxLat, maxLon]. You can destructure it like this:\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\\\"./data.csv\\\");\\nconst [minLat, minLon, maxLat, maxLon] = await table.getBoundingBox();\\nconsole.log(`Bounding box: (${minLat}, ${minLon}) to (${maxLat}, ${maxLon})`);\\nawait sdb.done();\\n```"}
{"prompt":"How can I reproject geometries from EPSG:4326 to EPSG:3347?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// Reproject from EPSG:4326 to EPSG:3347\nawait table.reproject(\"EPSG:3347\", { from: \"EPSG:4326\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I combine the values from the 'firstName' and 'lastName' columns into a new column called 'fullName'?","completion":"Here's how you can concatenate the 'firstName' and 'lastName' columns into a new 'fullName' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We concatenate the 'firstName' and 'lastName' columns into 'fullName'\nawait table.concatenate([\"firstName\", \"lastName\"], \"fullName\");\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I format the labels and values in the bar chart?","completion":"You can provide custom formatting functions for labels and values:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n]);\nawait table.logBarChart(\"category\", \"value\", {\n  formatLabels: (d) => `Cat: ${d}`,\n  formatValues: (d) => `$${d.toFixed(2)}`,\n});\nawait sdb.done();\n```"}