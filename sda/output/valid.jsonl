{"prompt":"How can I replace multiple strings across several columns at once?","completion":"You can pass an array of column names and an object with all the replacements:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Replace \"kilograms\" with \"kg\" and \"liters\" with \"l\" in both \"column1\" and \"column2\"\nawait table.replace([\"column1\", \"column2\"], {\n  'kilograms': 'kg',\n  'liters': 'l'\n});\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use a SimpleTable instance with selectTables?","completion":"selectTables also accepts SimpleTable instances. First create the table, load data, then pass the instance.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table instance\nconst employeesTable = sdb.newTable(\"employees\");\n// Load data into the table (example path)\nawait employeesTable.loadData(\"./employees.csv\");\n// Keep only this table\nawait sdb.selectTables(employeesTable);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the area of geometries in square kilometers?","completion":"Here's how you can compute the area of geometries in square kilometers:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the area in square kilometers and store it in 'area_km2'\nawait table.area(\"area_km2\", { unit: \"km2\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I compute the length in kilometers instead of meters?","completion":"Yes, you can specify kilometers as the unit:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the length of line geometries in kilometers and store in 'length_km'\nawait table.length(\"length_km\", { unit: \"km\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I summarize all columns and store the results in a new table with a generated name?","completion":"Here’s how you can summarize all columns and store the results in a new table with a generated name:\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\\\"myTable\\\");\\nawait table.loadData(\\\"./data.csv\\\");\\nconst columns = await table.getColumns();\\nconst summaryTable = await table.summarize({ values: columns, outputTable: true });\\nawait summaryTable.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How can I simplify my geospatial data using a specific tolerance?","completion":"Here's how you can simplify geometries with a given tolerance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify the geometries with a tolerance of 0.1\nawait table.simplify(0.1);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to rename a column that doesn’t exist?","completion":"`renameColumns` will simply ignore any keys that don’t match existing columns; no error is thrown. Here’s an example where one of the names is invalid:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadData(\"./data.csv\");\n// Attempt to rename a non‑existent column \"missing_col\"\nawait table.renameColumns({ \"existing_col\": \"newName\", \"missing_col\": \"ignored\" });\n// Log the table to see that only the existing column was renamed\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I write data to a DuckDB database?","completion":"Yes, you can write your data directly to a DuckDB database file. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We write the data to a DuckDB database\nawait table.writeData(\"./my_database.db\");\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I assign a custom name to a loaded database?","completion":"To assign a custom name, pass the name option when calling loadDB:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load a database with a custom name\nawait sdb.loadDB(\"./archive.db\", { name: \"archive_db\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a table named 'sales' in SimpleDB?","completion":"We create a table by calling `sdb.newTable` with the table name as an argument.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table named 'sales'\nconst table = sdb.newTable(\"sales\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `logNbRows` method return?","completion":"The `logNbRows` method returns a promise that resolves to the `SimpleTable` instance itself. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We log the number of rows\nconst returnedTable = await table.logNbRows();\n// We can then use the returnedTable if needed\nconsole.log(returnedTable);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I customize the appearance of the chart using CSS?","completion":"You can customize the chart's appearance using the `style` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { dot, plot } from \"@observablehq/plot\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: \"year\", y: \"value\" }),\n    ],\n  });\n\nconst outputPath = \"output/chart.png\";\nconst styleOptions = {\n  style: \"#chart { background-color: lightblue; }\",\n};\n\nawait table.writeChart(chartFunction, outputPath, styleOptions);\nawait sdb.done();\n```"}
{"prompt":"How can I specify a specific column containing the geometries when calculating the perimeter?","completion":"Here's how you can specify a column containing the geometries when calculating the perimeter:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the perimeter of geometries in a specific column named 'landParcelGeom'\nawait table.perimeter(\"landParcelPerimeter\", { column: \"landParcelGeom\" });\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I view the boolean results after calling `intersect`?","completion":"After calling `intersect`, you can log the table to see the boolean results.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Perform the intersection check\nawait table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\n// Log the table to view the new boolean column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I reduce the precision of geometries in a specific column named 'myGeom' to 2 decimal places?","completion":"Here's how you can reduce the precision of geometries in a specific column named 'myGeom' to 2 decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We reduce the precision of geometries in the 'myGeom' column to 2 decimal places\nawait table.reducePrecision(2, { column: \"myGeom\" });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add a column that shows the geometry type for each row without specifying the geometry column?","completion":"Here's how to add a geometry type column using the auto-find feature:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData('./data.geojson');\n// We add a column with the geometry type (using auto-find for the geometry column)\nawait table.typeGeo('geometryType');\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I call `getNbColumns` before loading any data?","completion":"Yes, calling `getNbColumns` before loading data also returns 0.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Call before loading data\nconst nbColumns = await table.getNbColumns();\nconsole.log(nbColumns); // 0\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data types can the values in a column be?","completion":"The `getValues` method can return values of type string, number, boolean, Date, or null. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Get all values from the 'isActive' column\nconst activeStatuses = await table.getValues(\"isActive\");\nconsole.log(activeStatuses); // e.g., [true, false, true]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the standard deviation of a column named 'age' and round the result to 2 decimal places?","completion":"Here's how you can calculate the standard deviation of the 'age' column and round the result to 2 decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./user-data.csv\");\n// We calculate the standard deviation of the 'age' column, rounded to 2 decimal places\nconst ageStdDev = await table.getStdDev(\"age\", { decimals: 2 });\nconsole.log(ageStdDev); // e.g., 15.75\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform an inner join using spatial data?","completion":"Specify the `type` option as `inner` in your join:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load your geospatial data\nawait tableA.loadGeoData(\"./dataA.geojson\");\nawait tableB.loadGeoData(\"./dataB.geojson\");\n// Perform an inner spatial join\nawait tableA.joinGeo(tableB, \"intersect\", { type: \"inner\" });\n// Log the results\nawait tableA.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I select 50 rows and store them in a new table with a generated name?","completion":"Use `selectRows(50, { outputTable: true })` to create a new table with an auto-generated name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst newTable = await table.selectRows(50, { outputTable: true });\nawait newTable.logTable();\nawait sdb.done();\n```"}
{"prompt":"What happens if I call `fixGeo` without providing a column name?","completion":"When no column is specified, `fixGeo` automatically searches for a geometry column and fixes it:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData('path/to/your/geodata.geojson');\n// Attempt to fix geometries in the automatically detected column\nawait table.fixGeo();\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I add a message before the data when writing to a Google Sheet?","completion":"You can add a message before the data using the `prepend` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a Google Sheet with a prepended message\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  prepend: \"Report generated on:\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add a new column with ranks based on the values in an existing column?","completion":"Here's how you can add a new column with ranks based on an existing column's values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Add a 'rank' column based on the 'score' column (ascending order)\nawait table.ranks(\"score\", \"rank\");\n// Log the table to see the new 'rank' column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I select rows and store them in a specific named table?","completion":"You can specify the new table's name using `outputTable`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Select 75 rows and store in \"top_customers\"\nconst topCustomers = await table.selectRows(75, { outputTable: \"top_customers\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fill missing values in a single column using the previous non-NULL value?","completion":"Use the `fill` method with a single column name to replace NULLs with the last non-NULL value from preceding rows.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data.csv\");\n// Fill NULL values in 'price' column\nawait table.fill(\"price\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I compress a GeoParquet file when writing?","completion":"Yes, you can enable compression using the `compression` option. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the geospatial data to a compressed GeoParquet file\nawait table.writeGeoData(\"./output.geoparquet\", { compression: true });\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I sort a column using French collation?","completion":"Use the options.lang parameter to set the language for collation:\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data\\nawait table.loadData(\"./data.csv\");\\n// Sort 'name' column ascending with French collation\\nawait table.sort({ name: \"asc\" }, { lang: { name: \"fr\" } });\\n// Log the sorted table\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I retrieve GeoJSON data from a specific geometry column named 'myGeometries'?","completion":"Pass the column name as the first argument to `getGeoData` to specify the geometry column.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./data.geojson\");\nconst geojson = await table.getGeoData(\"myGeometries\");\nconsole.log(geojson);\nawait sdb.done();\n```"}
{"prompt":"What does getNbRows return if the table has no rows?","completion":"getNbRows returns 0 when the table has no rows. For example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load an empty CSV file (no rows)\nawait table.loadData(\"./empty.csv\");\n// Get number of rows\nconst nbRows = await table.getNbRows();\nconsole.log(nbRows); // 0\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I group by multiple categories?","completion":"Yes, pass an array of column names to `categories`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We summarize 'sales' by 'region' and 'product_type'\nawait table.summarize({ values: \"sales\", categories: [\"region\", \"product_type\"] });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I use quantiles for something other than quartiles?","completion":"Yes, you can use any number of quantiles. Here's an example with deciles (10 quantiles):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We assign deciles based on 'score' column values\nawait table.quantiles(\"score\", 10, \"decile\");\n// We log the results to see the new decile column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I write data in Parquet format?","completion":"Here's how you can write your data to a Parquet file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We write the data to a Parquet file\nawait table.writeData(\"./output.parquet\");\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I use the left method to shorten product codes?","completion":"Yes, here's how you can shorten product codes:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./products.csv\");\n// Shorten product codes to first 4 characters\nawait table.left(\"productCode\", 4);\n// Log the modified table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set the data types for a new table?","completion":"Here's an example of setting types for a new table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We set the data types for the columns\nawait table.setTypes({\n  name: \"string\",\n  salary: \"integer\",\n  raise: \"float\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to use bins with the default start value?","completion":" By default, bins uses the minimum value in the specified column as the starting point. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.bins(\"column1\", 10, \"bins\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I select the first 100 rows from my table?","completion":"Here's how you can select the first 100 rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Select the first 100 rows\nawait table.selectRows(100);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I keep rows where the 'status' column has the value 'active'?","completion":"Here's how you can filter rows using the `keep` method for a single value in a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./users.csv\");\n// We keep rows where status is 'active'\nawait table.keep({ status: \"active\" });\n// We log the filtered table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all table names from the database?","completion":"Here’s how to retrieve all table names:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\nawait sdb.done();\n```"}
{"prompt":"Can I sort all columns ascending by explicitly passing null?","completion":"Yes, passing null as the order argument sorts all columns ascendingly.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.sort(null);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I find out how many rows are in my table?","completion":"Here's how you can log the number of rows in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We log the number of rows\nawait table.logNbRows();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I log the bottom rows after filtering the table?","completion":"Yes, filter first and then call `logBottom`. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Filter rows where the \"status\" column equals \"active\"\nawait table.filter({ status: \"active\" });\n// Log the last 5 rows of the filtered result\nawait table.logBottom(5);\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the data types of all columns in a table?","completion":"Here’s how you can retrieve the data types of all columns in a table:\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\\\"myTable\\\");\\n// We load data from the file\\nawait table.loadData(\\\"./my-data.csv\\\");\\n// Get the data types of all columns\\nconst dataTypes = await table.getTypes();\\nconsole.log(dataTypes);\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"Can I specify the number of decimal places for the skewness result?","completion":"Yes, you can specify the number of decimal places using the `decimals` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We calculate the skewness of the 'price' column, rounded to 2 decimal places\nconst priceSkew = await table.getSkew(\"price\", { decimals: 2 });\nconsole.log(priceSkew); // e.g., -0.33\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the number of decimal places for the computed proportions?","completion":"You can specify the number of decimal places using the `decimals` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We compute horizontal proportions with a specified number of decimal places\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"], { decimals: 2 });\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate all geometries into a single union geometry?","completion":"Here’s how to aggregate all geometries in the default column into a single union geometry:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\\\"./my-geodata.geojson\\\");\n// Aggregate all geometries into a union\nawait table.aggregateGeo(\\\"union\\\");\n// Log the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"If my CSV files don’t have headers, how do I load them?","completion":"Set header to false:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { header: false });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I select multiple tables by name?","completion":"Here is how you can select multiple tables by name:\\n```// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst dummyTable = sdb.newTable();\\nawait sdb.selectTables([\"customers\", \"products\"]);\\nawait sdb.done();\\n```"}
{"prompt":"Can I specify a custom name when loading a database?","completion":"Yes, you can provide a custom name using the `name` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load the database with a custom name\nawait sdb.loadDB(\"./archive.db\", { name: \"archive_db\" });\n// Close everything properly\nawait sdb.done();\n```\n"}
{"prompt":"How can I sort multiple columns with different orders?","completion":"Here's how you can sort multiple columns with different orders:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We sort 'column1' ascendingly, then 'column2' descendingly\nawait table.sort({ column1: \"asc\", column2: \"desc\" });\n// We log the table to see the sorted data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I get the sum of a column with zero values?","completion":"Yes, `getSum` works with columns containing zeros. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data with zero values in 'price' column\nawait table.loadData(\"./data-with-zeros.csv\");\n// Get sum of 'price' column which may contain zeros\nconst total = await table.getSum(\"price\");\nconsole.log(total); // e.g., 0\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable verbose cache-related messages?","completion":"Here's how you can enable verbose cache-related messages:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// You can now perform operations with the database\nawait sdb.done();\n```"}
{"prompt":"How can I check if a table has a specific column, such as 'age'?","completion":"Here's how you can check for the existence of a column named 'age' in a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file (assuming it has a column 'age')\nawait table.loadData(\"./data.csv\");\n// Check if the table has a column named 'age'\nconst hasAgeColumn = await table.hasColumn(\"age\");\nconsole.log(hasAgeColumn); // Output: true or false\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use aiRowByRow to add a new column based on a prompt?","completion":"Here’s how to add a gender column based on a prompt:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadArray([\n  { name: \"Marie\" },\n  { name: \"John\" },\n  { name: \"Alex\" },\n]);\n// Apply AI to each row\nawait table.aiRowByRow(\n  \"name\", // column to read\n  \"gender\", // new column to write\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`\n);\n// View results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I find features within a certain distance using `joinGeo`?","completion":"Use the `within` method with a specified distance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Initialize SimpleDB\nconst sdb = new SimpleDB();\n// Create tables and load data\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableA.loadGeoData(\"./cities.geojson\");\nawait tableB.loadGeoData(\"./stores.geojson\");\n// Find stores within 50 kilometers of cities\nawait tableB.joinGeo(tableA, \"within\", {\n  distance: 50,\n  distanceMethod: \"haversine\",\n  unit: \"km\"\n});\n// Display the results\nawait tableB.logTable();\n// Cleanup\nawait sdb.done();\n```\n"}
{"prompt":"How do I identify outliers in a single numeric column using the IQR method?","completion":"To flag outliers in a single column, simply call `outliersIQR` with the target column and a new column name to store the boolean results.\n\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./data.csv\");\n// Identify outliers in the 'age' column and store the result in 'ageOutlier'\nawait table.outliersIQR(\"age\", \"ageOutlier\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I have several columns to rename. How do I update their names without affecting other columns?","completion":"You can specify only the columns you want to rename, leaving others unchanged:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data with multiple columns\nawait table.loadData(\"./data.csv\");\n// Rename specific columns without affecting others\nawait table.renameColumns({ \n  \"oldColumn1\": \"newName1\",\n  \"anotherOld\": \"anotherNew\"\n});\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify a custom model for embeddings?","completion":"To specify a custom model for embeddings, use the model option:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load sample data into the table\\nawait table.loadArray([\\n  { food: \"pizza\" },\\n  { food: \"sushi\" },\\n  { food: \"burger\" },\\n  { food: \"pasta\" },\\n  { food: \"salad\" },\\n  { food: \"tacos\" },\\n]);\\n// Generate embeddings using a custom model name\\nawait table.aiEmbeddings(\"food\", \"embeddings\", { model: \"my-custom-model\" });\\n// Log the table to see the new embeddings column\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I load data from multiple remote Parquet files and unify the columns?","completion":"Here's how you can load data from multiple remote Parquet files and unify the columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the files\nawait table.loadData([\n  \"https://example.com/data1.parquet\",\n  \"https://example.com/data2.parquet\",\n  \"https://example.com/data3.parquet\",\n], { unifyColumns: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows with missing values from my table?","completion":"Here's how you can remove rows with missing values from all columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove rows with missing values\nawait table.removeMissing();\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the number of bins in the histogram?","completion":"To set the number of bins, pass the `bins` option with your desired value.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Generate a histogram with 20 bins for the 'age' column\nawait table.logHistogram(\"age\", { bins: 20 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I fill NULL values across multiple columns at once?","completion":"Yes, you can specify an array of column names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a new instance\nconst sdb = new SimpleDB();\n// Create table and load data\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Fill NULLs in both 'sales' and 'revenue'\nawait table.fill([\"sales\", \"revenue\"]);\n// Display results\nawait table.logTable();\n// Clean up\nawait sdb.done();\n```"}
{"prompt":"Can I retrieve a table inside a function and perform operations on it?","completion":"Yes, you can wrap the getTable call inside an async function and then use the table instance.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n\nasync function processTable() {\n  // Retrieve the \"orders\" table\n  const orders = await sdb.getTable(\"orders\");\n  // Perform operations\n  await orders.summarize({\n    values: \"amount\",\n    categories: \"status\",\n    summaries: [\"sum\"],\n    decimals: 2,\n  });\n  // Log results\n  await orders.logTable();\n}\n\n// Call the function\nawait processTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the mean of a numeric column and round the result to two decimal places?","completion":"To calculate the mean of a numeric column and round the result to two decimal places, use the `getMean` method with the `decimals` option.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Calculate the mean of the 'salary' column, rounded to 2 decimal places\nconst meanSalary = await table.getMean(\"salary\", { decimals: 2 });\n// Log the result\nconsole.log(meanSalary);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify the original projection of my data?","completion":"Yes, you can use the `from` option to specify the original projection. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data and specify the original projection\nawait table.loadGeoData(\"./my-data.geojson\", { from: \"EPSG:4326\" });\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify which geometry column to use with writeMap?","completion":"If your GeoJSON has multiple geometry columns, specify which one to use with options.column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./multi_geometry.geojson\");\n\nconst mapFunction = (geoJsonData) =>\n  plot({\n    projection: { type: \"conic-conformal\", rotate: [100, -60], domain: geoJsonData },\n    marks: [geo(geoJsonData, { stroke: \"black\", fill: \"lightgreen\" })],\n  });\n\nconst outputPath = \"./output/selected_geometry_map.png\";\n\nawait table.writeMap(mapFunction, outputPath, {\n  column: \"geometry\",\n});\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the last 10 rows in their original order?","completion":"Here's how you can retrieve the last 10 rows in their original order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the last 10 rows in their original order\nconst bottom10OriginalOrder = await table.getBottom(10, {\n  originalOrder: true\n});\n// We log the results\nconsole.log(bottom10OriginalOrder);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the cumulative sum within a specific category?","completion":"You can compute the cumulative sum within a category by passing the category column name to the options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./orders.csv');\n// Compute cumulative sum of 'orders' within each 'customer_id'\nawait table.accumulate('orders', 'cumulativeOrders', {\n  categories: 'customer_id',\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I filter the description to only include columns with a certain data type?","completion":"After retrieving the description, use Array.filter to keep only columns of the desired type:\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\"path/to/your/data.csv\");\\nconst description = await table.getDescription();\\n// Keep only numeric columns\\nconst numericCols = description.filter(col => col.dataType === 'number');\\nconsole.table(numericCols);\\nawait sdb.done();\\n```"}
{"prompt":"How can I determine the data types of the columns in my table?","completion":"Here's how you can use the `getTypes` method to retrieve the data types of each column in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the data types of all columns\nconst dataTypes = await table.getTypes();\nconsole.log(dataTypes);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a custom suffix for the new proportion columns?","completion":"Yes, you can use the `suffix` option to customize the suffix. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data\nawait table.loadData(\"./sample_data.csv\");\n// Compute horizontal proportions with custom suffix 'Ratio'\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"], {\n  suffix: \"Ratio\"\n});\n// Log the updated table with new ratio columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a dark-themed chart?","completion":"To create a dark-themed chart, you can use the `dark` option. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n// Define the chart function using Observable Plot\nconst chartFunction = (plotData: unknown[]) => {\n  return plot({\n    marks: [\n      dot(plotData, { x: \"year\", y: \"value\" })\n    ]\n  });\n};\n// Enable dark mode for the chart\nconst darkOptions = {\n  dark: true,\n};\n// Save the dark-themed chart as a PNG file\nconst outputPath = \"output/dark-chart.png\";\nawait table.writeChart(chartFunction, outputPath, darkOptions);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I load compressed CSV files?","completion":"Yes, specify the compression type using `compression` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load compressed CSV data\nawait table.loadData(\"./data.csv.gz\", { compression: \"gzip\" });\n// We log the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I cache embeddings locally to avoid recomputation?","completion":"Yes, you can enable local caching:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data into the table\nawait table.loadArray([\n  { text: \"Hello, world!\" },\n  { text: \"Goodbye, world!\" }\n]);\n// Generate embeddings with caching enabled\nawait table.aiEmbeddings(\"text\", \"embeddings\", {\n  cache: true // Cache results locally\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I skip just one row if needed?","completion":"Yes, you can skip exactly one row using the `skip` method. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load your data\nawait table.loadData(\"./data.csv\");\n// Skip just one row\nawait table.skip(1);\n// Log the remaining rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens if I don't have enough preceding or following rows for the rolling window?","completion":"For rows without enough preceding or following rows to form a complete window, the `rolling` method will return `NULL` for that row.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./short_data.csv\");\n// We compute the rolling average with a window of 5\nawait table.rolling(\"value\", \"rollingAvg\", \"mean\", 2, 2);\n// We log the table to see the results, including NULL values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use the wider method to pivot a table?","completion":"Use the wider method after loading your data to transform a long format into a wide format.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./employee_counts.csv\");\n// Pivot the 'Year' column into new columns with 'Employees' as values\nawait table.wider(\"Year\", \"Employees\");\n// Log the transformed table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the median of a column named 'sales'?","completion":"Here's how you can get the median (50th percentile) of a column named 'sales':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data here. For example:\n// await table.loadData(\"./sales_data.csv\");\n\n// Get the median of the 'sales' column\nconst median = await table.getQuantile(\"sales\", 0.5);\nconsole.log(median);\n\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does `getNbValues` return if my table has 5 columns and 20 rows?","completion":"It returns the product of columns and rows, so in this case it would return 100. Here’s how you can verify it:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\"); // assume 5 columns, 20 rows\n// We get the total number of values\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues); // should log 100\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I control the width of the histogram bars?","completion":"Yes, you can control the width of the histogram bars using the `width` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load the data\nawait table.loadData(\"./my-data.csv\");\n// We log the histogram with a bar width of 5 characters\nawait table.logHistogram(\"value\", { width: 5 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `cleanColumnNames` method do?","completion":"The `cleanColumnNames` method removes non-alphanumeric characters from column names and converts them to camel case. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We clean the column names\nawait table.cleanColumnNames();\n// We log the table to see the cleaned column names\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove a single table named 'orders' from the database?","completion":"Here's how you can remove a single table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove a single table by name\nawait sdb.removeTables(\"orders\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create bins for a column using a specific interval?","completion":"Here's how you can create bins with an interval of 10 for a column named 'age':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We create bins with an interval of 10 for the 'age' column\nawait table.bins(\"age\", 10, \"age_bins\");\n// We log the table to see the new bins\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I simplify geometries in the default column with a tolerance of 0.1?","completion":"Here's how to simplify geometries using the default column and tolerance 0.1:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Simplify geometries in the default column with tolerance 0.1\nawait table.simplify(0.1);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load data from a CSV file named 'mydata.csv'?","completion":"Here's how you can load a CSV file into your table: \n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./mydata.csv\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to insert an empty array of rows?","completion":"If you pass an empty array, no rows will be inserted. Here's how it works:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Try to insert an empty array of rows\nconst newRows: Record<string, unknown>[] = [];\nawait table.insertRows(newRows);\n// No rows will be added to the table\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the Haversine distance in meters between two points?","completion":"To calculate the Haversine distance in meters, the input geometries must be in EPSG:4326:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.distance('point1', 'point2', 'distance_m', { method: 'haversine' });\nawait sdb.done();\n```"}
{"prompt":"What happens if the column I specify in `getMin` does not exist?","completion":"The documentation does not specify the behavior if the column does not exist. However, it is likely that the method will return `null` or throw an error. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./my_data.csv\");\n// Get the minimum value from the 'nonexistent_column' column\nconst minVal = await table.getMin(\"nonexistent_column\");\nconsole.log(minVal); // e.g., null\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert string dates to Date objects using updateWithJS?","completion":"You can convert string dates to Date objects by checking the type and creating a new Date.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData('./data.csv');\n// Update with JS converting string dates\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    dateColumn: typeof d.dateColumn === 'string' ? new Date(d.dateColumn) : d.dateColumn,\n  }));\n  return modifiedRows;\n});\n// Log table\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the index I provide to `splitExtract` is out of bounds?","completion":"If the index you provide to `splitExtract` is out of bounds, an empty string will be returned for that row in the new column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Assuming you have loaded data with a 'single_value' column\n// await table.loadData(\"./my-data.csv\");\n// Split 'single_value' by comma and extract the second part (index 1) into 'second_value'\nawait table.splitExtract(\"single_value\", \",\", 1, \"second_value\");\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I initialize SimpleDB with a specific database file?","completion":"Here's how you can create a SimpleDB instance with a specified database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with a specific database file\nconst sdb = new SimpleDB({\n  file: './mydatabase.db'\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I capitalize the first letter of strings in a single column?","completion":"Here's how you can capitalize the first letter of strings in a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"capitalizeExample\");\nawait table.loadData(\"./data.csv\");\nawait table.capitalize(\"column1\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a projection when adding a geometry column?","completion":"If you omit the projection, an error will occur. Always specify it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// Load existing geometry data\nawait table.loadGeoData(\"./geodata.geojson\");\n// This will throw an error because projection is missing\ntry {\n  await table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"country\")`);\n} catch (error) {\n  console.error(\"Error: Projection must be specified for geometry columns.\", error);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can you enable debug mode for a table?","completion":"You can enable debug mode when creating the table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table with debug mode enabled\nconst table = sdb.newTable(\n  \"debugTable\",\n  {},\n  sdb,\n  { debug: true }\n);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the list of column names from my data table?","completion":"Here's how you can get the column names from your table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get all column names\nconst columns = await table.getColumns();\n// Log the column names\nconsole.log(columns);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations between all numeric columns in my table?","completion":"Here’s how to compute correlations for all numeric columns and overwrite the current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data\nawait table.loadData(\"./data.csv\");\n// Compute correlations for all numeric columns\nawait table.correlations();\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I keep only rows where a column has a specific value?","completion":"You can keep rows where a column has a specific value by passing that value to keep. Here's how:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Keep rows where status is 'active'\nawait table.keep({ status: \"active\" });\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I assign ranks within multiple categories (department and city) for a column called 'sales'?","completion":"Here's how to assign ranks within multiple categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.ranks(\"sales\", \"salesRank\", {\n  categories: [\"department\", \"city\"]\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I load data from multiple files into a single table?","completion":"You can pass an array of file paths to the loadData method. Here's how you can do it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from multiple files\nawait table.loadData([\n  \"./data1.csv\",\n  \"./data2.csv\"\n]);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I store the result of a spatial join in a new table?","completion":"Set `outputTable` to `true` or provide a name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load your geospatial data\nawait tableA.loadGeoData(\"./dataA.geojson\");\nawait tableB.loadGeoData(\"./dataB.geojson\");\n// Perform a join and store results in a new table\nconst joinedTable = await tableA.joinGeo(tableB, \"intersect\", { outputTable: true });\n// Log the new table's contents\nawait joinedTable.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I create multiple tables and differentiate them?","completion":"Here’s how you can create multiple tables and differentiate them:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two distinct tables\nconst table1 = sdb.newTable('table1');\nconst table2 = sdb.newTable('table2');\n// Load data into each table\nawait table1.loadData('./data1.csv');\nawait table2.loadData('./data2.csv');\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove a single column from a table?","completion":"To remove a single column named 'tempColumn', call removeColumns with the column name.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data into the table\\nawait table.loadData(\"./data.csv\");\\n// Remove the column 'tempColumn'\\nawait table.removeColumns(\"tempColumn\");\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I get a list of all tables in my database?","completion":"You can use the `getTableNames` method to retrieve an array of all table names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNames = await sdb.getTableNames();\nconsole.log(tableNames);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log the default first 10 rows of my table?","completion":"Here’s how you can log the first 10 rows (default behavior):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the first 10 rows (default behavior)\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get repeatable random sampling using a seed?","completion":"Here's how to get repeatable sampling with a seed value:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We select 10% of rows with a fixed seed\nawait table.sample(\"10%\", { seed: 42 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I summarize a single column called `sales`?","completion":"Specify the column name in the `values` option.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./sales.csv\");\nawait table.summarize({ values: \"sales\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"I know my data is currently in EPSG:4326. How can I reproject it to EPSG:3347 while specifying the original projection?","completion":"You can specify the original projection using the `from` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We reproject the geometries from EPSG:4326 to EPSG:3347\nawait table.reproject(\"EPSG:3347\", { from: \"EPSG:4326\" });\n// We log the first rows to see the reprojected data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the last row that matches a specific condition?","completion":"Use the `conditions` option to filter rows before retrieving the last one:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadData(\"./data.csv\");\n// Get the last row where the category is \"Book\"\nconst lastBook = await table.getLastRow({\n  conditions: \"category === 'Book'\",\n});\nconsole.log(lastBook);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I round a single column to the nearest integer?","completion":"Here's how you can round values in a single column to the nearest integer:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We round 'sales' column to nearest integer\nawait table.round(\"sales\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I adjust the width and height of the line chart?","completion":"Pass `width` and `height` options to control the chart size:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 }\n];\nawait table.loadArray(data);\nawait table.logLineChart(\"date\", \"value\", {\n  width: 80,\n  height: 20\n});\nawait sdb.done();\n```"}
{"prompt":"Can I chain linesToPolygons with other methods like summarize?","completion":"Yes, you can chain linesToPolygons with other methods; just call them sequentially on the same table instance:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Transform closed linestrings into polygons\nawait table.linesToPolygons();\n// Now perform a summary on a numeric column (e.g., 'length')\nawait table.summarize({\n  values: \"length\",\n  summaries: [\"sum\", \"avg\"],\n  decimals: 2,\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I configure SimpleDB to overwrite an existing database file?","completion":"Set the `overwrite` option to `true` to overwrite existing files. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with overwrite enabled\nconst sdb = new SimpleDB({\n  overwrite: true\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I aggregate geometries using the union method?","completion":"Here's how you can use the `aggregateGeo` method with the 'union' method to combine all geometries into a single multi-geometry:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We aggregate geometries using the union method\nawait table.aggregateGeo(\"union\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What type of value does getNbRows return?","completion":"The getNbRows method returns a Promise that resolves to a number representing the total count of rows:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst nbRows = await table.getNbRows();\nconsole.log(typeof nbRows); // \"number\"\nawait sdb.done();\n```"}
{"prompt":"How can I log more than the default 10 rows from my table?","completion":"You can specify the number of rows you want to log. Here's an example logging 50 rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Log 50 rows\nawait table.logTable(50);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reproject my data to WGS84 using the toWGS84 option?","completion":"Set the toWGS84 option to true to reproject the data to WGS84.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./some-data.shp.zip\", { toWGS84: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I add new rows to an existing table?","completion":"Here's how you can insert new rows into your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Let's assume we have existing data loaded into the table\nawait table.loadData(\"./data.csv\");\n// Define the new rows to insert\nconst newRows = [\n  { name: \"Alice\", age: 30 },\n  { name: \"Bob\", age: 25 }\n];\n// Insert the new rows into the table\nawait table.insertRows(newRows);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I trim multiple columns at once?","completion":"Yes, you can pass an array of column names to trim multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Trim whitespace from 'description' and 'notes' columns\nawait table.trim([\"description\", \"notes\"]);\n// Log the modified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute horizontal proportions for specific columns in my table?","completion":"Here's how you can compute horizontal proportions for the 'Men', 'Women', and 'NonBinary' columns: \n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We compute horizontal proportions for 'Men', 'Women', and 'NonBinary' columns\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"]);\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I verify that the point geometries were created correctly?","completion":"After calling `points`, use `logTable` to inspect the new column. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\nawait table.points('lat', 'lon', 'geom');\n// Log the table to see the point geometries\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I combine the 'firstName' and 'lastName' columns into a new 'fullName' column without any separator?","completion":"Here's how to concatenate two columns with the default empty separator:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file containing firstName and lastName columns\nawait table.loadData(\"./people.csv\");\n// Concatenate firstName and lastName into fullName (no separator)\nawait table.concatenate([\"firstName\", \"lastName\"], \"fullName\");\n// Log the results to verify\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I insert all rows from another table named 'otherTable' into my current table?","completion":"Here's how you can insert rows from another table into your current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Assuming tableB has data loaded\n// await tableB.loadData(\"./some-data.csv\");\n// Insert all rows from 'tableB' into 'tableA'.\nawait tableA.insertTables(\"tableB\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I export the database without creating metadata files?","completion":"Yes, you can export the database without metadata files. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We write the database to a SQLite file without metadata\nawait sdb.writeDB(\"./my_exported_database.sqlite\", { noMetaData: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I store the correlation results in a table with a specific name, such as 'corrResults'?","completion":"Store correlation results in a table named 'corrResults'.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\nconst corrTable = await table.correlations({\n  outputTable: 'corrResults',\n});\nawait corrTable.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I round correlation results to a specific number of decimal places?","completion":"To round correlation results to a specific number of decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData('./data.csv');\nawait table.correlations({ decimals: 2 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What happens if I change the contents of the function passed to `cache`? Will it re‑run the computation?","completion":"Yes, the cache is invalidated whenever the function body changes. Here’s an example that demonstrates this behavior:\n\n```ts\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// First run: cache is empty, so the function executes\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\n// Second run: same function body, cache hit – no re‑execution\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\n// Third run: function body changed (e.g., added a console.log), cache invalidated\nawait table.cache(async () => {\n  console.log(\"Recomputing because function changed\");\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\nawait sdb.done();\n```"}
{"prompt":"I want to convert a column named 'amount' to a float, but some values are strings that cannot be converted. How can I handle these errors gracefully?","completion":"You can use the `try` option to replace unconvertible values with `NULL` instead of throwing an error. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We convert the 'amount' column to float, handling errors with 'try: true'\nawait table.convert({ amount: \"float\" }, { try: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I skip rows before logging the table?","completion":"To skip rows before logging the table, simply call skip before logTable:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data\\nawait table.loadData('./data.csv');\\n// Skip first 5 rows\\nawait table.skip(5);\\n// Log the table after skipping\\nawait table.logTable();\\n// Close everything\\nawait sdb.done();\\n```"}
{"prompt":"What happens if I try to get a row with a condition that matches multiple rows?","completion":"By default, an error is thrown if the condition matches more than one row. Here's how to prevent that:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Get a row without throwing an error if multiple matches\nconst flexibleRow = await table.getRow(\"status = 'active'\", { noCheck: true });\nconsole.log(flexibleRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I unnest geometries in the default geometry column?","completion":"Here's how to unnest geometries using the default column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Unnest geometries in the default column\nawait table.unnestGeo();\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I aggregate geometries by a category column, e.g., \"country\", using union?","completion":"Pass the category column name in the options object.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Aggregate geometries by the \"country\" column using union\nawait table.aggregateGeo(\"union\", { categories: \"country\" });\n// Log the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the number of columns in my table?","completion":"You can use the `getNbColumns` method to get the total count of columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the number of columns in the table\nconst nbColumns = await table.getNbColumns();\nconsole.log(nbColumns); // e.g., 3\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the schema of my table?","completion":"You can use the `getSchema` method to get the schema of your table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We get the schema of the table\nconst schema = await table.getSchema();\nconsole.log(schema);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I compute correlations separately for each category in my data?","completion":"Yes, you can compute correlations within categories like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations within each category in 'categoryColumn'\nawait table.correlations({ categories: \"categoryColumn\" });\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace NULL values in a single column with a number?","completion":"Here's how you can replace NULL values in a single column with a number:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Replace NULL values in 'myColumn' with 0\nawait table.replaceNulls(\"myColumn\", 0);\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I control coordinate precision when writing GeoJSON?","completion":"Here's how you can specify coordinate precision (6 decimal places) when writing GeoJSON using the `writeGeoData` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Load geospatial data from a file\nawait table.loadGeoData(\"./input.geojson\");\n// Write GeoJSON with 6 decimal precision\nawait table.writeGeoData(\"./output.geojson\", { precision: 6 });\nawait sdb.done();\n```"}
{"prompt":"How can I add a column to my table indicating whether geometries are closed?","completion":"Here's how you can add a column indicating whether geometries are closed:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a new column named 'isClosed' to indicate closed geometries\nawait table.isClosedGeo(\"isClosed\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write my geospatial data to a GeoParquet file with compression?","completion":"Here's how you can write the table's geospatial data to a GeoParquet file with ZSTD compression:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the data to a compressed GeoParquet file\nawait table.writeGeoData(\"./output.geoparquet\", { compression: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I log the data types of all columns in a table after loading data using SimpleDataAnalysis?","completion":"Here's how you can log the data types of all columns after loading data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We log the column types\nawait table.logTypes();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I apply custom CSS styling to the chart using the style option?","completion":"You can customize the chart's appearance by providing a CSS string via the style option.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { plot } from \"@observablehq/plot\";\n\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load sample data\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n\n// Define a chart function\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      plot.dot(plotData, { x: \"year\", y: \"value\" }),\n    ],\n  });\n\n// Save the chart with custom CSS style\nconst outputPath = \"output/styled_chart.png\";\nawait table.writeChart(\n  chartFunction,\n  outputPath,\n  { style: \"div#chart { background-color: #f0f0f0; padding: 10px; }\" }\n);\n\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"If I want to find the 25th percentile of a column named 'age', how would I do that?","completion":"Here's how you can calculate the 25th percentile of the 'age' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./customer_data.csv\");\n// Calculate the 25th percentile of the 'age' column\nconst firstQuartile = await table.getQuantile(\"age\", 0.25);\nconsole.log(firstQuartile);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove duplicate rows from a table based on all columns?","completion":"You can call removeDuplicates without any options to dedupe across all columns.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"users\");\n// We load data from a CSV file\nawait table.loadData(\"./users.csv\");\n// Remove duplicate rows based on all columns\nawait table.removeDuplicates();\n// We log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle the promise returned by getData?","completion":"You can use async/await or then/catch to handle the promise.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\");\n// Using async/await\nconst data = await table.getData();\nconsole.log(data);\n// Using then/catch\ntable.getData()\n  .then(rows => console.log(rows))\n  .catch(err => console.error(err));\nawait sdb.done();\n```"}
{"prompt":"How do I specify the geometry column if my table has multiple geometry columns?","completion":"You can use the `column` option in the `writeMap` method to specify the geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { geo, plot } from \"@observablehq/plot\";\n\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n\n// Load your GeoJSON data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n\n// Define a map function using Observable Plot\nconst mapFunction = (geoJsonData: { features: unknown[] }) =>\n  plot({\n    projection: {\n      type: \"conic-conformal\",\n      rotate: [100, -60],\n      domain: geoJsonData,\n    },\n    marks: [\n      geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" }),\n    ],\n  });\n\n// Define the output path for the map image\nconst outputPath = \"./output/map.png\";\n\n// Write the map to the specified path, specifying the geometry column\nawait table.writeMap(mapFunction, outputPath, { column: \"my_geometry_column\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where the 'quantity' column is less than 5?","completion":"Here's how you can remove rows based on a numerical condition in the 'quantity' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove rows where 'quantity' is less than 5\nawait table.removeRows(\"quantity < 5\");\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I convert a single column to uppercase using the `upper` method?","completion":"Use the `upper` method with the column name as a string. Here’s how to load a CSV, convert a column, and log the result:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Convert strings in 'name' column to uppercase\nawait table.upper(\"name\");\n// Log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I store the aggregated results in a new table?","completion":"Use the `outputTable` option to create a new table with the results:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We aggregate geometries and store results in a new table\nconst aggregatedTable = await table.aggregateGeo(\"intersection\", { outputTable: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the files in the directory have different columns? Can I unify them?","completion":"You can use the `unifyColumns` option to unify columns across multiple files. Missing columns will be filled with `NULL` values. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the directory, unifying columns\nawait table.loadDataFromDirectory(\"./my_data/\", { unifyColumns: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle columns that have a null data type in the schema?","completion":"Check for null types and handle them accordingly:\n```javascript\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data so the table has columns\nawait table.loadData(\"./data.csv\");\n// Get the schema of the table\nconst schema = await table.getSchema();\n// Iterate over columns and warn about unknown types\nschema.forEach(col => {\n  if (col.type === null) {\n    console.warn(`Column ${col.name} has unknown type`);\n  }\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the median of a numeric column using getQuantile?","completion":"Here’s how to get the median (50th percentile) of a column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Get the median of the 'age' column\nconst medianAge = await table.getQuantile('age', 0.5);\nconsole.log('Median age:', medianAge);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load geospatial data before computing the area?","completion":"Use `loadGeoData` to load a GeoJSON file, then call `area`:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Load the GeoJSON file containing geometries\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute area in default unit\nawait table.area(\"area_m2\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I filter rows where last purchase date is on or after January 1, 2023?","completion":"Here's how to filter rows with last purchase date on or after 2023-01-01 using SQL-style syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We filter rows with lastPurchaseDate >= 2023-01-01\nawait table.filter(`lastPurchaseDate >= '2023-01-01'`);\n// We log the filtered table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load a local .geojson file into a table?","completion":"Here's how to load a local .geojson file (coordinates will automatically flip to [latitude, longitude]):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Load the .geojson file (automatic coordinate flipping)\nawait table.loadGeoData(\"./data.geojson\");\n// Verify the loaded data\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I combine multiple conditions using AND and OR in a filter?","completion":"You can combine multiple conditions with logical operators to narrow down the rows.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"sales\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We filter rows where price > 50 AND fruit = 'banana'\nawait table.filter(`price > 50 AND fruit = 'banana'`);\n// We log the filtered table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I compute the perimeter in kilometers instead of meters?","completion":"Yes, you can specify kilometers as the unit. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the perimeter of polygon geometries in kilometers and store in 'perimeter_km'\nawait table.perimeter(\"perimeter_km\", { unit: \"km\" });\n// Log the results to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Which AI providers does aiQuery support?","completion":"aiQuery supports Google Gemini, Vertex AI, and Ollama. Here's an example using Vertex AI:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We use aiQuery with Vertex AI\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { \n    vertex: true,\n    project: \"my-project-id\",\n    location: \"us-central1\"\n  },\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"To filter the extensions list to only show those that are loaded, how can I do that?","completion":"To filter the extensions list to only show those that are loaded, you can use Array.filter on the result.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Retrieve extensions\nconst extensions = await sdb.getExtensions();\n// Filter loaded extensions\nconst loadedExtensions = extensions.filter(ext => ext.loaded);\nconsole.log('Loaded extensions:');\nloadedExtensions.forEach(ext => {\n  console.log('Extension: ' + ext.extension_name);\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I offset a column by two rows (so the new column has values from two rows earlier)?","completion":"Here's how you can offset a column by a specific number of rows (2 in this case):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Clone 'sales' as 'sales_2_days_ago' with offset of 2\nawait table.cloneColumnWithOffset(\"sales\", \"sales_2_days_ago\", { offset: 2 });\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load a remote Parquet file?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a remote Parquet file\nawait table.loadData(\"https://example.com/data.parquet\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What are the requirements for the two geometry columns when using the `union` method?","completion":"The two columns must have the same projection. Here's an example of using the `union` method (which requires that the columns have the same projection):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// We compute the union of geometries in 'geomA' and 'geomB', storing results in 'unionGeom'\n// Note: 'geomA' and 'geomB' must have the same projection\nawait table.union(\"geomA\", \"geomB\", \"unionGeom\");\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set a Time-To-Live (TTL) for the cached data?","completion":"You can set a TTL by passing an options object to the `cache` method. The `ttl` property specifies the duration (in seconds) after which the cached data will be considered expired and the `run` function will be executed again."}
{"prompt":"Can I use JavaScript syntax for filtering conditions in `getTop`?","completion":"Yes, you can use JavaScript syntax for filtering conditions. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the top 2 rows where the category is 'Books' or the price is greater than 50\nconst top2Filtered = await table.getTop(2, { conditions: `category === 'Books' || price > 50` });\n// We log the results\nconsole.log(top2Filtered);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I log all rows in the table?","completion":"To log every row, use the string \"all\":\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Log all rows\nawait table.logTable(\"all\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is there a way to undo the removal of a table?","completion":"Once a table is removed using `removeTable`, it cannot be undone. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Important: Backup your data before removal\nconsole.log(\"Backing up data...\");\n// Remove the table\nawait table.removeTable();\n// Data is permanently removed unless backed up\nconsole.log(\"Table has been removed. Data cannot be recovered.\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different name for the new geometry column?","completion":"Yes, you can provide any name for the new geometry column.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./sample.csv\");\n// Create point geometries in a column called 'myGeom'\nawait table.points(\"lat\", \"lon\", \"myGeom\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I specify a starting value for the bins? If so, how would I do that?","completion":"You can specify a starting value using the `options` parameter. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We assign bins for the 'score' column with an interval of 20, starting at 0\nawait table.bins(\"score\", 20, \"score_group\", { startValue: 0 });\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table to a new table with a default name?","completion":"Here's how you can clone a table to a new table with a default generated name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\n// Load some data into tableA\nawait tableA.loadData(\"./my-data.csv\");\n// Clone tableA to a new table with a default generated name\nconst tableB = await tableA.cloneTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log the column names of my table?","completion":"Here's how you can log just the column names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the column names\nawait table.logColumns();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I clone a column to a column that already exists?","completion":"The documentation doesn't specify what happens if the `newColumn` already exists. It's best to avoid cloning to an existing column to prevent unexpected behavior or data overwrites. The documentation does not provide error handling examples.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Clone the 'existingColumn' column as 'existingColumn'\n// This might result in an error or unexpected behavior\nawait table.cloneColumn(\"existingColumn\", \"existingColumn\");\n// We log the table to see the cloned column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I display a progress bar for long-running operations?","completion":"Set the `progressBar` option to `true` to show progress bars. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with progress bar\nconst sdb = new SimpleDB({\n  progressBar: true\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I display the histogram in a compact format?","completion":"Use the `compact` option to show a more compact view. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Generate a compact histogram for 'price'\nawait table.logHistogram(\"price\", { compact: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I combine multiple conditions using AND and OR?","completion":"You can combine conditions using both SQL and JavaScript syntax. Here's an example with OR:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Keep rows where 'category' is 'Electronics' OR 'Appliances'\nawait table.filter(`category === 'Electronics' || category === 'Appliances'`);\n// We log the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I log the last few rows of my table?","completion":"Here's how you can log the bottom rows of your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the last 5 rows\nawait table.logBottom(5);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I transform closed linestrings in the default geometry column to polygons?","completion":"Here's how you can transform closed linestrings in the default geometry column to polygons:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Transform closed linestrings in the default geometry column to polygons\nawait table.linesToPolygons();\n// Log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to write a table's data to a JSON file with dates formatted as ISO 8601 strings?","completion":"Here's how you can write the table's data to a JSON file with dates formatted as ISO 8601 strings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We write the data to a JSON file with formatted dates\nawait table.writeData(\"./output_dates.json\", { formatDates: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a new SimpleTable instance?","completion":"Here's how to create a new SimpleTable instance with a given name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I handle errors when getting the sum of a column?","completion":"You can use try-catch to handle any potential errors:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\ntry {\n  const sum = await table.getSum(\"quantity\");\n  console.log(\"Sum of quantity:\", sum);\n} catch (error) {\n  console.error(\"Error calculating sum:\", error);\n}\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I specify the number of decimal places when calculating skewness?","completion":"Yes, you can specify the number of decimals. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Calculate skewness with 3 decimal places\nconst skewness = await table.getSkew(\"price\", { decimals: 3 });\nconsole.log(\"Skewness:\", skewness);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I check if my table has a specific column?","completion":"You can use the `hasColumn` method to verify if a column exists in your table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Check if the table has a column named \"population\"\nconst hasPopulationColumn = await table.hasColumn(\"population\");\nconsole.log(hasPopulationColumn); // Output: true or false\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens if I try to retrieve a table that doesn't exist?","completion":"The documentation doesn't specify the behavior when a table doesn't exist. However, since the method returns a Promise, it's likely that the promise will reject if the table is not found. You should handle this potential rejection with a try-catch block or a `.catch()` handler.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Attempt to retrieve a non-existent table\ntry {\n  const nonExistentTable = await sdb.getTable(\"nonExistentTable\");\n  // This code will not be reached if the table doesn't exist\n} catch (error) {\n  console.error(\"Error retrieving table:\", error);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where a column has multiple possible values?","completion":"You can pass an array of values to the `remove` method for that column. Here's an example removing products with certain statuses:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./products.csv\");\n// Remove rows where 'status' is either 'expired' or 'archived'\nawait table.remove({ status: [\"expired\", \"archived\"] });\n// Log the remaining data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I calculate the proportion of each value in a column relative to the total sum of that column?","completion":"Here's how you can calculate the vertical proportions of a column: \n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data here, for example:\n// await table.loadData(\"./my-data.csv\");\n// Calculate the proportions of 'column1' and store them in 'perc'\nawait table.proportionsVertical(\"column1\", \"perc\");\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the schema output look like and how can I interpret null data types?","completion":"The schema is an array of objects with column names and types; null indicates an unknown type. Here's how to view it:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\\\"sales\\\");\\n// We load data from the file\\nawait table.loadData(\\\"./sales.csv\\\");\\n// Retrieve and log the schema\\nconst schema = await table.getSchema();\\nconsole.table(schema);\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"Can I use getUniques to retrieve unique numeric values from a column?","completion":"Yes, you can retrieve unique numbers from a numeric column like \"price\":\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./sales.csv\");\n// Get unique values from the \"price\" column\nconst uniquePrices = await table.getUniques(\"price\");\nconsole.log(uniquePrices); // e.g., [9.99, 19.99, 29.99]\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific extension, such as \"spatial\", is loaded?","completion":"Filter the array returned by getExtensions to find the extension and inspect its loaded property.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst extensions = await sdb.getExtensions();\nconst spatial = extensions.find(ext => ext.extension_name === \"spatial\");\nif (spatial) {\n  console.log(`Spatial loaded: ${spatial.loaded}`);\n} else {\n  console.log(\"Spatial extension not found\");\n}\nawait sdb.done();\n```"}
{"prompt":"How can I shift a column's values by 3 rows using cloneColumnWithOffset?","completion":"To shift values by 3 rows, pass offset: 3 in the options object.\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"sales\");\n// Load data\nawait table.loadData(\"./sales.csv\");\n// Clone 'revenue' as 'revenue_3_rows_ago' with a custom offset of 3\nawait table.cloneColumnWithOffset(\"revenue\", \"revenue_3_rows_ago\", { offset: 3 });\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I retrieve a list of all tables in my SimpleDB instance?","completion":"Here's how you can retrieve a list of all tables using the `getTables` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all SimpleTable instances\nconst tables = await sdb.getTables();\n// Log the tables to the console\nconsole.log(tables);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `fillHoles` method do?","completion":"It fills holes in polygon geometries. Example:\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// We load geospatial data\\nawait table.loadGeoData(\\\"./my-geodata.geojson\\\");\\n// We fill holes in the default geometry column\\nawait table.fillHoles();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I disable reasoning in Ollama when using `aiQuery`?","completion":"Here's how you can disable reasoning in Ollama when using the `aiQuery` method. Setting `thinkingBudget` to 0 will attempt to disable reasoning, although some models may still reason regardless."}
{"prompt":"What columns do I need to provide to the `removeIntersection` method?","completion":"The `removeIntersection` method requires two geometry columns and a name for the new column. `column1` is the reference geometry from which the intersection will be removed, `column2` is the geometry used to compute the intersection, and `newColumn` is where the result will be stored."}
{"prompt":"Can I insert data from multiple tables into one table?","completion":"Yes, you can insert rows from multiple tables at once:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create three tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nconst tableC = sdb.newTable(\"tableC\");\n// Load data into tableB and tableC\nawait tableB.loadData(\"./data1.csv\");\nawait tableC.loadData(\"./data2.csv\");\n// Insert all rows from tableB and tableC into tableA\nawait tableA.insertTables([tableB, tableC]);\n// Log the contents of tableA to verify\nawait tableA.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I export my database to a SQLite file without metadata files?","completion":"Pass `noMetaData: true` in the options to exclude metadata.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Write the database to a SQLite file without metadata\nawait sdb.writeDB(\"./my_exported_database.sqlite\", { noMetaData: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace the string 'kilograms' with 'kg' in a column named 'unit'?","completion":"Here's how you can replace a single string in a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We replace 'kilograms' with 'kg' in the 'unit' column\nawait table.replace(\"unit\", { \"kilograms\": \"kg\" });\n// We log the table to see changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I assign bins starting from a specific value, such as 0, with a given interval?","completion":"Here's how you can assign bins starting from a specific value (0) with an interval of 10:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file (assuming it has a column named \"column1\")\nawait table.loadData(\"./data.csv\");\n// We assign bins to \"column1\" with interval 10, starting at 0, storing in new column \"bins\"\nawait table.bins(\"column1\", 10, \"bins\", { startValue: 0 });\n// We log the table to see the new bins column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the variance of a numeric column without rounding the result?","completion":"You can get the variance without rounding by omitting the `decimals` option. Here's an example:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file (assuming it has a numeric column named 'data')\nawait table.loadData(\"./data.csv\");\n// We get the variance of the 'data' column without rounding\nconst variance = await table.getVar(\"data\");\nconsole.log(variance);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create point geometries from latitude and longitude columns in my table?","completion":"Here's how you can create point geometries using the `points` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file that has 'lat' and 'lon' columns\nawait table.loadData(\"./data.csv\");\n// We create point geometries in a new 'geom' column using 'lat' and 'lon' columns\nawait table.points(\"lat\", \"lon\", \"geom\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens to tables that are not listed in the `selectTables` call?","completion":"All tables not specified are removed from the database. For example, if you only keep \"orders\", all other tables are dropped:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.selectTables(\"orders\");\nawait sdb.done();\n```"}
{"prompt":"How do I compute the Haversine distance in kilometers and round it to two decimal places?","completion":"Here’s how to compute the Haversine distance in kilometers and round it to two decimal places (geometries must be in EPSG:4326):\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Compute Haversine distance in kilometers, rounded to 2 decimal places\\nawait table.distance(\"point1\", \"point2\", \"distance_km\", {\\n  method: \"haversine\",\\n  unit: \"km\",\\n  decimals: 2,\\n});\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I reproject geometries to a new SRS without specifying the original projection?","completion":"Here's how to reproject to a new SRS without specifying the original projection:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./geodata.geojson\");\nawait table.reproject(\"EPSG:3347\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific column exists in my table?","completion":"You can use the `getColumns` method and check for the presence of the column name. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get all column names\nconst columns = await table.getColumns();\n// Check if 'price' column exists\nif (columns.includes('price')) {\n  console.log('Price column exists');\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I prepend custom text before the data in the Google Sheet?","completion":"Use the `prepend` option to add text before the table data.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Write the table data with a prepended message\nawait table.toSheet('https://docs.google.com/spreadsheets/d/.../edit#gid=0', {\n  prepend: 'Report generated on:'\n});\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I verify that my data was loaded correctly?","completion":"After loading, you can use `logTable` to inspect the contents. Example:\\n```// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Sample data\\nconst data = [\\n  { name: \"Alice\", age: 30 },\\n  { name: \"Bob\", age: 25 },\\n];\\nawait table.loadArray(data);\\n// Log the table to see the rows\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How can I extract the first three characters from the 'name' column in my table?","completion":"Here's how you can extract the first three characters from the 'name' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We extract the first three characters from the 'name' column\nawait table.left(\"name\", 3);\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get the mean of a non-numeric column?","completion":"The method will throw an error because it expects a numeric column. Example of error handling:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\ntry {\n  const mean = await table.getMean(\"name\");\n  console.log(mean);\n} catch (err) {\n  console.error(\"Error calculating mean:\", err.message);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `isClosedGeo` method return?","completion":"The `isClosedGeo` method returns a promise that resolves when the closed geometry check is complete. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a new column named 'isClosed'\nawait table.isClosedGeo(\"isClosed\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I convert a datetime column to a string with a specific format?","completion":"Here's how to convert a datetime column to a string using a specific format:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Convert 'timestamp' to string using %Y-%m-%d %H:%M:%S format\nawait table.convert({ timestamp: \"string\" }, { datetimeFormat: \"%Y-%m-%d %H:%M:%S\" });\n// Log the converted table\nawait table.logTable();\n// We close everything\nawait sdb.done();```"}
{"prompt":"How do I perform an inner join on a specific column and store the result in a new table?","completion":"Specify the common column, join type, and output table name. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform inner join on 'id' and store in new table 'joinedTable'\nconst joinedTable = await tableA.join(tableB, {\n  commonColumn: \"id\",\n  type: \"inner\",\n  outputTable: \"joinedTable\"\n});\nawait joinedTable.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I assign quantiles across multiple category columns?","completion":"Pass an array of category column names to `options.categories` to compute quantiles within each combination of categories:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./demographics.csv\");\n// We assign deciles to the 'income' column, grouped by both 'ageGroup' and 'gender', storing results in 'incomeDecile'\nawait table.quantiles(\"income\", 10, \"incomeDecile\", { categories: [\"ageGroup\", \"gender\"] });\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all data from a table using getData?","completion":"You can call getData without any options to get every row in the table.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data into the table (replace with your CSV path)\nawait table.loadData(\"./data.csv\");\n// Retrieve all rows from the table\nconst allData = await table.getData();\n// Log the retrieved data\nconsole.log(allData);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I handle errors when removing a table?","completion":"Wrap the removeTable call in a try/catch block to gracefully handle any issues. Example:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\");\ntry {\n  await table.removeTable();\n  console.log(\"Table removed successfully.\");\n} catch (e) {\n  console.error(\"Failed to remove table:\", e.message);\n}\nawait sdb.done();\n```"}
{"prompt":"What if I need to load a newline‑delimited JSON file?","completion":"Set `jsonFormat` to \"newlineDelimited\" and optionally `records` to true:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.ndjson\", {\n  jsonFormat: \"newlineDelimited\",\n  records: true\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I compute cumulative sums within specific categories?","completion":"To compute cumulative sums within categories, use the `categories` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./orders.csv\");\n// Compute cumulative orders within each 'customer_id'\nawait table.accumulate(\"orders\", \"cumulativeOrders\", {\n  categories: \"customer_id\"\n});\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Will the unique values returned by `getUniques` be sorted in a specific order?","completion":"Yes, the unique values returned by `getUniques` are sorted in ascending order. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Get unique values from the 'name' column\nconst uniqueNames = await table.getUniques(\"name\");\nconsole.log(uniqueNames); // e.g., [\"Alice\", \"Bob\", \"Charlie\"]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I extract latitude and longitude from a point geometry column using the `latLon` method?","completion":"Here is how you can extract latitude and longitude from the 'geom' column into 'lat' and 'lon' columns:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData('./data.csv');\n// Extract latitude and longitude\nawait table.latLon('geom', 'lat', 'lon');\n// Log the table to see the new columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What if I want to aggregate a specific geometry column?","completion":"If your geometry column has a custom name, specify it with options.column.\\n\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadGeoData(\"./my-geodata.geojson\");\\n// Aggregate geometries in the 'geo_col' column\\nawait table.aggregateGeo(\"union\", { column: \"geo_col\" });\\n// Log the aggregated result\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"Is it possible to use regular expressions for the string replacement?","completion":"Yes, you can use regular expressions by setting the `regex` option to `true`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Replace any sequence of one or more digits with a hyphen in 'column1' using regex\nawait table.replace(\"column1\", { \"\\d+\": \"-\" }, { regex: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the Haversine distance in kilometers, rounded to two decimal places?","completion":"Here's how you can calculate the Haversine distance in kilometers, rounded to two decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.geojson\");\n// We compute the Haversine distance in kilometers, rounded to 2 decimal places\n// Input geometries must be in EPSG:4326.\nawait table.distance(\"point1\", \"point2\", \"distance_km\", {\n  method: \"haversine\",\n  unit: \"km\",\n  decimals: 2,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify which geometry column to check for closed status?","completion":"Yes, you can specify the geometry column using the `options` parameter. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We check the 'boundaryGeom' column and store results in 'isClosed'\nawait table.isClosedGeo(\"isClosed\", { column: \"boundaryGeom\" });\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where the 'fruit' column is 'apple'?","completion":"Here's how you can remove rows where the 'fruit' column equals 'apple' using SQL syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Remove rows where fruit is 'apple'\nawait table.removeRows(`fruit = 'apple'`);\n// Log the table to see the result\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clean the column names in my table?","completion":"Here's how you can clean the column names in your table using the `cleanColumnNames` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We clean the column names\nawait table.cleanColumnNames();\n// We log the table to see the cleaned column names\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle the promise returned by getTypes in an async function?","completion":"Wrap the call in an async function and use `await` to get the resolved value.\n```\nasync function showColumnTypes() {\n  const types = await table.getTypes();\n  console.log(\"Column types:\", types);\n}\n\nawait showColumnTypes();\n```"}
{"prompt":"How can I specify a different column to fill holes in polygon geometries?","completion":"You can pass the column name as an argument. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We fill holes in the 'polygonGeom' column\nawait table.fillHoles(\"polygonGeom\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I round multiple columns with default options (nearest integer)?","completion":"Here's how to round multiple columns with default options (nearest integer):\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data (replace with your CSV path)\\nawait table.loadData(\\\"./data.csv\\\");\\n// Round 'columnX' and 'columnY' values to the nearest integer\\nawait table.round([\\\"columnX\\\", \\\"columnY\\\"]);\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How do I round multiple columns to one decimal place using ceiling rounding?","completion":"To round multiple columns to one decimal place with ceiling rounding, specify column array and options.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.round([\"price\", \"quantity\"], { decimals: 1, method: \"ceiling\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I filter my data to keep only specific rows?","completion":"Use the `keep` method with column-value pairs. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Keep only rows where 'department' is 'Marketing'\nawait table.keep({ department: \"Marketing\" });\n// Log the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I cache AI responses to avoid repeated requests?","completion":"Enable caching with the cache option to store results locally:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadArray([\n  { name: \"Marie\" },\n  { name: \"John\" },\n  { name: \"Alex\" },\n]);\n// Cache results locally\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  { cache: true }\n);\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL-like conditions with the `getTop` method?","completion":"Yes, you can use SQL-like conditions with the `getTop` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the top 5 rows where the price is greater than 100\nconst top5Expensive = await table.getTop(5, { conditions: `price > 100` });\n// We log the results\nconsole.log(top5Expensive);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don’t provide a geometry column and there is no geometry column in the table?","completion":"The method will try to find a geometry column automatically; if none is found, it will throw an error. To avoid this, ensure a geometry column exists or specify one explicitly:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data (must contain a geometry column)\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Attempt to compute area without specifying column (works if a geometry column exists)\nawait table.area(\"area_auto\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add a column with the geometry types?","completion":"Here's how you can add a new column with the geometry type for each feature:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a new column 'geometryType' with the type of each geometry\nawait table.typeGeo(\"geometryType\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add new rows programmatically to my table?","completion":"You can use the `insertRows` method to add rows as an array of objects. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Define the rows to insert\nconst newRows = [\n  { name: \"Alice\", age: 30 },\n  { name: \"Bob\", age: 25 }\n];\n// Insert the rows into the table\nawait table.insertRows(newRows);\n// We close everything\nawait sdb.done();\n```\nThis code inserts two new rows into the table with specified column values."}
{"prompt":"How can I compute a buffer around geometries in a specific column?","completion":"Here's how to create a buffer for a specific geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Create a buffer of 10 units around geometries in the 'pointsGeom' column\nawait table.buffer(\"pointsBuffer\", 10, { column: \"pointsGeom\" });\n// Log the results to see the buffered geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I perform an inner join between `tableA` and `tableB` using the `id` column as the common key and store the result in a new table named `tableC`?","completion":"Here's how you can perform an inner join and store the result in a new table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into the tables (replace with your actual data loading)\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform an inner join with 'tableB' on the 'id' column, storing results in a new table named 'tableC'\nconst tableC = await tableA.join(tableB, {\n  commonColumn: \"id\",\n  type: \"inner\",\n  outputTable: \"tableC\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I ensure all unique values are visible in the output?","completion":"Use the `stringify` option to log all unique values as a JSON string:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log unique values as a JSON string to see all of them\nawait table.logUniques(\"category\", { stringify: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use `updateWithJS` to add 1 to the values in a column named 'score'?","completion":"Here's how you can use `updateWithJS` to increment the values in the 'score' column by 1:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We update the 'score' column\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    score: typeof d.score === \"number\" ? d.score + 1 : null,\n  }));\n  return modifiedRows;\n});\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What parameters does the `longer` method accept?","completion":"The `longer` method accepts three parameters: `columns`, `columnsTo`, and `valuesTo`. Here's an example demonstrating their usage:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We restructure the table\n// 'columns' is an array of column names to stack\n// 'columnsTo' is the name of the new column for original column names\n// 'valuesTo' is the name of the new column for the values\nawait table.longer([\"2021\", \"2022\"], \"year\", \"sales\");\n// We log the table to see the restructured data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I sample 100 random rows from a table?","completion":"Here’s how to sample 100 random rows from a table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Sample 100 random rows\nawait table.sample(100);\n// Log the sampled rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I sort a column with French accent sensitivity?","completion":"Here's how to sort a 'name' column considering French accents using language collation:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Sort 'name' column with French collation (accent sensitivity)\nawait table.sort({ name: \"asc\" }, { lang: { name: \"fr\" } });\n// We log the sorted table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the total number of values in my table?","completion":"You can use the `getNbValues` method to get the total number of values (columns multiplied by rows). Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the total number of values in the table\nconst nbValues = await table.getNbValues();\nconsole.log(`Total values: ${nbValues}`);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the stringify option do in logUniques?","completion":"The `stringify` option converts the array of unique values into a JSON string before logging, which is useful when the array is large and you want to see the full content:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\nawait table.logUniques('status', { stringify: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if I use setTypes on an existing table?","completion":"Using setTypes on an existing table will replace it. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"existingTable\");\n// Load some data into the table\nawait table.loadData(\"./data.csv\");\n// Now setTypes will replace this table\nawait table.setTypes({\n  id: \"integer\",\n  title: \"string\"\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add a geometry column with a specific projection?","completion":"When adding a geometry column, you need to specify the projection. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// Add a new geometry column 'centroid' using the centroid of an existing 'country' geometry column\n// The projection of the new 'centroid' column is set to be the same as 'country'\nawait table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"country\")`, {\n  projection: table.projections.country,\n});\n// We log the updated table to see the new geometry column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use getSum to calculate the total of a numeric column?","completion":"Here’s how to get the sum of the 'quantity' column:\n\n```javascript\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data\nawait table.loadData(\"./data.csv\");\n// Get sum\nconst total = await table.getSum(\"quantity\");\nconsole.log(total);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if no rows match the conditions in getLastRow?","completion":"If no rows match, the method returns null.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Attempt to retrieve the last row where category is 'Nonexistent'\nconst lastNonexistentRow = await table.getLastRow({\n  conditions: \"category = 'Nonexistent'\",\n});\n// Log the result (will be null if no match)\nconsole.log(lastNonexistentRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve all column names from a table after loading data?","completion":"Use the `getColumns` method after loading data to get the list of column names.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Get columns\nconst columns = await table.getColumns();\nconsole.log(columns); // e.g., ['id', 'name', 'age']\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set types for a table that includes timestamp with time zone?","completion":"To set a timestamp with time zone column, use 'timestamp with time zone' as the type:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Set timestamp with time zone type\nawait table.setTypes({\n  eventTimestamp: 'timestamp with time zone',\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the standard deviation of a specific column?","completion":"You can use the `getStdDev` method to get the standard deviation of a numeric column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the standard deviation of the 'age' column\nconst ageStdDev = await table.getStdDev(\"age\");\nconsole.log(\"Standard Deviation of Age:\", ageStdDev);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I sort my data in ascending order?","completion":"Here's how you can sort your table in ascending order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We sort all columns in ascending order\nawait table.sort();\n// We log the sorted table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I aggregate all geometries in the default column into a single union geometry?","completion":"Here’s how to aggregate all geometries in the default column into a single union geometry:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Aggregate geometries using the union method\nawait table.aggregateGeo(\"union\");\n// Log the aggregated result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log rows that meet a certain condition, for example, where the 'category' column is equal to 'electronics'?","completion":"Here's how you can log rows based on a condition:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We log rows where 'category' is 'electronics'\nawait table.logTable({ conditions: `category === 'electronics'` });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use JavaScript syntax for filtering in SimpleTable?","completion":"The `filter` method accepts JavaScript logical operators. For example, to keep rows where `score` is at least 80 and `status` is \"active\":\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Filter rows using JavaScript syntax\nawait table.filter(`score >= 80 && status === 'active'`);\n// Log the filtered table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log the first 20 rows along with column types?","completion":"Here's how you can log the first 20 rows with column types displayed:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Log first 20 rows with column types\nawait table.logTable({ nbRowsToLog: 20, types: true });\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax within the `removeRows` method's condition?","completion":"Yes, you can use JavaScript syntax for conditions. Here's an example using `&&` and `===`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// Remove rows where 'price' is less than 100 AND 'quantity' is 0\nawait table.removeRows(\"price < 100 && quantity === 0\");\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I control the width of the histogram bars?","completion":"Use the `width` option to set the maximum bar width in characters:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Log a histogram with a maximum bar width of 50 characters\nawait table.logHistogram(\"temperature\", { width: 50 });\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that only entire cell values are replaced and not substrings?","completion":"Use the `entireString` option to match the whole cell content:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Replace only if the entire cell equals \"kilograms\"\nawait table.replace(\"column1\", { \"kilograms\": \"kg\" }, { entireString: true });\nawait sdb.done();\n```"}
{"prompt":"How do I use `fillHoles` when the geometry column is the default one?","completion":"If the table’s default geometry column contains the polygons, you can simply call `fillHoles()` without arguments. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadGeoData('./my-geodata.geojson');\nawait table.fillHoles();\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute proportions within a single category column?","completion":"To compute proportions of 'sales' within each 'region', rounding to two decimal places, use:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./sales.csv\");\n// Compute proportions of 'sales' within 'region', rounded to 2 decimals\nawait table.proportionsVertical(\"sales\", \"sales_pct\", { categories: \"region\", decimals: 2 });\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"If I call `selectColumns` multiple times, how does it behave? Does it append to the existing selection, or overwrite it?","completion":"The `selectColumns` method overwrites the existing selection. Each call to `selectColumns` replaces the previously selected columns with the new set of columns specified. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We select 'name' and 'age'\nawait table.selectColumns(['name', 'age']);\n// We then select only 'city'\nawait table.selectColumns('city');\n// Now only the 'city' column remains\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the list of table names to perform operations on each table?","completion":"You can iterate over the array and call methods on each table name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableNames = await sdb.getTableNames();\nfor (const name of tableNames) {\n  // Example: log the name of each table\n  console.log(`Table: ${name}`);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I get the 90th percentile of a column and round the result to two decimal places?","completion":"To calculate the 90th percentile of the 'score' column and round the result to two decimal places, use the following code:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable('results');\n// We load data from the file\nawait table.loadData('./results.csv');\n// We get the 90th percentile of 'score' with rounding\nconst ninetieth = await table.getQuantile('score', 0.9, { decimals: 2 });\nconsole.log(ninetieth);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What is the proper way to close a SimpleDB instance after performing operations?","completion":"Call `await sdb.done()` to cleanly shut down the database.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"temp\");\nawait table.loadData(\"./temp.csv\");\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I assign quartiles to a column?","completion":"Set nbQuantiles to 4 to get quartiles. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Assign quartiles to 'sales' and store them in 'salesQuartile'\nawait table.quantiles(\"sales\", 4, \"salesQuartile\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a separator when concatenating columns?","completion":"If you don't specify a separator, the concatenated values will be joined without any characters in between. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We concatenate 'city' and 'country' into 'location' without a separator\nawait table.concatenate([\"city\", \"country\"], \"location\");\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get the sum of a non-numeric column?","completion":"If you try to use `getSum` on a non-numeric column, it will throw an error. Make sure your column contains numeric values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\ntry {\n  // Attempting to get sum of non-numeric column 'name'\n  const total = await table.getSum(\"name\");\n} catch (error) {\n  console.error(\"Error: Column must contain numeric values\");\n}\n// We close everything\nawait sdb.done();\n```\nAlways ensure the column contains numbers before using `getSum`."}
{"prompt":"How can I specify a particular column to unnest geometries from?","completion":"Here's how you can unnest geometries from a specific column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We unnest geometries in a specific column named 'myGeometries'\nawait table.unnestGeo(\"myGeometries\");\n// We log the first rows to see the unnested data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I store the results of the linear regression in a new table instead of overwriting the current one?","completion":"Yes, by setting outputTable to true or providing a name for the new table:"}
{"prompt":"How to write a table's data to a compressed JSON file (with GZIP)?","completion":"Here's how you can write the table's data to a compressed JSON file (with GZIP):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We write the data to a compressed JSON file\nawait table.writeData(\"./output.json\", { compression: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I round a single column to the nearest integer?","completion":"Here's how to round a single column to the nearest integer:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data (replace with your CSV path)\\nawait table.loadData(\\\"./data.csv\\\");\\n// Round 'column1' values to the nearest integer\\nawait table.round(\\\"column1\\\");\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I add a new column that calculates the sum of two existing numeric columns as a float?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data containing 'column1' and 'column2' columns\nawait table.loadData(\"./data.csv\");\n// We add a new 'total' column as float using column1 + column2\nawait table.addColumn(\"total\", \"float\", \"column1 + column2\");\n// We verify the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove all rows from a table?","completion":"To clear a table, you can use a condition that always evaluates to true, such as `1=1`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.removeRows(`1=1`); // Removes every row\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I log the last 3 rows of my table while preserving the original order?","completion":"Here's how you can log the last 3 rows of your table in their original order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We log the last 3 rows in their original order\nawait table.logBottom(3, { originalOrder: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add a row number column to my table?","completion":"Here's how you can add a new column containing the row number: \n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We add a new column named 'rowNumber' with the row number for each row\nawait table.addRowNumber(\"rowNumber\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify the unit for the computed area (e.g., square kilometers)?","completion":"Yes, you can specify the unit. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the area in square kilometers and store it in 'area_km2'\nawait table.area(\"area_km2\", { unit: \"km2\" });\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I control the number of decimal places in the proportions?","completion":"You can specify the number of decimals using the `decimals` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data\nawait table.loadData(\"./sample_data.csv\");\n// Compute horizontal proportions with 3 decimal places\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"], {\n  decimals: 3\n});\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nThe proportions will be rounded to 3 decimal places."}
{"prompt":"What format will the `getTypes` method return the data types in?","completion":"The `getTypes` method returns an object where the keys are the column names and the values are their corresponding data types as strings. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the data types of all columns\nconst dataTypes = await table.getTypes();\nconsole.log(dataTypes); // Example: { \"id\": \"BIGINT\", \"name\": \"VARCHAR\" }\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens when there aren't enough rows to form a complete window?","completion":"In such cases, `NULL` values are returned. Here's how it works:"}
{"prompt":"How do I log the types of all columns in a table?","completion":"Here is how to log the data types of all columns:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the data types of all columns\nawait table.logTypes();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get the sum of a non-numeric column?","completion":"The documentation doesn't specify the behavior if a non-numeric column is provided. However, it's likely to result in an error or unexpected behavior. It's best to ensure the specified column contains numeric values.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./my_data.csv\");\n// Attempt to get the sum of a string column\n// This might result in an error\nconst sumOfStrings = await table.getSum(\"name\");\nconsole.log(sumOfStrings);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I include the source file name as a new column in the loaded data?","completion":"To add the source file name as a new column, set fileName to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { fileName: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I round the skewness result to a specific number of decimal places?","completion":"Yes, you can specify the number of decimals when calling `getSkew`. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Calculate skewness with 2 decimal places\nconst roundedSkewness = await table.getSkew(\"values\", { decimals: 2 });\nconsole.log(\"Rounded Skewness:\", roundedSkewness);\n// We close everything\nawait sdb.done();\n```\nThis example rounds the skewness result to two decimal places."}
{"prompt":"Can I specify a custom name for the new geometry column?","completion":"Yes, you can provide any column name you like for the new geometry column. For example, to name it 'location_point':\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./locations.csv\");\n// Create point geometries in a custom-named column\nawait table.points(\"lat\", \"lon\", \"location_point\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load a remote Parquet file?","completion":"Here’s how to load a remote Parquet file:\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\"https://example.com/data.parquet\");\\nawait sdb.done();\\n```"}
{"prompt":"How do I disable coordinate rewinding when generating a map?","completion":"If you need to keep the original winding order, set options.rewind to false:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./CanadianProvincesAndTerritories.geojson\");\n\nconst mapFunction = (geoJsonData) =>\n  plot({\n    projection: { type: \"conic-conformal\", rotate: [100, -60], domain: geoJsonData },\n    marks: [geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" })],\n  });\n\nconst outputPath = \"./output/no_rewind_map.png\";\n\nawait table.writeMap(mapFunction, outputPath, {\n  rewind: false,\n});\nawait sdb.done();\n```"}
{"prompt":"How can I clone only specific columns from a table?","completion":"Here is how you clone a table with only specific columns:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"originalTable\");\\nawait table.loadData(\"./data.csv\");\\nconst clonedTable = await table.cloneTable({\\n  columns: [\"name\", \"age\", \"city\"]\\n});\\nawait clonedTable.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I use the descriptive statistics to identify columns with many null values?","completion":"After retrieving the description, filter the array for columns where nullCount exceeds a threshold:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst description = await table.getDescription();\n// Find columns with more than 50% null values\nconst threshold = 0.5;\nconst columnsWithManyNulls = description.filter(col => col.nullCount / col.totalCount > threshold);\nconsole.log(columnsWithManyNulls);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a separator when concatenating columns?","completion":"If you don't provide a separator, the values are concatenated without any separation. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Concatenate 'prefix' and 'number' into 'fullNumber' without a separator\nawait table.concatenate(['prefix', 'number'], 'fullNumber');\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get unique values from a specific column?","completion":"To obtain unique values, you can use `getValues` combined with a Set. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get all values and extract unique ones\nconst uniqueCategories = Array.from(new Set(await table.getValues(\"category\")));\nconsole.log(\"Unique categories:\", uniqueCategories);\n// We close everything\nawait sdb.done();\n```\nThis example retrieves unique values from the 'category' column."}
{"prompt":"How do I log projections after loading geospatial data?","completion":"Here is how you can load geospatial data and then log its projections:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We log the projections\nawait table.logProjections();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load a simple array of objects into a table?","completion":"Here’s how to load a simple array of objects into a table:\n```// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Define the data array\nconst data = [\n  { letter: \"a\", number: 1 },\n  { letter: \"b\", number: 2 },\n];\n// Load the array into the table\nawait table.loadArray(data);\n// We close everything\nawait sdb.done();```"}
{"prompt":"Can I use `longer` on columns that contain non-numeric data?","completion":"Yes, `longer` works with any data type; just list the column names you want to unpivot.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./survey_responses.csv\"); // columns: Respondent, Q1, Q2, Q3\n// Unpivot Q1, Q2, Q3 into 'Question' and 'Answer'\nawait table.longer([\"Q1\", \"Q2\", \"Q3\"], \"Question\", \"Answer\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I see the unique values as strings instead of their original format?","completion":"You can use the `stringify` option to log the unique values as strings. Here's an example for the 'id' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We log the unique values for the 'id' column and stringify them\nawait table.logUniques(\"id\", { stringify: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I update a column with a simple multiplication?","completion":"Here's how you can update a column by multiplying its existing values by a constant:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Update the 'price' column by multiplying it by 2\nawait table.updateColumn(\"price\", `price * 2`);\n// Log the table to see the updated values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I format y-axis values to display as percentages?","completion":"Here's how to format y-axis values as percentages using the formatY option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data with numeric values\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 0.1 },\n  { date: new Date(\"2023-02-01\"), value: 0.2 },\n];\nawait table.loadArray(data);\n// Convert date to string for display\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Format y-axis values as percentages\nawait table.logLineChart(\"date\", \"value\", {\n  formatY: (d) => `${(d * 100).toFixed(1)}%`,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I unnest the geometries in my table using the default geometry column?","completion":"Here's how you can unnest geometries using the default column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We unnest the geometries in the default column\nawait table.unnestGeo();\n// We log the first rows to see the unnested data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I concatenate two columns into a new column with a custom separator?","completion":"Here's how you can concatenate two columns with a custom separator (like comma and space):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data containing 'city' and 'country' columns\nawait table.loadData(\"./locations.csv\");\n// Concatenate city and country into location with comma separator\nawait table.concatenate([\"city\", \"country\"], \"location\", { separator: \", \" });\n// Verify the new column\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify a different trimming method (left or right)?","completion":"You can use the `method` option to choose between left, right, or both trimming:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Right-trim whitespace from 'description'\nawait table.trim(\"description\", { method: \"rightTrim\" });\n// Log the modified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I customize the number of bins in my histogram?","completion":"You can customize the number of bins using the `bins` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We generate a histogram with 15 bins for the 'price' column\nawait table.logHistogram(\"price\", { bins: 15 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I cache AI responses to avoid reprocessing?","completion":"Yes, enable caching with the `cache` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start SimpleDB instance\nconst sdb = new SimpleDB();\n// Create table and load data\nconst table = sdb.newTable(\"feedback\");\nawait table.loadArray([\n  { comment: \"Great service!\" },\n  { comment: \"Could be better.\" }\n]);\n// Analyze sentiment with caching\nawait table.aiRowByRow(\n  \"comment\",\n  \"sentiment\",\n  `Analyze this comment's sentiment as positive, neutral, or negative`,\n  {\n    cache: true,\n    verbose: true\n  }\n);\n// View cached results\nawait table.logTable();\n// Close resources\nawait sdb.done();\n```\n"}
{"prompt":"What happens if I try to use both `entireString` and `regex` options together?","completion":"The method will throw an error because these options are mutually exclusive. To avoid this, choose one option:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Correct usage: only regex\nawait table.replace(\"column1\", { \"\\\\d+\": \"-\" }, { regex: true });\n// Incorrect usage (will error): both options set\n// await table.replace(\"column1\", { \"kilograms\": \"kg\" }, { entireString: true, regex: true });\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the average salary rounded to two decimal places?","completion":"Here's how to calculate the mean of the 'salary' column with two decimal places:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file containing a 'salary' column\nawait table.loadData(\"./data.csv\");\n// Calculate the mean salary rounded to 2 decimals\nconst meanSalary = await table.getMean(\"salary\", { decimals: 2 });\n// Log the result\nconsole.log(meanSalary);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What does logDescription output look like?","completion":"logDescription prints a table of column statistics to the console, including column name, data type, number of null values, and number of distinct values.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We log descriptive information for all columns\nawait table.logDescription();\n// The console will show something like:\n// | Column | Type   | Nulls | Distinct |\n// |--------|--------|-------|----------|\n// | id     | number | 0     | 1000     |\n// | name   | string | 5     | 950      |\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write data to a JSON file with GZIP compression?","completion":"Here's how to write data to a JSON file with GZIP compression:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.writeData(\"./output.json\", { compression: true });\nawait sdb.done();```"}
{"prompt":"What happens if I try to select columns that don't exist in the table?","completion":"If you select non-existent columns, the table will be empty. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Try to select non-existent columns\nawait table.selectColumns([\"nonExistentColumn1\", \"nonExistentColumn2\"]);\n// Log the empty table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I trim whitespace from a specific column?","completion":"Here's how you can trim whitespace from a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Trim whitespace from 'description' column\nawait table.trim(\"description\");\n// Log the modified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute linear regressions between all numeric columns in my table, overwriting the current table?","completion":"Here's how you can compute linear regressions between all numeric columns, overwriting the current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute linear regressions between all numeric columns, overwriting the current table\nawait table.linearRegressions();\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute Z-scores for a specific column in my dataset?","completion":"Here's how you can compute Z-scores for a column and store them in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute Z-scores for 'age' and store in 'ageZScore'\nawait table.zScore(\"age\", \"ageZScore\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to perform a left join using auto-detection of the common column?","completion":"Here's how to perform a left join using auto-detection of the common column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableA.loadData(\"./tableA.csv\");\nawait tableB.loadData(\"./tableB.csv\");\n// Perform left join (auto-detect common column) and overwrite tableA\nawait tableA.join(tableB);\nawait sdb.done();\n```"}
{"prompt":"How do I compute the vertical proportions of a column relative to the total sum of that column?","completion":"You can compute vertical proportions of a column by calling `proportionsVertical` with a new column name.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// We load data from a CSV file\nawait table.loadData(\"./sales.csv\");\n// Compute proportions of 'revenue' column and store in 'revenuePerc'\nawait table.proportionsVertical(\"revenue\", \"revenuePerc\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I select only the 'id' and 'name' columns from my table?","completion":"Here's how you can select specific columns using the `selectColumns` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We select only the 'id' and 'name' columns\nawait table.selectColumns(['id', 'name']);\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve a list of all column names in my table?","completion":"Here's how you can use the `getColumns` method to retrieve a list of column names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the column names\nconst columns = await table.getColumns();\n// We log the column names\nconsole.log(columns);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I format dates in my GeoJSON output?","completion":"You can format date and timestamp columns to ISO 8601 strings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the geospatial data with formatted dates\nawait table.writeGeoData(\"./output.geojson\", { formatDates: true });\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I set a column to a constant value?","completion":"Here is how to set the 'category' column to the constant value 'General':\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\nawait table.loadData('./data.csv');\\nawait table.updateColumn('category', \"'General'\");\\nawait sdb.done();\\n```"}
{"prompt":"How do I convert a column to a SQL VARCHAR type?","completion":"Here's how to convert a column to a SQL VARCHAR type:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Convert 'product_id' column to VARCHAR\nawait table.convert({ product_id: \"varchar\" });\n// Log the converted table\nawait table.logTable();\n// We close everything\nawait sdb.done();```"}
{"prompt":"How do I set the data type for a specific column?","completion":"Use columnTypes to define column data types:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", {\n  columnTypes: {\n    price: \"number\",\n    date: \"date\"\n  }\n});\nawait sdb.done();\n```"}
{"prompt":"How can I perform an inner join on a specific column and store the result in a new table?","completion":"Specify the common column and set the type to \"inner\" while providing a name for the output table.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform an inner join on the \"id\" column and store results in a new table named \"joinedTable\"\nconst joinedTable = await tableA.join(tableB, {\n  commonColumn: \"id\",\n  type: \"inner\",\n  outputTable: \"joinedTable\",\n});\n// Log the new table\nawait joinedTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I summarize all columns in my table using all available summary operations, overwriting the current table?","completion":"Here's how you can summarize all columns with all available summary operations, overwriting the current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We get the columns\nconst columns = await table.getColumns();\n// We summarize all columns with all available summary operations\nawait table.summarize({ values: columns });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data type does the `getTableNames` method return?","completion":"The `getTableNames` method returns a Promise that resolves to a string array. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get all table names\nconst tableNamesPromise = sdb.getTableNames();\n\n// Wait for the promise to resolve\nconst tableNames = await tableNamesPromise;\n\n// Log the table names\nconsole.log(tableNames); // Output: An array of strings\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use a custom suffix for the new proportion columns?","completion":"You can use the `suffix` option to customize the suffix. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file containing 'Men', 'Women', and 'NonBinary' columns\nawait table.loadData(\"./gender_data.csv\");\n// Compute horizontal proportions with a custom suffix \"Prop\"\nawait table.proportionsHorizontal([\"Men\", \"Women\", \"NonBinary\"], {\n  suffix: \"Prop\",\n  decimals: 2,\n});\n// Log the table to see the new columns with the custom suffix\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the area in square kilometers instead of square meters?","completion":"To compute the area in square kilometers, pass the unit option:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the area in square kilometers and store it in 'area_km2'\nawait table.area(\"area_km2\", { unit: \"km2\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I properly close the SimpleDB instance after performing all operations?","completion":"To close the database after you finish all operations, simply call `await sdb.done();`.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load data into a table\nconst employees = sdb.newTable(\"employees\");\nawait employees.loadData(\"./employees.csv\");\n// Log first rows\nawait employees.logTable();\n// Close the database\nawait sdb.done();\n```"}
{"prompt":"How do I create point geometries from latitude and longitude columns?","completion":"Here's how you can create point geometries using the `points` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We create point geometries in a new 'geom' column using 'lat' and 'lon' columns\nawait table.points(\"lat\", \"lon\", \"geom\");\n// We log the first rows to see the new 'geom' column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Does `getStdDev` work with any numeric column?","completion":"Yes, it works for any numeric column in your dataset. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get standard deviation of 'price' column\nconst priceStdDev = await table.getStdDev(\"price\");\nconsole.log(\"Standard Deviation of Price:\", priceStdDev);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I compute the length of line geometries in meters?","completion":"Here's how you can compute the length of line geometries in meters:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the length of line geometries in meters and store in 'length_m'\nawait table.length(\"length_m\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace multiple strings in one column simultaneously?","completion":"Here's how you can replace multiple strings in a single column:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Replace 'kilograms' with 'kg' and 'liters' with 'l' in 'column1'\nawait table.replace(\"column1\", {\n  \"kilograms\": \"kg\",\n  \"liters\": \"l\"\n});\n// We close everything\nawait sdb.done();```"}
{"prompt":"How do I calculate the cumulative sum for different categories?","completion":"Here's how you can calculate the cumulative sum of 'orders' grouped by 'customer_id':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data here, for example:\n// await table.loadData(\"./my-data.csv\");\n// Ensure your data is sorted by the category column(s) before accumulating.\n// For example, sort by 'customer_id'.\n// await table.sort(\"customer_id\");\n// Compute the cumulative sum of 'orders' within 'customer_id' categories\nawait table.accumulate(\"orders\", \"cumulativeOrders\", {\n  categories: \"customer_id\",\n});\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform a complex SQL operation using customQuery?","completion":"You can perform any valid SQL operation, like joining tables:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and load two tables\nconst salesTable = sdb.newTable(\"sales\");\nawait salesTable.loadData(\"./sales.csv\");\nconst productsTable = sdb.newTable(\"products\");\nawait productsTable.loadData(\"./products.csv\");\n// Execute a complex query joining both tables\nconst result = await sdb.customQuery(\n  \"SELECT p.name, s.quantity FROM sales s JOIN products p ON s.product_id = p.id\",\n  { returnDataFrom: \"query\" }\n);\nconsole.log(result);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different offset value when cloning a column?","completion":"Yes, you can specify any number of rows for the offset. Here's an example with an offset of 2 rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We clone the 'sales' column with an offset of 2 rows\nawait table.cloneColumnWithOffset(\"sales\", \"sales_2_days_ago\", { offset: 2 });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I insert rows from a single table into the current table?","completion":"Use the table name as a string in the `insertTables` method.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into both tables\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Insert all rows from tableB into tableA\nawait tableA.insertTables(\"tableB\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the very first row of a table?","completion":"Here’s how to load a CSV file and retrieve the first row:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the first row of the table\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to rename a table that doesn't exist?","completion":"The method is called on an existing table instance, so it will always work as long as the table exists. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We rename the table\nawait table.renameTable(\"newName\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleDB instance and a SimpleTable?","completion":"Here's how to create a SimpleDB instance and a SimpleTable:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\"); // This returns a SimpleTable instance\n\nawait sdb.done();\n```"}
{"prompt":"How can I specify the precision of coordinates when writing to a GeoJSON file?","completion":"Here's how you can write your geospatial data with specific coordinate precision:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We write the geospatial data with 6 decimal places of precision\nawait table.writeGeoData(\"./output_high_precision.geojson\", {\n  precision: 6\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I store the aggregated result in a new table instead of overwriting the current one?","completion":"To keep the original table and store the aggregated result in a new table, set outputTable to true or provide a name:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\\\"./my-geodata.geojson\\\");\n// Aggregate geometries and store in a new table\nconst newTable = await table.aggregateGeo(\\\"union\\\", { outputTable: true });\n// Log the new table\nawait newTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a table with a default name?","completion":"Here's how you can create a table with a default name (e.g., 'table1'): ```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait sdb.done();\n```"}
{"prompt":"How can I calculate basic statistics like mean and sum for my sales data?","completion":"You can use the `summarize` method with the desired operations. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We summarize to calculate mean and sum for sales\nawait table.summarize({\n  values: \"sales\",\n  summaries: [\"mean\", \"sum\"]\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I use `aiQuery` with a specific AI model?","completion":"Here's how you can use the `aiQuery` method with a specific AI model:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We use aiQuery with a specific model\nawait table.aiQuery(\n  \"Give me the total sales by product category\",\n  { model: \"gemini-1.5-pro\" }\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I capitalize multiple columns at once?","completion":"Yes, you can pass an array of column names to capitalize multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Capitalize strings in 'name' and 'city' columns\nawait table.capitalize([\"name\", \"city\"]);\n// Log the modified table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute vertical proportions for a specific column?","completion":"Here's how to compute vertical proportions for a column without categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./data.csv\");\n// Compute proportions for 'column1' and store in 'perc'\nawait table.proportionsVertical(\"column1\", \"perc\");\n// Log the results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I calculate the skewness of a column named 'sales' in my table?","completion":"Here's how you can calculate the skewness of the 'sales' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./sales_data.csv\");\n// We calculate the skewness of the 'sales' column\nconst salesSkew = await table.getSkew(\"sales\");\n// We log the result\nconsole.log(salesSkew);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I filter by a date column using getFirstRow?","completion":"Yes, you can compare dates in the condition string:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./sales.csv\");\n// Get the first sale after January 1, 2023\nconst firstRecentSale = await table.getFirstRow({\n  conditions: \"saleDate > '2023-01-01'\"\n});\nconsole.log(firstRecentSale);\nawait sdb.done();\n```"}
{"prompt":"What happens if I omit the column option when calling reducePrecision?","completion":"If the column option is omitted, the method automatically finds a geometry column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reduce precision without specifying a column\nawait table.reducePrecision(3);\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `getMin` method return?","completion":"The `getMin` method returns a promise that resolves to the minimum value of the specified column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data (replace with your actual data loading)\nawait table.loadData(\"./my-data.csv\");\n// Get the minimum value from the 'score' column\nconst minScore = await table.getMin(\"score\");\nconsole.log(minScore);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use `aiRowByRow` to categorize text data?","completion":"Here's how you can categorize text using AI row by row:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Sample data with names\nawait table.loadArray([\n  { name: \"Marie\" },\n  { name: \"John\" },\n  { name: \"Alex\" }\n]);\n// Categorize each name into gender using AI\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Determine if the name is typically for a \"Man\", \"Woman\", or could be either (\"Neutral\")`,\n  {\n    test: (dataPoint) => {\n      if (!['Man', 'Woman', 'Neutral'].includes(dataPoint as string)) {\n        throw new Error('Invalid category');\n      }\n    },\n    retry: 2\n  }\n);\n// Log the categorized results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I save my current database to a DuckDB file?","completion":"Here's how you can write your database to a DuckDB file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Write the current database to a DuckDB file\nawait sdb.writeDB(\"./my_exported_database.db\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I skip more rows than the table contains?","completion":"Skipping more rows than exist results in an empty table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load a small CSV file\nawait table.loadData(\"./small.csv\");\n// Skip 100 rows, more than the table has\nawait table.skip(100);\n// Log the table to see it is empty\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add a new geometry column based on an existing geometry column?","completion":"Here's how you can add a new geometry column 'centroid' using the centroid of an existing 'country' geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Add a new geometry column 'centroid' using the centroid of an existing 'country' geometry column\n// The projection of the new 'centroid' column is set to be the same as 'country'.\nawait table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"country\")`, {\n  projection: table.projections.country,\n});\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify column data types during load?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file and specify column types\nawait table.loadData(\"./data.csv\", {\n  columnTypes: {\n    \"price\": \"number\",\n    \"product\": \"string\",\n    \"date\": \"date\"\n  }\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometries in the two columns do not overlap when using union?","completion":"The union operation will still create a single geometry that represents both areas, even if they don't overlap. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the union of geometries in 'geomA' and 'geomB', storing results in 'unionGeom'\nawait table.union(\"geomA\", \"geomB\", \"unionGeom\");\n// The result will be a single geometry combining both, even if they don't overlap\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add a new numeric column that sums two existing columns?","completion":"Use `addColumn` with a float type and a SQL expression that adds the two columns:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data first\nawait table.loadData(\"./sales.csv\");\n// Add a new column 'total' as a float, calculated from 'price' and 'quantity'\nawait table.addColumn(\"total\", \"float\", \"price + quantity\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I don’t specify a geometry column; will `perimeter` still work?","completion":"Yes, if you omit the `column` option, `perimeter` will automatically try to find a geometry column in the table. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data (any geometry column will be detected)\nawait table.loadGeoData(\"./any_polygons.geojson\");\n// Compute the perimeter; the method finds the geometry column on its own\nawait table.perimeter(\"auto_perimeter\");\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I format the x-axis values to show dates in \"MM/DD/YYYY\" format?","completion":"Here's how to format the x-axis using the `formatX` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load sample data with Date objects\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10 },\n  { date: new Date(\"2023-02-01\"), value: 20 },\n];\nawait table.loadArray(data);\n// Convert date column to string for display\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Format x-axis to \"MM/DD/YYYY\"\nawait table.logLineChart(\"date\", \"value\", {\n  formatX: (d) => {\n    const date = new Date(d);\n    return `${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()}`;\n  },\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove duplicate rows based on multiple columns, for example firstName and lastName?","completion":"Pass an array of column names to the `on` option.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./contacts.csv\");\n// Remove duplicate rows based on 'firstName' and 'lastName'\nawait table.removeDuplicates({ on: [\"firstName\", \"lastName\"] });\n// Log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a SimpleDB instance that uses an in-memory database?","completion":"Create a SimpleDB instance without passing a file path, which defaults to an in-memory database.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with default in-memory settings\nconst sdb = new SimpleDB();\n// ... perform operations here ...\nawait sdb.done();\n```"}
{"prompt":"How do I perform linear regression on all numeric columns?","completion":"To compute linear regressions for all numeric columns, simply call linearRegressions without any options.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute all linear regressions between all numeric columns, overwriting the current table\nawait table.linearRegressions();\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the very last row of my table without any filtering?","completion":"Here's how you can retrieve the last row of the table without any conditions:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We get the last row\nconst lastRow = await table.getLastRow();\nconsole.log(lastRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I sample a fixed number of rows from a table?","completion":"You can use the `sample` method with a numeric quantity. Here’s how to sample 100 rows:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data first\nawait table.loadData(\"./data.csv\");\n// Sample 100 random rows\nawait table.sample(100);\n// Log the resulting table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I capitalize the first letter of strings in a single column?","completion":"Here's how you can capitalize the first letter of strings in a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We capitalize the strings in 'myColumn'\nawait table.capitalize(\"myColumn\");\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if a specific extension is loaded?","completion":"You can use the `getExtensions` method and filter for the specific extension. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Get list of installed extensions\nconst extensions = await sdb.getExtensions();\n// Check if 'spatial' extension is loaded\nconst hasSpatialExtension = extensions.some(ext => ext.extension_name === 'spatial');\nconsole.log('Spatial extension loaded:', hasSpatialExtension);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the number of bins for the histogram?","completion":"Pass the `bins` option to set the number of intervals in the histogram:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file containing a numeric column 'temperature'\nawait table.loadData(\"./data.csv\");\n// Generate a histogram with 15 bins for the 'temperature' column\nawait table.logHistogram(\"temperature\", { bins: 15 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I skip the first 10 rows of my table after loading data?","completion":"Here is how to skip the first 10 rows after loading data:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data\\nawait table.loadData('./data.csv');\\n// Skip first 10 rows\\nawait table.skip(10);\\n// Log the remaining rows\\nawait table.logTable();\\n// Close everything\\nawait sdb.done();\\n```"}
{"prompt":"Can I round the median value to a specific number of decimal places?","completion":"Yes, you can specify the number of decimal places when calculating the median. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the median of the 'salary' column, rounded to 2 decimal places\nconst medianSalary = await table.getMedian(\"salary\", { decimals: 2 });\nconsole.log(\"Median salary:\", medianSalary);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I extract the file extension from a 'fileName' column?","completion":"To extract the file extension from a 'fileName' column, split by '.' and take the second part:\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Split 'fileName' by dot and extract the second part into 'extension'\nawait table.splitExtract(\"fileName\", \".\", 1, \"extension\");\n// Log the table to see the extracted extensions\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I retrieve the unique values from a specific column in my dataset?","completion":"You can use the `getUniques` method to get unique values from a column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get unique values from the 'category' column\nconst uniqueCategories = await table.getUniques(\"category\");\n// Log the unique categories\nconsole.log(uniqueCategories);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert a single column to uppercase using the `upper` method?","completion":"Here is how you convert a single column to uppercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We convert 'name' column to uppercase\nawait table.upper(\"name\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometry columns specified in the `intersect` method have different projections?","completion":"The documentation states that both columns must have the same projection. If they do not, the behavior is undefined and likely to result in an error or incorrect results. The method expects both geometry columns to be in the same coordinate system.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Attempt to intersect columns with different projections (this may fail)\nawait table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I normalize values within specific categories?","completion":"Yes, you can normalize within categories. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Normalize 'value' within each 'group'\nawait table.normalize(\"value\", \"normalizedValue\", { categories: \"group\" });\n// Log the categorized normalized results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I trim a specific character, such as an asterisk, from multiple columns?","completion":"You can specify the character to trim and apply it to an array of columns. For example, to remove leading and trailing asterisks from the columns `productCode` and `sku`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.trim(['productCode', 'sku'], { character: '*', method: 'trim' });\nawait sdb.done();\n```"}
{"prompt":"How can I update a column by doubling its numeric values?","completion":"Here's how to double the values in a numeric column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Double the values in 'price' column\nawait table.updateColumn(\"price\", \"price * 2\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I use the `longer` method to reshape a wide table into a long format?","completion":"Here’s how to stack year columns into a long format:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadData(\"./employee_counts.csv\");\n// Restructure the table by stacking year columns into 'Year' and 'Employees'\nawait table.longer([\"2021\", \"2022\", \"2023\"], \"Year\", \"Employees\");\n// Log the transformed table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I write raw data to Google Sheets without any formatting?","completion":"Yes, you can use the raw option to disable data type guessing and formatting:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./mydata.csv\");\n// We export raw data to Google Sheets\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  raw: true\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I skip rows after I've already loaded the data?","completion":"Here's how you can skip rows after loading the data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We skip the first 2 rows\nawait table.skip(2);\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Do I need to load data before using `getNbRows`?","completion":"Yes, you need to load data into the table before you can use the `getNbRows` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the number of rows\nconst nbRows = await table.getNbRows();\n// We log the number of rows\nconsole.log(nbRows);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute a 7‑day rolling average of the \"sales\" column with 3 preceding and 3 following rows?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// Compute a 7‑day rolling average of 'sales' with 3 preceding and 3 following rows\nawait table.rolling(\"sales\", \"rollingAvgSales\", \"mean\", 3, 3);\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I keep multiple values in a single column using the `keep` method?","completion":"Yes, you can pass an array of values to keep rows matching any of them. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Keep rows where 'job' is either 'accountant' or 'developer'\nawait table.keep({ job: [\"accountant\", \"developer\"] });\n// Log the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What are the default parameters for the `round` method?","completion":"The defaults are rounding to the nearest integer (0 decimals) using the 'round' method. Here's how it works:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// By default, rounds to nearest integer using 'round' method\nawait table.round(\"quantity\");\n// Log the results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the Spheroid distance in kilometers?","completion":"Here's how you can calculate the Spheroid distance in kilometers:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.geojson\");\n// We compute Spheroid distance in kilometers\n// Input geometries must be in EPSG:4326.\nawait table.distance(\"area1\", \"area2\", \"distance_spheroid_km\", {\n  method: \"spheroid\",\n  unit: \"km\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I assign descending ranks to a column?","completion":"Here's how you can assign descending ranks to a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Assign descending ranks to the 'score' column, storing in 'descRank'\nawait table.ranks(\"score\", \"descRank\", { order: \"desc\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I make all small multiples share the same y-axis scale?","completion":"You can use the `fixedScales` option to make all small multiples share the same y-axis scale. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-03-01\"), value: 30, category: \"A\" },\n  { date: new Date(\"2023-04-01\"), value: 40, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n  { date: new Date(\"2023-03-01\"), value: 35, category: \"B\" },\n  { date: new Date(\"2023-04-01\"), value: 45, category: \"B\" },\n];\n// Load the data\nawait table.loadArray(data);\n// Convert the date to string\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Log the dot chart with fixed scales\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  fixedScales: true,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clean my column names?","completion":"Here's how you can clean your table's column names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We clean all column names in the table\nawait table.cleanColumnNames();\n// We log the cleaned table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I keep multiple values from the same column using `keep`?","completion":"Yes, you can pass an array of values to keep rows matching any of them. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Keep rows where 'department' is either 'sales' or 'marketing'\nawait table.keep({ department: [\"sales\", \"marketing\"] });\n// Log the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I log the geospatial projections of my table?","completion":"Here's how you can log the geospatial projections of your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We log the geospatial projections of the table\nawait table.logProjections();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute ranks within multiple categories?","completion":"Here's how you can compute ranks within multiple categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We compute ranks for 'sales' within 'department' and 'city'\nawait table.ranks(\"sales\", \"salesRank\", { categories: [\"department\", \"city\"] });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I get the last row where the category is 'Book'?","completion":"Here's how to get the last row with a condition using JavaScript syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst lastRowBooks = await table.getLastRow({\n  conditions: \"category === 'Book'\",\n});\nconsole.log(lastRowBooks);\nawait sdb.done();\n```"}
{"prompt":"I want to check if all my data was loaded correctly. How can I verify the total number of values?","completion":"You can use `getNbValues` right after loading your data to verify the count:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Verify the total number of values\nconst nbValues = await table.getNbValues();\nconsole.log(`Data loaded successfully. Total values: ${nbValues}`);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I filter rows where price is greater than 100 and quantity is greater than 0?","completion":"Here's how to filter rows using JavaScript logical operators for multiple conditions:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We filter rows with price > 100 AND quantity > 0\nawait table.filter(`price > 100 && quantity > 0`);\n// We log the filtered table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows that meet multiple conditions?","completion":"You can combine conditions using AND or OR. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'price' is less than 100 AND 'quantity' is 0\nawait table.removeRows(`price < 100 && quantity === 0`);\n// Log the remaining rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter the top rows by a SQL condition, e.g., category = 'Books'?","completion":"You can pass a SQL WHERE clause in the options to filter the rows:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Retrieve the top 5 rows where category is 'Books'\nconst top5Books = await table.getTop(5, { conditions: \"category = 'Books'\" });\n// Log the result\nconsole.log(top5Books);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I adjust the context window and reasoning budget for Ollama models?","completion":"Use `contextWindow` to set the maximum tokens the model can see and `thinkingBudget` to limit reasoning tokens.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./employees.csv\");\n// Set context window to 2048 tokens and a reasoning budget of 50 tokens\nawait table.aiQuery(\"Show average tenure by department\", {\n  ollama: true,\n  contextWindow: 2048,\n  thinkingBudget: 50\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I cross join and store the results in a new table with a generated name?","completion":"This example shows how to cross join and store results in a new table with a generated name.\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable('tableA');\nconst tableB = sdb.newTable('tableB');\n// Load data into both tables\nawait tableA.loadData('./dataA.csv');\nawait tableB.loadData('./dataB.csv');\n// Perform cross join, store results in a new table with generated name\nconst resultTable = await tableA.crossJoin(tableB, { outputTable: true });\n// Log the resulting table\nawait resultTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove all rows that have any missing values?","completion":"Here's how you can remove rows with any missing values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows with any missing values\nawait table.removeMissing();\n// Log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove multiple columns at once?","completion":"To remove multiple columns at once, pass an array of column names to removeColumns:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myTable');\nawait table.loadData('./data.csv');\nawait table.removeColumns(['colA', 'colB']);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Does the `intersection` method require the input geometry columns to have the same projection?","completion":"Yes, the documentation states that both input columns must have the same projection. Here's an example of how to use the method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the intersection of geometries in 'geomA' and 'geomB' columns,\n// storing results in 'intersectGeom'\nawait table.intersection(\"geomA\", \"geomB\", \"intersectGeom\");\n// We log the first rows to see the intersection data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the haversine distance method for a within join?","completion":"Here’s how to perform a within join using the haversine distance method (meters).\\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into both tables (EPSG:4326 required)\nawait tableA.loadData(\"./dataA.geojson\");\nawait tableB.loadData(\"./dataB.geojson\");\n// Perform within join with haversine distance of 10,000 meters (10 km)\nawait tableA.joinGeo(tableB, \"within\", {\n  distance: 10000,\n  distanceMethod: \"haversine\"\n});\n// Log the joined table\nawait tableA.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I chain reducePrecision with other methods in a single flow?","completion":"Yes, you can chain reducePrecision with other operations like summarizing or filtering:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reduce precision and then log the table\nawait table.reducePrecision(2);\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What if my geometry column has a custom name? How do I tell length to use that column?","completion":"Specify the geometry column name using the column option:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data that contains line geometries in a column named \"routeGeom\"\nawait table.loadGeoData(\"./routes.geojson\");\n// Compute the length using the \"routeGeom\" column and store it in \"routeLength\"\nawait table.length(\"routeLength\", { column: \"routeGeom\" });\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load a local .geojson file using loadGeoData?","completion":"The method automatically flips coordinates to [latitude, longitude] for .geojson files.\n\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load a local .geojson file (coordinates automatically flipped)\nawait table.loadGeoData(\"./data.geojson\");\n// We close everything\nawait sdb.done();```"}
{"prompt":"How can I write my table data to a compressed JSON file?","completion":"Here’s how you can write your table data to a compressed JSON file:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./my-data.csv\");\n// Write to JSON with GZIP compression\nawait table.writeData(\"./output.json\", { compression: true });\n// Close\nawait sdb.done();\n```"}
{"prompt":"How can I handle errors when using `updateWithJS`?","completion":"You can wrap your modifier function in a try-catch block. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start the SimpleDB instance\nconst sdb = new SimpleDB();\n// Create and load the table\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\");\n// Update with error handling\ntry {\n  await table.updateWithJS((rows) => {\n    const modifiedRows = rows.map((d) => ({\n      ...d,\n      // Perform modifications that might throw errors\n      calculatedValue: d.value1 + d.value2,\n    }));\n    return modifiedRows;\n  });\n} catch (error) {\n  console.error(\"Error updating table:\", error);\n}\n// Log the table\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I write the data from my table to a CSV file?","completion":"Here's how you can write the table's data to a CSV file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a CSV file\nawait table.writeData(\"./output.csv\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify custom missing values for a column?","completion":"Here’s how to remove rows where the 'age' column is missing or equals -1:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We remove rows with custom missing values in the 'age' column\nawait table.removeMissing({ columns: \"age\", missingValues: [-1] });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify a particular column to use for calculating the bounding box?","completion":"Here's how you can specify a column for bounding box calculation:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We get the bounding box from the 'myGeom' column\nconst areaBbox = await table.getBoundingBox(\"myGeom\");\n// We log the bounding box\nconsole.log(areaBbox);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geometries to WGS84 and get latitude/longitude order?","completion":"Reproject to WGS84 (EPSG:4326) and the library will output [latitude, longitude] order:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reproject to WGS84\nawait table.reproject(\"WGS84\");\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does hasTable return if the table does not exist?","completion":"If the table is not present, the promise resolves to `false`:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Attempt to check a non‑existent table\nconst exists = await sdb.hasTable(\"nonexistent_table\");\nconsole.log(exists); // Output: false\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the intersection of two geometry columns in my table?","completion":"Here's how you can compute the intersection of two geometry columns and store the result in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the intersection of geometries in 'geomA' and 'geomB' columns,\n// storing results in 'intersectGeom'\nawait table.intersection(\"geomA\", \"geomB\", \"intersectGeom\");\n// We log the first rows to see the intersection data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What if multiple rows match the condition? How can I avoid an error?","completion":"Use the `noCheck` option to suppress errors when multiple rows match. For example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"orders\");\n// We load data from the file\nawait table.loadData(\"./orders.csv\");\n// We get a row where status is 'active', but avoid error if multiple rows match\nconst activeRow = await table.getRow(`status = 'active'`, { noCheck: true });\nconsole.log(activeRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I set the bar chart width to 60 characters?","completion":"You can adjust the bar chart width by setting the `width` option to 60:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from an array\nawait table.loadArray([\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n]);\n// We set the width to 60\nawait table.logBarChart(\"category\", \"value\", {\n  width: 60,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create deciles from a specific column?","completion":"Here's how you can create deciles from a specific column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We assign deciles to 'column1' and store in 'decileColumn'\nawait table.quantiles(\"column1\", 10, \"decileColumn\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I retrieve data using a custom query?","completion":"Yes, you can retrieve data by setting `returnDataFrom` to \"query\":\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load some sample data\nconst table = sdb.newTable(\"sales\");\nawait table.loadData(\"./sales.csv\");\n// Execute a query and return the results\nconst recentSales = await sdb.customQuery(\n  \"SELECT * FROM sales WHERE year > 2020\",\n  { returnDataFrom: \"query\" }\n);\nconsole.log(recentSales);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace null values in 'columnA' with zero?","completion":"Here's how you can replace nulls with zeros in 'columnA':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Replace null values in 'columnA' with zero\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    columnA: d.columnA === null ? 0 : d.columnA,\n  }));\n  return modifiedRows;\n});\n// We log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I compute the perimeter using a specific geometry column named 'landParcelGeom' and store the result in a new column named 'landParcelPerimeter'?","completion":"Here's how you can compute the perimeter using a specific geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// We compute the perimeter using the 'landParcelGeom' column\nawait table.perimeter(\"landParcelPerimeter\", { column: \"landParcelGeom\" });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the proportion of each value in a column relative to the total sum of that column?","completion":"You can compute the proportion of each value in a column relative to the total sum by calling `proportionsVertical` on that column.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Compute proportions of 'revenue' relative to the total revenue\nawait table.proportionsVertical(\"revenue\", \"revenue_perc\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I prevent Google Sheets from guessing data types?","completion":"Set `raw` to true to disable data type guessing:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We export without data type guessing\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  raw: true\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I enable local caching of embeddings to avoid reprocessing?","completion":"Here's how you can enable local caching of embeddings to avoid reprocessing:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data with a 'food' column\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n  { food: \"pasta\" },\n  { food: \"salad\" },\n  { food: \"tacos\" },\n]);\n// Generate embeddings with caching enabled\nawait table.aiEmbeddings(\"food\", \"embeddings\", {\n  cache: true,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I identify open linestrings in my data?","completion":"Use `isClosedGeo` to detect open linestrings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./linestrings.geojson\");\n// We check if linestrings are closed and store results in 'isClosed' column\nawait table.isClosedGeo(\"isClosed\");\n// We log the first rows to see which are open (false)\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I load an empty array?","completion":"Loading an empty array will create an empty table. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Create an empty array to load\nconst data: Record<string, unknown>[] = [];\n// Load the empty array into the table\nawait table.loadArray(data);\n// You can add data later if needed\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I select 50 rows and store them in a new table named 'important_data'?","completion":"Here's how you can select 50 rows and store them in a new table named 'important_data':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We select 50 rows and store them in a new table named 'important_data'\nconst importantData = await table.selectRows(50, { outputTable: \"important_data\" });\n// We log the new table to see the results\nawait importantData.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I summarize the 'sales' column grouped by 'region', calculating both the mean and the sum?","completion":"Here's how you can summarize the 'sales' column grouped by 'region', calculating both the mean and the sum:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We summarize 'sales' by 'region' with mean and sum\nawait table.summarize({ values: \"sales\", categories: \"region\", summaries: [\"mean\", \"sum\"] });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the number of bins in the histogram?","completion":"You can set the number of bins by passing the `bins` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.logHistogram(\"age\", { bins: 20 });\nawait sdb.done();\n```"}
{"prompt":"What data type will be stored in the `newColumn` after calling the `inside` method?","completion":"The `inside` method stores boolean values in the `newColumn`: `TRUE` if all points of a geometry in `column1` lie inside a geometry in `column2`, and `FALSE` otherwise.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We check if geometries in 'pointGeom' are inside 'polygonGeom', storing results in 'isInsidePolygon'\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select a table using a SimpleTable instance?","completion":"Here's how to select a table using a SimpleTable instance, which is useful when you have a reference to the table object:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create a table named \"employees\"\nconst employeesTable = sdb.newTable(\"employees\");\n// Select the table using the instance\nawait sdb.selectTables(employeesTable);\nawait sdb.done();\n```"}
{"prompt":"How do I add the source file name as a new column in the table?","completion":"Set the `fileName` option to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\", { fileName: true });\nawait sdb.done();\n```"}
{"prompt":"How can I compute vertical proportions within each category defined by a single column?","completion":"To compute proportions within each category defined by a single column, pass the column name to the `categories` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"salesTable\");\nawait table.loadData(\"./sales.csv\");\n// Compute proportions of 'revenue' within each 'region'\nawait table.proportionsVertical(\"revenue\", \"revenuePerc\", {\n  categories: \"region\",\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What is the expected order of coordinates in the bounding box?","completion":"The bounding box coordinates are returned in `[minLat, minLon, maxLat, maxLon]` order. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load the geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We get the bounding box\nconst bbox = await table.getBoundingBox();\n// We log the bounding box\nconsole.log(bbox); // e.g., [45.0, -75.0, 46.0, -73.0]\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a geometry column and none is automatically detected?","completion":"If no geometry column is found, the method will throw an error. Ensure your data contains a column with line geometries or explicitly provide the column name using the `column` option.\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./my-lines.csv\");\n// This will error if no geometry column is detected\ntry {\n  await table.length(\"length_m\");\n} catch (e) {\n  console.error(\"No geometry column found:\", e.message);\n}\nawait sdb.done();\n```"}
{"prompt":"What does the cleanColumnNames method do?","completion":"The cleanColumnNames method removes non‑alphanumeric characters from column names and converts them to camelCase. Here is how you can load a CSV file, clean its column names, and log the result:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We clean column names\nawait table.cleanColumnNames();\n// We log the table to see cleaned names\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I restructure my table to create new columns from existing data?","completion":"Here's how you can use the `wider` method to restructure your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We restructure the table, pivoting 'Year' into new columns with 'Employees' as values\nawait table.wider(\"Year\", \"Employees\");\n// We log the table to see the restructured data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I remove duplicates based on multiple columns?","completion":"Yes, you can specify an array of column names. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We remove duplicates based on 'firstName' and 'lastName'\nawait table.removeDuplicates({ on: [\"firstName\", \"lastName\"] });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I write a table's data to a Parquet file?","completion":"Here's how to write data to a Parquet file (using .parquet extension):\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We write the data to a Parquet file\nawait table.writeData(\"./output.parquet\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select 75 rows and store them in a new table named 'top_customers'?","completion":"Here's how you can select 75 rows and store them in a new table named 'top_customers':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We select 75 rows and store in new table named 'top_customers'\nconst topCustomersTable = await table.selectRows(75, { outputTable: \"top_customers\" });\n// We log the new table to see the selected rows\nawait topCustomersTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create an index on the embeddings column for faster similarity searches?","completion":"Generate embeddings and create a VSS index for fast similarity search:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadArray([\\n  { food: \"pizza\" },\\n  { food: \"sushi\" },\\n  { food: \"burger\" },\\n]);\\nawait table.aiEmbeddings(\"food\", \"embeddings\", { createIndex: true });\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How can I aggregate geometries by a specific category column, such as 'country', using the 'union' method?","completion":"Here's how you can aggregate geometries by a category column using the 'union' method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We aggregate geometries by 'country' and compute their union\nawait table.aggregateGeo(\"union\", { categories: \"country\" });\n// We log the first rows to see the aggregated data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert a single column of text data to uppercase?","completion":"Here's how to convert a single column to uppercase using the `upper` method:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Convert the 'city' column to uppercase\nawait table.upper(\"city\");\n// Log the results to verify\nawait table.logTable();\n// We close everything\nawait sdb.done();```"}
{"prompt":"How can I select 20 rows after skipping the first 10 rows?","completion":"Here's how you can select 20 rows after skipping the first 10 rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We select 20 rows after skipping the first 10\nawait table.selectRows(20, { offset: 10 });\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a buffer around geometries in my table and store the results in a new column?","completion":"Here's how you can create a buffer around geometries and store the results in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We create a buffer of 1 unit around the geometries, storing the results in 'bufferedGeom'\nawait table.buffer(\"bufferedGeom\", 1);\n// We log the first rows to see the buffered data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the column contains non-numeric values?","completion":"The bins method expects numeric values; non-numeric entries will cause a runtime error.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data with a string column\\nawait table.loadData(\"./data-with-strings.csv\");\\n// Attempt to assign bins (will throw an error if values are not numbers)\\ntry {\\n  await table.bins(\"column1\", 10, \"bins\");\\n} catch (e) {\\n  console.error(\"Error assigning bins:\", e);\\n}\\n// Close\\nawait sdb.done();\\n```"}
{"prompt":"What data types are supported by the `setTypes` method?","completion":"The `setTypes` method supports the following data types: `integer`, `float`, `number`, `string`, `date`, `time`, `datetime`, `datetimeTz`, `bigint`, `double`, `varchar`, `timestamp`, `timestamp with time zone`, `boolean`, and `geometry`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We set the data types for the columns\nawait table.setTypes({\n  id: \"integer\",\n  name: \"string\",\n  date: \"date\",\n  price: \"float\",\n  is_active: \"boolean\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the schema of a table?","completion":"Here is how you can retrieve the schema:\n```javascript\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data so the table has columns\nawait table.loadData(\"./data.csv\");\n// Get the schema of the table\nconst schema = await table.getSchema();\n// Log the schema to the console\nconsole.log(schema);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the variance of a numeric column without rounding the result?","completion":"Here's how you can get the variance of a column without rounding:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We get the variance of the 'data' column (without rounding)\nconst dataVariance = await table.getVar(\"data\");\nconsole.log(dataVariance);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I update a 'status' column to 'active' if a boolean column 'isActive' is true, and to 'inactive' otherwise?","completion":"Here's how you can conditionally update a column based on another column's value:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Set 'status' to 'active' where 'isActive' is true\nawait table.updateColumn(\n  \"status\",\n  `CASE WHEN isActive THEN 'active' ELSE 'inactive' END`,\n);\n// We log the first rows to see the updated data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve all tables in my database?","completion":"Here's how you can get all tables in your database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create some tables for demonstration\nconst table1 = sdb.newTable(\"table1\");\nconst table2 = sdb.newTable(\"table2\");\n// Get all tables\nconst tables = await sdb.getTables();\nconsole.log(\"List of tables:\", tables);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"After assigning bins, how can I view the new bin column?","completion":"Use the `logTable` method to print the table, which will include the newly created bin column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Assign bins to the 'column1' column\nawait table.bins(\"column1\", 10, \"bins\");\n// Log the table to see the 'bins' column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows based on multiple columns simultaneously?","completion":"Here is how to remove rows where city is 'Montreal' and job is either 'accountant' or 'developer':\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\n// Remove rows where city is 'Montreal' and job is 'accountant' or 'developer'\nawait table.remove({ city: 'Montreal', job: ['accountant', 'developer'] });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with a default name?","completion":"Here's how you can create a new table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst dataTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove a table from the database?","completion":"You can call the removeTable method on the SimpleTable instance. Here's an example:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data if needed\nawait table.loadData(\"./data.csv\");\n// Remove the table from the database\nawait table.removeTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check if two geometries do not intersect?","completion":"You can use the `intersect` method and then filter for FALSE results. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Check for intersections and store results in 'doIntersect'\nawait table.intersect(\"geomA\", \"geomB\", \"doIntersect\");\n// Filter to show only non-intersecting rows\nawait table.filterRow({\n  column: \"doIntersect\",\n  value: false,\n  operator: \"equals\"\n});\n// We log the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nThis will show only rows where geometries do not intersect."}