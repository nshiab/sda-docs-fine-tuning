{"prompt":"How do I get the first row of a table without any filtering?","completion":"Use the `getFirstRow` method without any parameters to retrieve the very first row of the table.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Get the first row without filtering\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\nawait sdb.done();\n```"}
{"prompt":"Is it possible to update a string column using functions like LEFT?","completion":"Yes, you can use SQL string functions in your updates:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Update 'column1' with first 5 characters of 'column2'\nawait table.updateColumn(\"column1\", \"LEFT(column2, 5)\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How to load only the first 100 rows of a CSV file?","completion":"Here's how you can load only the first 100 rows of a CSV file:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load the first 100 rows of a CSV file\nawait table.loadData(\"./some-data.csv\", { limit: 100 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I simplify geometries using the default settings?","completion":"Here's how to simplify geometries with the default column and boundary simplification:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify geometries with default settings and tolerance of 0.1\nawait table.simplify(0.1);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I remove multiple columns from my table?","completion":"Here's how you can remove multiple columns at once:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Let's assume we have some data loaded into the table\nawait table.loadData(\"./data.csv\");\n// Remove 'column1' and 'column2'\nawait table.removeColumns([\"column1\", \"column2\"]);\n// Log the updated table to verify the removal\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round the skewness to 3 decimal places?","completion":"To round the result to 3 decimal places, pass the decimals option. Here's an example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the skewness of the 'revenue' column, rounded to 3 decimals\nconst revenueSkew = await table.getSkew(\"revenue\", { decimals: 3 });\nconsole.log(\"Rounded skewness of revenue:\", revenueSkew);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is the return value of `getNbValues` always an integer?","completion":"Yes, the `getNbValues` method returns an integer representing the total number of values in the table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./my-data.csv\");\n// Get the total number of values\nconst nbValues = await table.getNbValues();\nconsole.log(typeof nbValues); // Output: number\nconsole.log(Number.isInteger(nbValues)); // Output: true\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I include data types when logging a table?","completion":"Here's how to enable type display in logs:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with types enabled\nconst sdb = new SimpleDB({\n  types: true\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write the data from my table to a Google Sheet?","completion":"Here's how you can write the table data to a Google Sheet:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a Google Sheet\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the area of geometries in square meters and store it in a new column?","completion":"Here's how you can calculate the area in square meters and store it in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the area in square meters and store it in 'area_m2'\nawait table.area(\"area_m2\");\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fix invalid geometries in the default geometry column?","completion":"Here's how to fix invalid geometries in the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We fix invalid geometries in the default geometry column\nawait table.fixGeo();\n// We log the table to verify fixed geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I efficiently clone a large table with specific data?","completion":"For large tables, consider using both filtering and column selection:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"originalTable\");\n// Assume we have loaded some data into tableA\nawait tableA.loadData(\"./large_data.csv\");\n// Clone the large table with filtered rows and specific columns\nconst tableB = await tableA.cloneTable({\n  outputTable: \"filtered_large_table\",\n  conditions: \"created_date >= '2023-01-01'\",\n  columns: [\"id\", \"name\", \"created_date\"]\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `rewind` option do in the `getGeoData` method?","completion":"The `rewind` option rewinds the coordinates of polygons to follow the spherical winding order, which is important for compatibility with libraries like D3.js. Here's how to use it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We get the GeoJSON data with rewound coordinates\nconst rewoundGeojson = await table.getGeoData(undefined, { rewind: true });\n// We log the GeoJSON data\nconsole.log(rewoundGeojson);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle files with different column structures in the same directory?","completion":"Use unifyColumns to standardize columns across files:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myData\");\nawait table.loadDataFromDirectory(\"./data/\", { unifyColumns: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I handle non-numeric values when updating a numeric column with updateWithJS?","completion":"Replace non-numeric values with null to avoid errors.\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./mixed.csv\");\n// Update \"score\" column, setting non-numeric to null\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    score: typeof d.score === \"number\" ? d.score : null,\n  }));\n  return modifiedRows;\n});\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens to tables that are not selected?","completion":"After calling selectTables, only the specified tables remain in the database; all others are removed. For example, if you select only the 'employees' table, attempting to access 'customers' will result in an error because it has been removed.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// Load two tables\\nconst employeesTable = sdb.newTable('employees');\\nawait employeesTable.loadData('./employees.csv');\\nconst customersTable = sdb.newTable('customers');\\nawait customersTable.loadData('./customers.csv');\\n// Select only the employees table\\nawait sdb.selectTables('employees');\\n// Trying to log the customers table will throw an error\\ntry {\\n  await customersTable.logTable();\\n} catch (e) {\\n  console.error('Customers table has been removed:', e.message);\\n}\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I convert a column named 'price' to a float data type?","completion":"Here's how you can convert the 'price' column to a float data type:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We convert the 'price' column to a float\nawait table.convert({ price: \"float\" });\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I trim a specific character, such as an asterisk, from multiple columns?","completion":"You can specify the character to trim and apply it to an array of columns. For example, to remove leading and trailing asterisks from the columns `productCode` and `sku`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.trim(['productCode', 'sku'], { character: '*', method: 'trim' });\nawait sdb.done();\n```"}
{"prompt":"How can I use aiQuery to calculate the average salary by department?","completion":"Here's how to compute average salary by department:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"employees\");\nawait table.loadData(\"./employees.csv\");\nawait table.aiQuery(\"Give me the average salary by department\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I specify the encoding of the files in the directory?","completion":"You can use the `encoding` option to specify the encoding. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the directory, specifying the encoding\nawait table.loadDataFromDirectory(\"./my_data/\", { encoding: \"utf-16\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load a single local CSV file into a SimpleTable?","completion":"Load a local CSV file by calling `loadData` with the file path:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a local CSV file\nawait table.loadData(\"./some-data.csv\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I round the result of getMean to a specific number of decimal places?","completion":"Yes, you can specify the number of decimals. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a table and load data\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\");\n// Get mean of 'salary' rounded to 2 decimals\nconst avgSalary = await table.getMean(\"salary\", { decimals: 2 });\nconsole.log(\"Average salary:\", avgSalary);\n// Close resources\nawait sdb.done();\n```\n"}
{"prompt":"How can I use Ollama as the AI backend?","completion":"Set the `OLLAMA` environment variable to true or pass an Ollama instance via the `ollama` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([{ name: \"Marie\" }]);\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  { ollama: true, model: \"llama2\" }\n);\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where a column value is null?","completion":"Here's how you can remove rows where the middleName column is null:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data\\nawait table.loadData(\\\"./data.csv\\\");\\n// Remove rows where middleName is null\\nawait table.remove({ middleName: null });\\n// Log the table\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How do I calculate the standard deviation of a column named 'sales' in my table?","completion":"Here's how you can calculate the standard deviation of the 'sales' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./sales_data.csv\");\n// Calculate the standard deviation of the 'sales' column\nconst salesStdDev = await table.getStdDev(\"sales\");\nconsole.log(salesStdDev); // e.g., 10.5\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows from my table based on specific values in certain columns?","completion":"You can use the `remove` method to filter out rows that match specific criteria. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'department' is 'finance' or 'marketing', AND 'status' is 'active'\nawait table.remove({ department: ['finance', 'marketing'], status: 'active' });\n// Log the remaining data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set types after loading data into a table?","completion":"If you load data first and then want to set types, you can call setTypes after loadData. Example:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\nawait table.setTypes({\n  name: 'string',\n  salary: 'integer',\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax to filter my data?","completion":"Yes, you can use JavaScript operators like === and &&. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get data filtered by JavaScript condition\nconst filteredData = await table.getData({ conditions: \"category === 'Book' && price > 10\" });\nconsole.log(filteredData);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Does `logColumns` return the table instance? How can I use that?","completion":"Yes, `logColumns` resolves to the `SimpleTable` instance, allowing you to use the returned value for further operations.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Capture the returned table and perform another action\nconst returnedTable = await table.logColumns();\nawait returnedTable.logTable(); // e.g., log the full table after logging columns\nawait sdb.done();\n```"}
{"prompt":"How can I compute the correlation between two specific columns, 'column1' and 'column2'?","completion":"Here's how you can compute the correlation between 'column1' and 'column2':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute the correlation between 'column1' and 'column2'\nawait table.correlations({ x: \"column1\", y: \"column2\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I limit the number of rows logged when displaying a table?","completion":"You can set the `nbRowsToLog` option to control the number of rows logged:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create table with logging options\nconst table = sdb.newTable(\"myTable\", {}, sdb, { nbRowsToLog: 5 });\n// Load data and log table\nawait table.loadData(\"./data.csv\");\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the variance of a numeric column and round the result to two decimal places?","completion":"You can round the variance to two decimal places by setting `decimals: 2` in the options. Here's an example:\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file (assuming it has a numeric column named 'values')\nawait table.loadData(\"./data.csv\");\n// We get the variance of the 'values' column, rounded to 2 decimal places\nconst variance = await table.getVar(\"values\", { decimals: 2 });\nconsole.log(variance);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I reproject geometries from EPSG:4326 to EPSG:3347 when I know the original projection?","completion":"Specify the original projection using the 'from' option in the reproject method:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Reproject from EPSG:4326 to EPSG:3347\nawait table.reproject(\"EPSG:3347\", { from: \"EPSG:4326\" });\n// We close everything\nawait sdb.done();```"}
{"prompt":"How can I create an index on the embeddings column to speed up similarity searches?","completion":"Here is how you can create an index on the embeddings column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load sample data\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n  { food: \"pasta\" },\n  { food: \"salad\" }\n]);\n// Generate embeddings for the \"food\" column\nawait table.aiEmbeddings(\"food\", \"embeddings\");\n// Find the 3 most similar foods to \"italian food\" and create an index\nconst similarFoods = await table.aiVectorSimilarity(\n  \"italian food\",\n  \"embeddings\",\n  3,\n  { createIndex: true }\n);\n// Log the results\nawait similarFoods.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to interpret the bin labels created by bins?","completion":" The bin labels are formatted as [start-end]. For example, with interval 10 and start 5, the first bin is [5-14]. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.bins(\"column1\", 10, \"bins\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"I have a dataset with temperature readings. How can I find the highest temperature recorded?","completion":"Here's how you can find the maximum temperature:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./temperatures.csv\");\n// Get the maximum temperature from the 'temperature' column\nconst maxTemp = await table.getMax(\"temperature\");\nconsole.log(`The highest temperature recorded is: ${maxTemp}`);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reduce precision for a specific geometry column?","completion":"Specify the column name in the options object.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reduce precision of the 'myGeom' column to 2 decimal places\nawait table.reducePrecision(2, { column: \"myGeom\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I close the database connection and clean up resources?","completion":"Here's how you can close the database connection and clean up resources:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We close the database connection and clean up resources\nawait sdb.done();\n```"}
{"prompt":"What if I want to round values down instead of the default rounding?","completion":"Use the floor method to round values down:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('sales');\nawait table.loadData('./sales.csv');\nawait table.round('price', { method: 'floor' });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I enable logging of data types when logging a table?","completion":"You can enable logging of data types by setting the `types` option to `true`. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ types: true });\n// Data types will be included when logging a table\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax for the conditions instead of SQL?","completion":"Yes, you can use JavaScript operators like `===` and `&&`:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the first row where category is 'Book' and price > 20\nconst firstBookExpensive = await table.getFirstRow({\n  conditions: \"category === 'Book' && price > 20\"\n});\nconsole.log(firstBookExpensive);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I create an index on the embeddings column for faster searches?","completion":"Yes, set createIndex to true when generating embeddings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadArray([\n  { text: \"Indexed embeddings example\" },\n]);\n// Create an index on the embeddings column\nawait table.aiEmbeddings(\"text\", \"embeddings\", {\n  createIndex: true,\n});\nawait sdb.done();\n```\n"}
{"prompt":"Can I log the bottom rows after filtering the table?","completion":"Yes, filter first and then call `logBottom`. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Filter rows where the \"status\" column equals \"active\"\nawait table.filter({ status: \"active\" });\n// Log the last 5 rows of the filtered result\nawait table.logBottom(5);\nawait sdb.done();\n```"}
{"prompt":"How do I store the aggregated geometries in a new table instead of overwriting the current one?","completion":"Set the `outputTable` option to `true` or provide a table name:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Aggregate geometries and store results in a new table\nconst newTable = await table.aggregateGeo(\"union\", { outputTable: \"aggregatedGeoms\" });\n// Log the new table\nawait newTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a new instance of SimpleDB and a table?","completion":"Here's how to create a SimpleDB instance and a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a new SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table named 'myTable'\nconst table = sdb.newTable(\"myTable\");\n```"}
{"prompt":"How can I join on multiple columns?","completion":"Specify an array of column names in commonColumn:\\n```ts\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst tableA = sdb.newTable(\"tableA\");\\nconst tableB = sdb.newTable(\"tableB\");\\nawait tableA.loadData(\"./dataA.csv\");\\nawait tableB.loadData(\"./dataB.csv\");\\n// Join on \"name\" and \"category\"\\nawait tableA.join(tableB, { commonColumn: [\"name\", \"category\"] });\\n// Log result\\nawait tableA.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How can I add a new geometry column that stores a buffered geometry with a specific projection?","completion":"To add a buffered geometry column 'buffered' with a 100-unit buffer and set its projection, use:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData('./geodata.geojson');\n// Add new geometry column 'buffered' with buffer distance 100\nawait table.addColumn('buffered', 'geometry', 'ST_Buffer(geom, 100)', {\n  projection: table.projections.geom,\n});\n// Log table to see new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the distance between two geometry columns using the default SRS units?","completion":"Here’s how to compute the distance between two geometry columns using the default SRS units:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.distance('geomA', 'geomB', 'distance_srs');\nawait sdb.done();\n```"}
{"prompt":"How do I load only the first 100 rows of my data file?","completion":"Here's how to limit the loaded rows to 100:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./large-data.csv\", { limit: 100 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I remove a single table from my database by its name?","completion":"Here's how you can remove a table by its name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove the table named 'employees'\nawait sdb.removeTables(\"employees\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve an existing table by name using SimpleDB?","completion":"To retrieve an existing table by name, use the `getTable` method with the table's name.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We retrieve the \"employees\" table\nconst employees = await sdb.getTable(\"employees\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I customize the behavior of SimpleDB when it's initialized?","completion":"Yes, you can customize SimpleDB's behavior during initialization by passing options to the constructor. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with custom options\nconst sdb = new SimpleDB({\n  debug: true, // Enable debugging output\n  nbRowsToLog: 20, // Set the number of rows to log by default\n});\n// Perform database operations...\nawait sdb.done();\n```"}
{"prompt":"What should I do if my code references old column names after cleaning?","completion":"You should either rename your columns before cleaning or update your code to use the new cleaned names. Here's an example of renaming before cleaning:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Original column name\nawait table.addColumn(\"old_column_name\");\n// Rename to desired name before cleaning\nawait table.renameColumn(\"old_column_name\", \"newColumnName\");\n// Clean the column names\nawait table.cleanColumnNames();\n// Now use the cleaned name in your code\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to skip more rows than exist in my table?","completion":"Here's how you can try to skip more rows than exist in your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We skip 1000 rows, even if the table has fewer\nawait table.skip(1000);\n// We log the table to see the result (it will be empty if the table had fewer than 1000 rows)\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable caching of the generated SQL query?","completion":"Set the `cache` option to true so the query is stored in `.journalism-cache` for future reuse.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./employees.csv\");\n// Cache the generated query\nawait table.aiQuery(\"Show total sales per region\", { cache: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I load data from a remote Parquet file?","completion":"Here's how you can load data from a remote Parquet file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"https://example.com/my-data.parquet\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add a geometry column that stores the centroid of an existing geometry column?","completion":"Use the geometry type and provide the projection option:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Add a new geometry column 'centroid' using ST_Centroid of 'country'\nawait table.addColumn(\"centroid\", \"geometry\", `ST_Centroid(\"country\")`, {\n  projection: table.projections.country,\n});\n// Log the table to see the new geometry column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify a particular column containing the geometries when checking for closed geometries?","completion":"You can specify the geometry column using the `options` parameter. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a new column named 'boundaryClosed' based on the 'boundaryGeom' column\nawait table.isClosedGeo(\"boundaryClosed\", { column: \"boundaryGeom\" });\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don’t specify the geometry column in `isClosedGeo`?","completion":"If you omit the `options.column` parameter, the method will automatically try to find a geometry column in the table. Here’s an example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data that contains a geometry column\nawait table.loadData(\"./geo-data.csv\");\n// Call isClosedGeo without specifying a column; it will infer the geometry column\nawait table.isClosedGeo(\"closedFlag\");\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I merge data where geometries are within a certain distance of each other?","completion":"Use the `joinGeo` method with 'within' and specify the distance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load your geospatial data into both tables\nawait tableA.loadGeoData(\"./dataA.geojson\");\nawait tableB.loadGeoData(\"./dataB.geojson\");\n// Join the tables where geometries are within 10 kilometers (Haversine method)\nawait tableA.joinGeo(tableB, \"within\", {\n  distance: 10,\n  distanceMethod: \"haversine\",\n  unit: \"km\"\n});\n// Log the results\nawait tableA.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I compute the distance between two geometry columns using the default SRS units?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./geodata.csv\");\n// We compute distance between 'geomA' and 'geomB' in SRS units, store in 'distance_srs'\nawait table.distance('geomA', 'geomB', 'distance_srs');\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows based on a date comparison?","completion":"Use a date string in the filter condition. For example, to keep rows where `created_at` is on or after January 1, 2022:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Filter rows where created_at >= '2022-01-01'\nawait table.filter(`created_at >= '2022-01-01'`);\n// Log the filtered table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I check the data type of a specific column?","completion":"To check the data type of a specific column, retrieve the schema and look up the column by name:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\"./data.csv\");\\nconst schema = await table.getSchema();\\nconst columnName = \"price\";\\nconst columnInfo = schema.find(col => col.name === columnName);\\nif (columnInfo) {\\n  console.log(`The column '${columnName}' has type: ${columnInfo.type}`);\\n} else {\\n  console.log(`Column '${columnName}' not found.`);\\n}\\nawait sdb.done();\\n```"}
{"prompt":"How do I write my table data to a Google Sheet?","completion":"You can write the table data to a Google Sheet by calling `toSheet` with the sheet URL.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Write the table data to the Google Sheet\nawait table.toSheet('https://docs.google.com/spreadsheets/d/.../edit#gid=0');\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `logProjections` method return?","completion":"The `logProjections` method returns a promise that resolves to the `SimpleTable` instance itself. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We log the projections and store the returned table\nconst returnedTable = await table.logProjections();\n// We can then use the returnedTable if needed\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute vertical proportions within multiple categories simultaneously?","completion":"To compute proportions within combinations of multiple categories, provide an array of column names to the `categories` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"salesTable\");\nawait table.loadData(\"./sales.csv\");\n// Compute proportions of 'revenue' within each combination of 'region' and 'product_type'\nawait table.proportionsVertical(\"revenue\", \"revenuePerc\", {\n  categories: [\"region\", \"product_type\"],\n});\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I customize the map appearance using options.style?","completion":"You can customize the map appearance by passing a CSS string in options.style:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./CanadianProvincesAndTerritories.geojson\");\n\nconst mapFunction = (geoJsonData) =>\n  plot({\n    projection: { type: \"conic-conformal\", rotate: [100, -60], domain: geoJsonData },\n    marks: [geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" })],\n  });\n\nconst outputPath = \"./output/custom_style_map.png\";\n\nawait table.writeMap(mapFunction, outputPath, {\n  style: \"background: #f0f0f0; border: 1px solid #ccc;\",\n});\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows where the 'price' is less than 100 and the 'quantity' is 0?","completion":"Here's how you can remove rows where 'price' is less than 100 and 'quantity' is 0 using JavaScript syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows where price < 100 AND quantity === 0\nawait table.removeRows(\"price < 100 && quantity === 0\");\n// Log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the last 10 rows but keep them in their original order?","completion":"Use the `originalOrder` option set to `true`:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Get the last 10 rows in original order\nconst bottom10Original = await table.getBottom(10, { originalOrder: true });\nconsole.log(bottom10Original);\nawait sdb.done();\n```"}
{"prompt":"Can I write the database to a SQLite file instead of DuckDB?","completion":"Yes, you can export to a SQLite file like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Perform any operations on the database...\n// Write the database to a SQLite file\nawait sdb.writeDB(\"./my_exported_database.sqlite\");\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert my wide-format table with year columns into a long format using the `longer` method?","completion":"Here's how to restructure the table by stacking year columns into a long format:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file containing year columns\nawait table.loadData(\"./employees.csv\");\n// Restructure the table by stacking 2021, 2022, 2023 columns into 'year' and 'employees'\nawait table.longer([\"2021\", \"2022\", \"2023\"], \"year\", \"employees\");\n// Log the resulting table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle a situation where no rows match the condition?","completion":"Set `noCheck` to true to prevent an error when no rows match. For example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"customers\");\n// We load data from the file\nawait table.loadData(\"./customers.csv\");\n// We attempt to get a row with an ID that doesn't exist, using noCheck to avoid error\nconst missingRow = await table.getRow(`id = 9999`, { noCheck: true });\nconsole.log(missingRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the very last row of a table?","completion":"Here’s how to retrieve the very last row of a table.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Retrieve the last row without any filtering\nconst lastRow = await table.getLastRow();\n// Log the result\nconsole.log(lastRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set the maximum number of characters to display for text cells?","completion":"Set the `nbCharactersToLog` option to limit text cell display. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with character limit\nconst sdb = new SimpleDB({\n  nbCharactersToLog: 50\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve data using a SQL query?","completion":"Use `customQuery` with `returnDataFrom: \"query\"`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load sample data into a table\nconst table = sdb.newTable(\"employees\");\nawait table.loadData(\"./employees.csv\");\n// Execute query and return results\nconst highSalaryEmployees = await sdb.customQuery(\n  \"SELECT name, salary FROM employees WHERE salary > 50000\",\n  { returnDataFrom: \"query\" }\n);\nconsole.log(highSalaryEmployees);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a column across multiple categories?","completion":"Here's how you can clone a column across multiple categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Clone 'stock_price' as 'prev_price_by_stock_and_exchange', offsetting by 1 row within each 'stock_symbol' and 'exchange' category\nawait table.cloneColumnWithOffset(\n  \"stock_price\",\n  \"prev_price_by_stock_and_exchange\",\n  {\n    offset: 1,\n    categories: [\"stock_symbol\", \"exchange\"],\n  }\n);\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select multiple columns from my table?","completion":"Here's how to select multiple columns using an array of column names:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We select the 'name' and 'age' columns\nawait table.selectColumns([\"name\", \"age\"]);\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I prepend custom text before the data in the Google Sheet?","completion":"Use the `prepend` option to add text before the table data.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Write the table data with a prepended message\nawait table.toSheet('https://docs.google.com/spreadsheets/d/.../edit#gid=0', {\n  prepend: 'Report generated on:'\n});\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform linear regression within categories (e.g., by region) and store results in a new table?","completion":"Use the `categories` option and set `outputTable` to `true` to store results in a new table.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Compute linear regression within 'region' categories and store in a new table\nconst regressionTable = await table.linearRegressions({\n  categories: \"region\",\n  outputTable: true,\n});\n// Log the new table results\nawait regressionTable.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I use `fixGeo` on the default geometry column of a table?","completion":"Here’s how to call `fixGeo` on the default geometry column:\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Fix invalid geometries in the default geometry column\nawait table.fixGeo();\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter the data before logging, for example, to only show rows where the 'status' column is equal to 'active'?","completion":"Here's how you can filter the data before logging, showing only rows where 'status' is 'active':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We log rows where 'status' is 'active'\nawait table.logTable({ conditions: `status === 'active'` });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"After retrieving a table, how can I perform operations on it?","completion":"Once you have the `SimpleTable` instance, you can call its methods like `logTable` or `summarize`.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst sales = await sdb.getTable(\"sales\");\nawait sales.summarize({\n  values: \"amount\",\n  categories: \"region\",\n  summaries: [\"sum\", \"count\"],\n  decimals: 2,\n});\nawait sales.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I insert new rows into my table?","completion":"Here's how you can insert new rows into a table using the `insertRows` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Define the new rows to insert\nconst newRows = [\n  { letter: \"c\", number: 3 },\n  { letter: \"d\", number: 4 },\n];\n// Insert the new rows into the table\nawait table.insertRows(newRows);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve a row where the 'id' column is equal to 42 using JavaScript syntax?","completion":"You can use JavaScript syntax within the `getRow` method's conditions. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Get a row where 'id' is 42 (using JS syntax)\nconst rowById = await table.getRow(\"id === 42\");\nconsole.log(rowById);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I round multiple columns using a specific rounding method and number of decimal places?","completion":"Here's how you can round multiple columns using a specific rounding method and number of decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We round 'price' and 'quantity' to 1 decimal place using the ceiling method\nawait table.round([\"price\", \"quantity\"], { decimals: 1, method: \"ceiling\" });\n// We log the table to see the rounded values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the proportion of each value in a column relative to the total sum of that column?","completion":"You can compute the proportion of each value in a column relative to the total sum by calling `proportionsVertical` on that column.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Compute proportions of 'revenue' relative to the total revenue\nawait table.proportionsVertical(\"revenue\", \"revenue_perc\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I write JSON data with dates formatted as ISO strings?","completion":"Here’s how to write JSON data with dates formatted as ISO strings:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data from a CSV file\\nawait table.loadData('./my-data.csv');\\n// Write data to a JSON file with formatted dates\\nawait table.writeData('./output_dates.json', { formatDates: true });\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"Can I use JavaScript syntax for filtering conditions?","completion":"Yes, you can use JavaScript comparison operators in the conditions string.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"sales\");\nawait table.loadData(\"./sales.csv\");\n// Filter rows where price > 100 and category is 'Electronics'\nconst expensive = await table.getData({ conditions: \"price > 100 && category === 'Electronics'\" });\nconsole.log(expensive);\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the `decimals` option when calculating the mean?","completion":"If you don't specify the `decimals` option, the mean will be calculated without rounding. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We calculate the mean of the 'value' column without rounding\nconst meanValue = await table.getMean(\"value\");\nconsole.log(meanValue);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the total number of values in my table?","completion":"You can call getNbValues to retrieve the total count of values.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Get the total number of values\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I filter rows before getting the first one?","completion":"Yes, you can use conditions to filter rows. Here's an example using both SQL and JS syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get first row where category is 'Book' using SQL syntax\nconst firstRowSql = await table.getFirstRow({ conditions: \"category = 'Book'\" });\nconsole.log(firstRowSql);\n// Get first row where price is greater than 100 using JS syntax\nconst firstRowJs = await table.getFirstRow({ conditions: \"price > 100\" });\nconsole.log(firstRowJs);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round the computed distances to a specific number of decimal places?","completion":"Use the `decimals` option in the `distance` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create a new table\nconst table = sdb.newTable(\"geoTable\");\n// Load data in EPSG:4326\nawait table.loadGeoData(\"./points.geojson\");\n// Compute distance with 2 decimal places\nawait table.distance(\"point1\", \"point2\", \"distance_rounded\", { method: \"haversine\", decimals: 2 });\n// Log the results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I trim multiple columns at once?","completion":"Yes, you can pass an array of column names to trim multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Trim whitespace from 'description' and 'notes' columns\nawait table.trim([\"description\", \"notes\"]);\n// Log the modified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to clone a column that doesn't exist?","completion":"If the original column does not exist, an error will be thrown. Always ensure the original column exists before cloning.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Attempting to clone a non-existent column will throw an error\ntry {\n  await table.cloneColumn(\"nonExistentCol\", \"newCol\");\n} catch (error) {\n  console.error(\"Error: Original column does not exist.\", error);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the data types of the query parameters?","completion":"You can use the `types` option to specify the data types of the query parameters. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Execute a query with specified types\nawait sdb.customQuery(\n  \"SELECT * FROM my_table WHERE my_column = $1\",\n  { types: { \"$1\": \"TEXT\" } },\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I save my data as a JSON file?","completion":"Use the `.json` extension with `writeData`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We write the data to a JSON file\nawait table.writeData(\"./output.json\");\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What data types can I use when adding a new column?","completion":"You can use JavaScript types like 'number' or 'string', or SQL types like 'integer', 'float', 'varchar', etc. Here's an example using the 'integer' type:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Add a new column 'new_column' as an integer\nawait table.addColumn(\"new_column\", \"integer\", \"1\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify the name of the row number column?","completion":"Yes, you can specify any name for the new column. For example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Add a new column named 'id' with row numbers\nawait table.addRowNumber(\"id\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a separator when concatenating columns? For example, I want to concatenate 'city' and 'state' with a comma and a space in between.","completion":"Yes, you can specify a separator. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load some data (replace with your actual data loading)\nawait table.loadData('./my-data.csv');\n// Concatenate 'city' and 'state' into 'location', separated by a comma and space\nawait table.concatenate(['city', 'state'], 'location', { separator: ', ' });\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What kind of information does `getDescription` return for each column?","completion":"The `getDescription` method returns an array of objects, where each object represents a column and contains descriptive statistics like data type, number of null values, and distinct values. Here's how to access it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the description of the table\nconst description = await table.getDescription();\n// We log the description to the console\nconsole.table(description);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I write the data from my table to a CSV file?","completion":"Here's how you can write the table's data to a CSV file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a CSV file\nawait table.writeData(\"./output.csv\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"If I'm using a file-based database, what additional action does `done()` perform?","completion":"If the database is file-based, the `done()` method also compacts the database file to optimize storage. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ file: \"./my_database.db\" });\n// Perform database operations...\n// Close the database connection, which saves changes to the specified file and compacts it\nawait sdb.done();\n```"}
{"prompt":"How can I store the summary results in a new table with a generated name?","completion":"Set the `outputTable` option to `true` to let the library generate a name for the new table.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\");\nconst columns = await table.getColumns();\nconst summaryTable = await table.summarize({ values: columns, outputTable: true });\nawait summaryTable.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows where the 'category' is either 'Electronics' or 'Appliances'?","completion":"Here's how you can remove rows based on multiple possible values in the 'category' column using the `||` operator:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove rows where 'category' is 'Electronics' OR 'Appliances'\nawait table.removeRows(\"category === 'Electronics' || category === 'Appliances'\");\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I clone a very large table?","completion":"Cloning large tables can be slow because the entire dataset is copied; consider filtering rows or columns to reduce the size.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// Clone only the first 1000 rows to speed up the operation\nconst tableB = await tableA.cloneTable({ conditions: `row_id <= 1000` });\nawait sdb.done();\n```"}
{"prompt":"How can I round a column to two decimal places?","completion":"To round a column to two decimal places, specify the decimals option:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('sales');\nawait table.loadData('./sales.csv');\nawait table.round('price', { decimals: 2 });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve all the data from a table without any filtering?","completion":"Here's how you can get all data without filtering:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get all data without filtering\nconst allData = await table.getData();\n// Log the result to see the data\nconsole.log(allData);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log the unique values in the 'category' column as a JSON string?","completion":"Use the `logUniques` method with `stringify: true` to output unique values as a JSON string:\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Log unique values for 'category' column as JSON string\nawait table.logUniques(\"category\", { stringify: true });\n// We close everything\nawait sdb.done();```"}
{"prompt":"How can I clone a column and offset its values by one row?","completion":"Here's how you can clone a column and offset its values by one row:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Clone 'value' as 'previous_value', offsetting by 1 row\nawait table.cloneColumnWithOffset(\"value\", \"previous_value\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I write JSON data with dates formatted as ISO strings?","completion":"You can format dates in your JSON output like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We write the data to a JSON file with formatted dates\nawait table.writeData(\"./output.json\", { formatDates: true });\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I summarize all columns in my table using all available summary operations, overwriting the current table?","completion":"Here's how you can summarize all columns with all available summary operations, overwriting the current table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We get all columns\nconst columns = await table.getColumns();\n// We summarize all columns with all available summary operations\nawait table.summarize({ values: columns });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use `getNbColumns` inside an async function with await?","completion":"Use `getNbColumns` inside an async function and await its promise.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Define async function to use getNbColumns\nasync function main() {\n  // Await the promise returned by getNbColumns\n  const nbColumns = await table.getNbColumns();\n  console.log(nbColumns);\n}\n// Call the async function\nawait main();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use Ollama for generating embeddings?","completion":"You can use Ollama by setting ollama to true in the options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"embeddingsTable\");\n// We load sample data with a \"food\" column\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n]);\n// Generate embeddings using Ollama\nawait table.aiEmbeddings(\"food\", \"embeddings\", {\n  ollama: true,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I trim whitespace from a single column named 'name'?","completion":"Here's how you can trim whitespace from a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We trim whitespace from the 'name' column\nawait table.trim(\"name\");\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set the data types for a new table?","completion":"Here's an example of setting types for a new table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We set the data types for the columns\nawait table.setTypes({\n  name: \"string\",\n  salary: \"integer\",\n  raise: \"float\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I call linesToPolygons and then immediately summarize the data?","completion":"Here is how you can call linesToPolygons and then immediately summarize the data:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Transform closed linestrings into polygons\nawait table.linesToPolygons();\n// Summarize the area of each polygon\nawait table.summarize({\n  values: \"area\",\n  categories: \"type\",\n  summaries: [\"sum\"],\n  decimals: 2,\n});\n// Log the summarized results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I normalize a column based on categories?","completion":"Here's how you can normalize a column, grouping by a category:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We normalize the 'sales' column, grouped by 'region'\nawait table.normalize(\"sales\", \"normalizedSales\", { categories: \"region\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I transform closed linestrings in the default geometry column to polygons?","completion":"Here's how you can transform closed linestrings in the default geometry column to polygons:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Transform closed linestrings in the default geometry column to polygons\nawait table.linesToPolygons();\n// Log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I name the new table when selecting rows?","completion":"Provide a string for `outputTable` to name the new table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Select 75 rows and store them in a new table named \"top_customers\"\nconst topCustomersTable = await table.selectRows(75, {\n  outputTable: \"top_customers\",\n});\n// Log the new table to verify its name and contents\nawait topCustomersTable.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I customize the style of my chart?","completion":"You can use the style option to modify the chart's appearance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myChartTable\");\n// Sample data\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n// Chart function using Observable Plot\ncost chartFunction = (plotData: unknown[]) =>\n  dot(plotData, { x: \"year\", y: \"value\" });\n// Output path\nconst outputPath = \"output/chart.png\";\n// Style customization\nconst style = \"background-color: #f0f0f0; padding: 20px;\";\n// Generate and save the chart with custom style\nawait table.writeChart(chartFunction, outputPath, { style });\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a column with a specific offset?","completion":"Here's how you can clone a column with a specific offset:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Clone 'sales' as 'sales_2_days_ago', offsetting by 2 rows\nawait table.cloneColumnWithOffset(\"sales\", \"sales_2_days_ago\", { offset: 2 });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens when I call done() on a file-based database?","completion":"Calling done() on a file-based database will save changes and close the connection:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a persistent database instance\nconst sdb = new SimpleDB({ file: \"./my_database.db\" });\n// Perform operations...\n// Close the database, saving changes to the file\nawait sdb.done();\n```"}
{"prompt":"How to perform a spatial join using the 'within' method with 10 kilometers using Haversine?","completion":"Here's how to merge two tables within 10 kilometers using Haversine (requires EPSG:4326 input):\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load geospatial data for tableA\nawait tableA.loadGeoData(\"./dataA.geojson\");\n// Load geospatial data for tableB\nawait tableB.loadGeoData(\"./dataB.geojson\");\n// Perform within join with 10 km Haversine\nawait tableA.joinGeo(tableB, \"within\", {\n  distance: 10,\n  distanceMethod: \"haversine\",\n});\n// Log the joined table\nawait tableA.logTable();\n// We close everything\nawait sdb.done();```"}
{"prompt":"Can I skip rows after I've already performed other operations on the table?","completion":"Here's how you can skip rows after loading data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We skip the first 2 rows\nawait table.skip(2);\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I unnest all geometries in a table using the default geometry column?","completion":"To unnest all geometries in the default column, load your geospatial data and call `unnestGeo()` without arguments.\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Unnest geometries in the default column\nawait table.unnestGeo();\n// Log the first rows to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fill NULL values in a specific column using Simple Data Analysis?","completion":"Here's how you can fill NULL values in a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Fill NULL values in 'sales' column with previous non-NULL value\nawait table.fill(\"sales\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I calculate the median value of a numeric column in my data?","completion":"Here's how you can calculate the median of a numeric column.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Calculate the median of the 'age' column\nconst medianAge = await table.getMedian(\"age\");\n// Log the median value\nconsole.log(medianAge);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fix invalid geometries in a specific column named 'geometry'?","completion":"Here's how to fix invalid geometries in the 'geometry' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./data.geojson\");\n// We fix invalid geometries in the 'geometry' column\nawait table.fixGeo(\"geometry\");\n// We log the table to verify fixed geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I fix the scales for all small multiples in the dot chart?","completion":"Yes, you can set fixed scales for all small multiples:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data with categories\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-03-01\"), value: 30, category: \"A\" },\n  { date: new Date(\"2023-04-01\"), value: 40, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n  { date: new Date(\"2023-03-01\"), value: 35, category: \"B\" },\n  { date: new Date(\"2023-04-01\"), value: 45, category: \"B\" },\n];\nawait table.loadArray(data);\n// Convert date to string format\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Generate and log the dot chart with fixed scales for small multiples\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  fixedScales: true,\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I remove duplicate rows from my table considering all columns?","completion":"Here's how you can remove duplicate rows based on all columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove duplicate rows based on all columns\nawait table.removeDuplicates();\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data type will the `getMin` method return?","completion":"The `getMin` method can return a string, number, boolean, Date, or null, depending on the data type of the values in the specified column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./my_data.csv\");\n// Get the minimum value from the 'date' column\nconst minDate = await table.getMin(\"date\");\nconsole.log(minDate); // e.g., 2023-01-01\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column to a SQL VARCHAR type?","completion":"Here's how to convert a column to a SQL VARCHAR type:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./data.csv\");\n// Convert 'product_id' column to VARCHAR\nawait table.convert({ product_id: \"varchar\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I authenticate with custom Google API credentials?","completion":"Use the `apiEmail` and `apiKey` options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadData(\"./data.csv\");\n// Export to Google Sheets with custom credentials\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  apiEmail: \"your-api-email@service-account.com\",\n  apiKey: \"your-api-key-here\"\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens if I request more rows than the table has?","completion":"It will return as many rows as available. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./small-data.csv\");\n// Table has only 3 rows, but requesting top 10\nconst allRows = await table.getTop(10);\nconsole.log(allRows.length); // Will log 3\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"If I want to keep rows where multiple conditions are met for different columns, how would I structure the `columnsAndValues` object?","completion":"You can specify multiple conditions by providing an object where each key is a column name and the value is either a single value or an array of values to keep. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We keep rows where 'category' is 'electronics' AND 'price' is greater than 100\nawait table.keep({ category: \"electronics\", price: 100 });\n// We log the table to see the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform a spatial join where geometries in tableA are within a specified distance of geometries in tableB?","completion":"Here's how you can perform a spatial join using the 'within' method with a distance of 10 units:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into tables (replace with your actual data loading)\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform the spatial join using 'within' with a distance of 10\nawait tableA.joinGeo(tableB, \"within\", { distance: 10 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove multiple tables at once?","completion":"Pass an array of table names to removeTables. Example:\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.removeTables([\"customers\", \"products\"]);\nawait sdb.done();\n```"}
{"prompt":"Can I compute proportions for a subset of columns?","completion":"Yes, you can pass an array of specific column names to compute proportions for. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data\nawait table.loadData(\"./sample_data.csv\");\n// Compute horizontal proportions only for 'Men' and 'Women'\nawait table.proportionsHorizontal([\"Men\", \"Women\"]);\n// Log the updated table with new proportion columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What data type should the columns I'm converting to uppercase contain?","completion":"The `upper` method is designed to convert string values in the specified columns to uppercase. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We convert the 'description' column to uppercase\nawait table.upper(\"description\");\n// We log the first rows to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a categories option?","completion":"If no categories are provided, normalize will apply min-max normalization across the entire column.\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Normalize without categories\nawait table.normalize(\"value\", \"normalizedValue\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I replace NULL values in multiple columns with the string \"N/A\"?","completion":"Here's how to replace NULL values in multiple columns with \"N/A\":\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Replace NULL values in \"columnA\" and \"columnB\" with \"N/A\"\nawait table.replaceNulls([\"columnA\", \"columnB\"], \"N/A\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to specify multiple summary operations for a grouped summary?","completion":"Specify multiple summary operations by passing an array to the `summaries` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./data.csv\");\n// Summarize 'sales' by 'region' with mean and sum\nawait table.summarize({\n  values: \"sales\",\n  categories: \"region\",\n  summaries: [\"mean\", \"sum\"],\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is the order of the data important when using the `accumulate` method?","completion":"Yes, the documentation states that the data must be sorted before calling the `accumulate` method to ensure correct results.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We sort the table by a relevant column (e.g., date)\nawait table.sort(\"date\");\n// We compute the cumulative sum of 'sales' and store it in 'cumulativeSales'\nawait table.accumulate(\"sales\", \"cumulativeSales\");\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column when using `unnestGeo`?","completion":"The method will automatically find and use the geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We unnest geometries in the default column\nawait table.unnestGeo();\n// We log the results to see the transformed geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the very first row of a table using `getFirstRow`?","completion":"You can call `getFirstRow` without any options to get the first row of the table. Here’s a simple example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Get the first row of the table\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a column name when calling `isValidGeo`?","completion":"If you don't specify a column name, the library will attempt to automatically detect the geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a column named 'isValid' to indicate geometry validity\nawait table.isValidGeo(\"isValid\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify different Google API credentials?","completion":"You can provide custom API email and key using the apiEmail and apiKey options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./mydata.csv\");\n// We export to Google Sheets with custom credentials\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  apiEmail: \"MY_API_EMAIL\",\n  apiKey: \"MY_API_KEY\"\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I perform a cross join between two tables and overwrite the current table?","completion":"To perform a cross join between two tables and overwrite the current table, you can use the `crossJoin` method without specifying the `outputTable` option. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create and load the first table\nconst tableA = sdb.newTable(\"tableA\");\nawait tableA.loadData(\"./dataA.csv\");\n// Create and load the second table\nconst tableB = sdb.newTable(\"tableB\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform cross join, overwriting tableA\nawait tableA.crossJoin(tableB);\n// Log the resulting table\nawait tableA.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the median (50th percentile) of a numeric column using `getQuantile`?","completion":"Here’s how to get the median of the \"age\" column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the median (0.5 quantile) of the \"age\" column\nconst medianAge = await table.getQuantile(\"age\", 0.5);\nconsole.log(medianAge); // e.g., 34\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I execute a custom SQL query without retrieving any data?","completion":"You can run a DDL statement or any query that doesn't need a result set by simply calling `customQuery` without setting the `returnDataFrom` option.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Execute a query that creates a new table; no data is returned\nawait sdb.customQuery(\n  \"CREATE TABLE young_employees AS SELECT * FROM employees WHERE age > 30\"\n);\nawait sdb.done();\n```"}
{"prompt":"How to load multiple files and unify columns so missing columns are filled with NULL?","completion":"Here's how to load multiple files and unify columns so missing columns are filled with NULL.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from multiple files with column unification\nawait table.loadData([\n  \"https://example.com/data1.parquet\",\n  \"https://example.com/data2.parquet\"\n], { unifyColumns: true });\n// We log the table to see the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use the skip method to remove the header row from my dataset?","completion":"Yes, you can skip the first row which is typically the header. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data including header\nawait table.loadData(\"./data-with-header.csv\");\n// Skip the first row (header)\nawait table.skip(1);\n// Log the remaining rows without header\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I generate embeddings for a text column using aiEmbeddings?","completion":"Here's how you can generate embeddings for a text column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data into the table\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n]);\n// Generate embeddings for the 'food' column and store in 'embeddings'\nawait table.aiEmbeddings(\"food\", \"embeddings\");\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Is it possible to remove the intersection of a geometry column with a constant geometry?","completion":"The documentation only describes removing the intersection between two columns. It does not provide a way to remove the intersection with a constant geometry. The method expects two column names as input.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some geo data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Attempt to remove intersection with a constant geometry (this is not supported)\n// await table.removeIntersection(\"geomA\", \"constantGeometry\", \"geomA_minus_geomB\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use `removeIntersection` with two geometry columns?","completion":"Pass the names of the two geometry columns and a new column name to store the result.\n\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./data.geojson\");\nawait table.removeIntersection(\"polygonA\", \"polygonB\", \"polygonA_minus_B\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What happens if I call `flipCoordinates` without specifying a column, and my table doesn't have a default geometry column?","completion":"The documentation states that if no column is specified, the method attempts to find a geometry column. If it fails to find one, the behavior is not explicitly defined in the documentation, but it will likely result in no changes to the table. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data that does not contain geometry columns\nawait table.loadData(\"./my-data.csv\");\n// We flip the coordinates without specifying a column\nawait table.flipCoordinates();\n// We log the first rows to see that nothing has changed\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace all occurrences of a specific string in a single column?","completion":"Here's how you can replace all occurrences of a string in a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Replace all occurrences of \"kilograms\" with \"kg\" in 'column1'\nawait table.replace(\"column1\", { \"kilograms\": \"kg\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I apply the left method to multiple columns in the same table?","completion":"Yes, you can call left multiple times for different columns. For example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\n// Extract first 3 characters from 'productCode'\nawait table.left('productCode', 3);\n// Extract first 4 characters from 'category'\nawait table.left('category', 4);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I add a column that identifies the geometry type of each feature in my geospatial data?","completion":"You can use the `typeGeo` method to add a new column with the geometry types. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Add a new column 'geometryType' with the type of each geometry\nawait table.typeGeo(\"geometryType\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\nThis will add a new column named 'geometryType' that contains the type of each geometry (e.g., POINT, LINESTRING, POLYGON)."}
{"prompt":"How do I create bins for a column named 'age' with an interval of 5, and store the results in a new column called 'age_group'?","completion":"Here's how you can create bins for a column and store the results in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We assign bins for the 'age' column with an interval of 5, storing the results in 'age_group'\nawait table.bins(\"age\", 5, \"age_group\");\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I enable verbose logging for cache operations?","completion":"Pass cacheVerbose:true to the SimpleDB constructor to log cache operations.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Enable verbose logging for cache operations\nconst sdb = new SimpleDB({ cacheVerbose: true });\nconst table = sdb.newTable();\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\nawait sdb.done();\n```"}
{"prompt":"How do I flip the coordinates in the default geometry column?","completion":"Here's how to flip coordinates in the default geometry column using the method without a parameter:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We flip coordinates in the default geometry column\nawait table.flipCoordinates();\n// We log the table to verify changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I find the maximum value in a column named 'sales'?","completion":"Here's how you can use the `getMax` method to find the maximum value in the 'sales' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data here, for example:\n// await table.loadData(\"./sales_data.csv\");\n// Assuming the data is loaded, we can get the maximum sales value\nconst maxSales = await table.getMax(\"sales\");\nconsole.log(maxSales); // e.g., 1000\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone only rows that meet a certain condition?","completion":"Here is how you clone a table with a filter condition:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"originalTable\");\\nawait table.loadData(\"./data.csv\");\\nconst clonedTable = await table.cloneTable({\\n  conditions: \"status = 'active'\"\\n});\\nawait clonedTable.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I remove rows that match either of two conditions?","completion":"You can use the OR operator to combine conditions. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load sample data\nawait table.loadData(\"./data.csv\");\n// Remove rows where 'category' is 'Electronics' OR 'Appliances'\nawait table.removeRows(\n  `category === 'Electronics' || category === 'Appliances`);\n// Log the remaining rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle negative values when creating bins?","completion":"You can handle negative values by specifying a start value below zero:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We create bins starting at -10 with an interval of 5 for column 'temperature'\nawait table.bins(\"temperature\", 5, \"temp_bins\", { startValue: -10 });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create a buffer around geometries in my table and store the results in a new column?","completion":"Here's how you can create a buffer around geometries and store the results in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We create a buffer of 1 unit around the geometries, storing the results in 'bufferedGeom'\nawait table.buffer(\"bufferedGeom\", 1);\n// We log the first rows to see the buffered data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the array returned by getValues for further processing?","completion":"You can map or reduce the array; here we convert all product names to uppercase:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./sales.csv\");\n// Get values from the 'productName' column\nconst productNames = await table.getValues(\"productName\");\n// Transform to uppercase\nconst upperNames = productNames.map(name => typeof name === \"string\" ? name.toUpperCase() : name);\nconsole.log(upperNames);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What parameters does the `longer` method accept?","completion":"The `longer` method accepts three parameters: `columns`, `columnsTo`, and `valuesTo`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We restructure the table\n// 'columns' is an array of column names to stack\n// 'columnsTo' is the name of the new column for original column names\n// 'valuesTo' is the name of the new column for the values\nawait table.longer([\"2021\", \"2022\", \"2023\"], \"year\", \"employees\");\n// We log the table to see the restructured data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove duplicate rows based on multiple columns, for example firstName and lastName?","completion":"Pass an array of column names to the `on` option.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./contacts.csv\");\n// Remove duplicate rows based on 'firstName' and 'lastName'\nawait table.removeDuplicates({ on: [\"firstName\", \"lastName\"] });\n// Log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I get descriptive statistics for a specific column only?","completion":"The method returns stats for all columns; to focus on a specific column, filter the array by column name:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst description = await table.getDescription();\n// Filter for the column named \"price\"\nconst priceStats = description.find(col => col.column === \"price\");\nconsole.log(priceStats);\nawait sdb.done();\n```"}
{"prompt":"How to write a table's data to a SQLite database file?","completion":"Here's how you can write the table's data to a SQLite database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We write the data to a SQLite database file\nawait table.writeData(\"./my_database.sqlite\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I rename multiple columns at once?","completion":"To rename multiple columns at once, pass an object with all the old-to-new mappings to renameColumns.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\n// Rename multiple columns\nawait table.renameColumns({ 'oldName1': 'newName1', 'oldName2': 'newName2' });\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the distance using the spheroid method and store the result in kilometers?","completion":"Here's how you can calculate the distance using the spheroid method and store the result in kilometers:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.geojson\");\n// We calculate the Spheroid distance between 'area1' and 'area2' in kilometers\nawait table.distance(\"area1\", \"area2\", \"distance_spheroid_km\", {\n  method: \"spheroid\",\n  unit: \"km\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get the last row where the category is 'Book'?","completion":"Here's how to get the last row with a condition using JavaScript syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst lastRowBooks = await table.getLastRow({\n  conditions: \"category === 'Book'\",\n});\nconsole.log(lastRowBooks);\nawait sdb.done();\n```"}
{"prompt":"How do I load a DuckDB database file into SimpleDB?","completion":"Here’s how to load a DuckDB database file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load a DuckDB database file\nawait sdb.loadDB(\"./my_database.db\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table to a new table with a default name?","completion":"Here's how you can clone a table to a new table with a default generated name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\n// Load some data into tableA\nawait tableA.loadData(\"./my-data.csv\");\n// Clone tableA to a new table with a default generated name\nconst tableB = await tableA.cloneTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I find the most similar items to a given text using aiVectorSimilarity?","completion":"Here’s how you can find the 3 most similar foods to \"italian food\":\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable(\"foodTable\");\\n// Load sample data\\nawait table.loadArray([\\n  { food: \"pizza\" },\\n  { food: \"sushi\" },\\n  { food: \"burger\" },\\n  { food: \"pasta\" },\\n  { food: \"salad\" },\\n  { food: \"tacos\" },\\n]);\\n// Generate embeddings for the food column\\nawait table.aiEmbeddings(\"food\", \"embeddings\", { cache: true });\\n// Find 3 most similar foods to \"italian food\"\\nconst similar = await table.aiVectorSimilarity(\\n  \"italian food\",\\n  \"embeddings\",\\n  3,\\n  { createIndex: true, cache: true }\\n);\\n// Log the results\\nawait similar.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How do I get the last 5 rows of my table (with the last row first)?","completion":"To get the last 5 rows with the last row first, use `getBottom(5)` without any options.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData('./data.csv');\n// Get the last 5 rows (last row first)\nconst bottom5 = await table.getBottom(5);\nconsole.log(bottom5);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if the index is out of bounds when using splitExtract?","completion":"If the index is out of bounds, an empty string will be returned for that row:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Sample data with an 'email' column\nawait table.loadData(\"./sample-emails.csv\");\n// Split the 'email' column by '.' and try to extract index 2 (which doesn't exist)\nawait table.splitExtract(\"email\", \".\", 2, \"domainPart\");\n// Log the results; rows without a third part will have empty strings\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I summarize a single column ('value_column') and remove the default 'value' column from the output?","completion":"Here's how you can summarize a single column ('value_column') and remove the default 'value' column from the output:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We summarize 'value_column' without the default 'value' column\nawait table.summarize({ values: \"value_column\", noColumnValue: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the returned types to filter columns of a specific type?","completion":"After retrieving the types, you can iterate over the object and pick columns that match a desired type. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./sample.csv\");\nconst types = await table.getTypes();\n// Find all columns that are numeric (e.g., BIGINT, DECIMAL)\nconst numericColumns = Object.entries(types)\n  .filter(([, type]) => type === \"BIGINT\" || type === \"DECIMAL\")\n  .map(([col]) => col);\nconsole.log(\"Numeric columns:\", numericColumns);\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows based on a date comparison?","completion":"Use a date string in the condition to keep rows that meet the date criteria.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./sales.csv\");\n// Keep rows where 'lastPurchaseDate' is on or after '2023-01-01'\nawait table.filter(`lastPurchaseDate >= '2023-01-01'`);\n// Log the filtered table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I handle non-text data when using `aiRowByRow`?","completion":"Convert non-text data to text before prompting the AI:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Sample data with numbers\nawait table.loadArray([\n  { age: 25 },\n  { age: 30 },\n  { age: 45 }\n]);\n// Convert age to text and analyze\nawait table.aiRowByRow(\n  \"age\",\n  \"age_group\",\n  `Categorize this age into \"Young\", \"Adult\", or \"Senior\".\",\n  {\n    clean: (response) => response.toLowerCase(),\n    test: (dataPoint) => {\n      if (!['young', 'adult', 'senior'].includes(dataPoint)) {\n        throw new Error('Invalid age group');\n      }\n    }\n);\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What is the default behavior of logColumns?","completion":"By default, logColumns only logs the column names without data types. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log only column names\nawait table.logColumns();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I ignore parsing errors when loading data from the directory?","completion":"You can use the `ignoreErrors` option to ignore parsing errors. Rows with errors will be skipped. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the directory, ignoring errors\nawait table.loadDataFromDirectory(\"./my_data/\", { ignoreErrors: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `isClosedGeo` method return?","completion":"The `isClosedGeo` method returns a promise that resolves when the closed geometry check is complete. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We add a new column named 'isClosed'\nawait table.isClosedGeo(\"isClosed\");\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Does `getUniques` work with geospatial data columns?","completion":"Yes, you can use `getUniques` on geospatial data. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// Get unique values from the 'type' column\nconst uniqueTypes = await table.getUniques(\"type\");\nconsole.log(uniqueTypes);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I execute a custom SQL query using SimpleDB?","completion":"Here's how you can execute a custom SQL query:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Execute a custom SQL query to create a table\nawait sdb.customQuery(\n  \"CREATE TABLE sales_data AS SELECT * FROM my_sales WHERE year > 2020\"\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I disable coordinate rewinding when generating a map?","completion":"If you need to keep the original winding order, set options.rewind to false:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./CanadianProvincesAndTerritories.geojson\");\n\nconst mapFunction = (geoJsonData) =>\n  plot({\n    projection: { type: \"conic-conformal\", rotate: [100, -60], domain: geoJsonData },\n    marks: [geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" })],\n  });\n\nconst outputPath = \"./output/no_rewind_map.png\";\n\nawait table.writeMap(mapFunction, outputPath, {\n  rewind: false,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I add new rows to my table?","completion":"Here's how you can insert new rows into your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load existing data\nawait table.loadData(\"./data.csv\");\n// Create new rows to insert\nconst newRows = [\n  { name: \"Alice\", age: 30 },\n  { name: \"Bob\", age: 25 }\n];\n// Insert the new rows\nawait table.insertRows(newRows);\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a particular column for filling polygon holes?","completion":"Yes, you can specify a particular geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We fill holes in the 'polygonGeom' column\nawait table.fillHoles(\"polygonGeom\");\n// We log the first rows to see the modified geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use Ollama for embeddings and similarity search?","completion":"Use Ollama by setting ollama: true or passing an Ollama instance:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([\n  { food: 'pizza' },\n  { food: 'sushi' },\n]);\nawait table.aiEmbeddings('food', 'embeddings', {\n  ollama: true,\n  model: 'llama3',\n});\nconst similar = await table.aiVectorSimilarity(\n  'pizza',\n  'embeddings',\n  5,\n  {\n    ollama: true,\n    model: 'llama3',\n  }\n);\nawait similar.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I control the number of small multiples displayed per row using the `smallMultiplesPerRow` option?","completion":"Here's how you can control the number of small multiples per row:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-03-01\"), value: 30, category: \"A\" },\n  { date: new Date(\"2023-04-01\"), value: 40, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n  { date: new Date(\"2023-03-01\"), value: 35, category: \"B\" },\n  { date: new Date(\"2023-04-01\"), value: 45, category: \"B\" },\n];\n// Load the data\nawait table.loadArray(data);\n// Log the line chart with small multiples\nawait table.logLineChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  smallMultiplesPerRow: 2, // Display 2 small multiples per row\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round the computed proportions to a specific number of decimal places?","completion":"Here's how you can round the computed proportions:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We compute proportions for 'column1' and round to two decimal places\nawait table.proportionsVertical(\"column1\", \"perc\", {\n  decimals: 2,\n});\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set a rate limit of 10 requests per minute for embeddings?","completion":"Generate embeddings with a rate limit of 10 requests per minute:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadArray([\\n  { food: \"pizza\" },\\n  { food: \"sushi\" },\\n  { food: \"burger\" },\\n]);\\nawait table.aiEmbeddings(\"food\", \"embeddings\", { rateLimitPerMinute: 10 });\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How can I calculate the median value of a numeric column?","completion":"Here's how you can get the median (50th percentile) of a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the median of 'age' column\nconst medianAge = await table.getQuantile(\"age\", 0.5);\nconsole.log(\"Median age:\", medianAge);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I store the results of a cross join in a new table with a generated name?","completion":"Here's how you can perform a cross join and store the result in a new table with a generated name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into both tables\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform a cross join and store in a new table with generated name\nconst resultTable = await tableA.crossJoin(tableB, { outputTable: true });\n// Log the result\nawait resultTable.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert specific columns to different data types?","completion":"Here's how you can convert columns to target data types:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Convert 'column1' to string and 'column2' to integer\nawait table.convert({ column1: \"string\", column2: \"integer\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load data from multiple files in a directory using SimpleDB?","completion":"Here's how you can load all supported files from a directory:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load all supported files from the directory\nawait table.loadDataFromDirectory(\"./data/\");\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the proportion of each value in a column relative to the total sum of that column?","completion":"Here's how you can calculate the vertical proportions for a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We compute the proportions for 'column1' and store them in 'perc'\nawait table.proportionsVertical(\"column1\", \"perc\");\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I store the join result in a new table with an auto-generated name?","completion":"Here is how you can store the join result in a new table with an auto-generated name:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create two tables\\nconst tableA = sdb.newTable(\"tableA\");\\nconst tableB = sdb.newTable(\"tableB\");\\n// Load data into both tables\\nawait tableA.loadData(\"./dataA.csv\");\\nawait tableB.loadData(\"./dataB.csv\");\\n// Perform join and store result in a new auto-generated table\\nconst joinedTable = await tableA.join(tableB, { commonColumn: \"id\", type: \"inner\", outputTable: true });\\n// Log the new table\\nawait joinedTable.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How do I keep multiple tables in my database using `selectTables`?","completion":"You can pass an array of table names to select multiple tables:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Select multiple tables by name\nawait sdb.selectTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I set the maximum number of characters to display for text cells?","completion":"You can set the maximum characters for text cells using `nbCharactersToLog`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with 50 characters max for text\nconst sdb = new SimpleDB({ nbCharactersToLog: 50 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert the values in a single column to lowercase?","completion":"Here's how you can convert the values in a single column to lowercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We convert the values in 'myColumn' to lowercase\nawait table.lower(\"myColumn\");\n// We log the first rows to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Does skip modify the original table or return a new table?","completion":"The skip method mutates the current table in place; it does not return a new table. Example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.skip(3); // table now has rows 4 onward\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I select 75 rows and store them in a new table named \"top_customers\"?","completion":"Use `selectRows(75, { outputTable: \"top_customers\" })` to create a new table with a specific name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst topCustomersTable = await table.selectRows(75, { outputTable: \"top_customers\" });\nawait topCustomersTable.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I adjust the layout of small multiples in a dot chart?","completion":"Use `smallMultiplesPerRow` to set the number of charts per row and specify dimensions:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data with dates, values, and categories\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-03-01\"), value: 30, category: \"A\" },\n  { date: new Date(\"2023-04-01\"), value: 40, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n  { date: new Date(\"2023-03-01\"), value: 35, category: \"B\" },\n  { date: new Date(\"2023-04-01\"), value: 45, category: \"B\" },\n];\nawait table.loadArray(data);\n// Convert dates to string format\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\n// Adjust layout with 2 charts per row and set dimensions\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  smallMultiplesPerRow: 2,\n  width: 80,\n  height: 30\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I want to use Ollama for generating embeddings. How do I configure the `aiEmbeddings` method to use Ollama?","completion":"You can use Ollama by setting the `ollama` option to `true` or by passing your Ollama instance to the option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadArray([{ text: \"Sample text\" }, { text: \"Another sample\" }]);\n// Generate embeddings using Ollama\nawait table.aiEmbeddings(\"text\", \"embeddings\", {\n  ollama: true, // Use Ollama\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate Haversine distance in meters between two points?","completion":"Use the `haversine` method to compute distances in meters:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data in EPSG:4326\nawait table.loadGeoData(\"./points.geojson\");\n// Compute Haversine distance in meters between 'point1' and 'point2'\nawait table.distance(\"point1\", \"point2\", \"distance_m\", { method: \"haversine\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I compute correlations for a specific column (e.g., 'price') with all other numeric columns?","completion":"You can use the `x` option to specify the column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations for 'price' with all other numeric columns\nawait table.correlations({ x: \"price\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use getNbColumns in a workflow to decide how many columns to process?","completion":"You can retrieve the column count and then use it in conditional logic.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the number of columns\nconst nbColumns = await table.getNbColumns();\nif (nbColumns > 5) {\n  console.log(\"Table has more than 5 columns, performing advanced analysis.\");\n} else {\n  console.log(\"Table has 5 or fewer columns, performing basic analysis.\");\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I insert rows from tables with different columns, filling missing columns with NULL?","completion":"Set `unifyColumns: true` in the options object.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables with different columns\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into tableA (columns: id, name)\nawait tableA.loadData(\"./dataA.csv\");\n// Load data into tableB (columns: id, price) - different columns\nawait tableB.loadData(\"./dataB.csv\");\n// Insert rows from tableB into tableA, unifying columns (missing columns filled with NULL)\nawait tableA.insertTables(\"tableB\", { unifyColumns: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use `aiRowByRow` to generate AI responses for each row in a column?","completion":"Here's how you can apply an AI prompt to each row and store the response in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Sample data with names\nawait table.loadArray([\n  { name: \"Marie\" },\n  { name: \"John\" },\n  { name: \"Alex\" }\n]);\n// Use aiRowByRow to categorize names into gender\nawait table.aiRowByRow(\n  \"name\",\n  \"gender\",\n  `Guess whether it's a \"Man\" or a \"Woman\". If it could be both, return \"Neutral\".`,\n  {\n    cache: true,\n    batchSize: 10,\n    test: (dataPoint: unknown) => {\n      if (\n        typeof dataPoint !== \"string\" ||\n        !['Man', 'Woman', 'Neutral'].includes(dataPoint)\n      ) {\n        throw new Error(`Invalid response: ${dataPoint}`);\n      }\n    },\n    retry: 3,\n    rateLimitPerMinute: 15,\n    verbose: true\n  }\n);\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I perform a left join while keeping the original table unchanged?","completion":"To perform a left join and keep the original table, set the type to \"left\":\\n```\\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\\nconst sdb = new SimpleDB();\\nconst tableA = sdb.newTable('tableA');\\nconst tableB = sdb.newTable('tableB');\\nawait tableA.loadData('./dataA.csv');\\nawait tableB.loadData('./dataB.csv');\\nawait tableA.joinGeo(tableB, 'intersect', { type: 'left' });\\nawait tableA.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"Can I pass a single column name as a string instead of an array?","completion":"Yes, `removeColumns` accepts either a string or an array. Here’s an example using a string:\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Remove 'singleColumn' using a string\nawait table.removeColumns(\"singleColumn\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I enable dark mode for my map?","completion":"You can enable dark mode by setting the `dark` option to `true` in the `writeMap` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nimport { geo, plot } from \"@observablehq/plot\";\n\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n\n// Load your GeoJSON data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n\n// Define a map function using Observable Plot\nconst mapFunction = (geoJsonData: { features: unknown[] }) =>\n  plot({\n    projection: {\n      type: \"conic-conformal\",\n      rotate: [100, -60],\n      domain: geoJsonData,\n    },\n    marks: [\n      geo(geoJsonData, { stroke: \"black\", fill: \"lightblue\" }),\n    ],\n  });\n\n// Define the output path for the map image\nconst outputPath = \"./output/map.png\";\n\n// Write the map to the specified path, enabling dark mode\nawait table.writeMap(mapFunction, outputPath, { dark: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I find the 5 most similar texts to a given text using the `aiVectorSimilarity` method?","completion":"Here's how you can use the `aiVectorSimilarity` method to find the 5 most similar texts to a given text:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadArray([\n  { text: \"This is the first document.\" },\n  { text: \"This is the second document.\" },\n  { text: \"And this is the third one.\" },\n]);\n// Generate embeddings for the 'text' column\nawait table.aiEmbeddings(\"text\", \"embeddings\", { cache: true });\n// Find the 3 most similar texts to \"a new document\" based on embeddings\nconst similarTexts = await table.aiVectorSimilarity(\n  \"a new document\",\n  \"embeddings\",\n  5,\n  {\n    createIndex: true, // Create an index on the embeddings column\n    cache: true, // Cache the embedding of \"a new document\"\n  },\n);\n// Log the results\nawait similarTexts.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table with a filter condition?","completion":"Use the conditions option to filter rows during cloning:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"./data.csv\");\n// Clone only rows where status is 'active'\nconst tableB = await tableA.cloneTable({ conditions: \"status = 'active'\" });\nawait tableB.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I customize the labels displayed on the histogram bins?","completion":"You can customize the labels using the `formatLabels` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load the data\nawait table.loadData(\"./my-data.csv\");\n// We log the histogram with custom labels\nawait table.logHistogram(\"age\", { formatLabels: (min, max) => `${min}-${max}` });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I join two tables on multiple columns?","completion":"Specify an array of column names for the commonColumn option to join on multiple columns.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data from CSV files\nawait tableA.loadData(\"./data1.csv\");\nawait tableB.loadData(\"./data2.csv\");\n// Perform a join on multiple columns \"name\" and \"category\"\nawait tableA.join(tableB, {\n  commonColumn: [\"name\", \"category\"],\n});\n// Log the joined table (which is now in tableA)\nawait tableA.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load all supported files from a directory into my table?","completion":"Here's how you can load all supported files (CSV, JSON, Parquet, Excel) from a directory:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load all supported files from the directory\nawait table.loadDataFromDirectory(\"./data/\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve GeoJSON data from my table?","completion":"Here's how you can get GeoJSON data from your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Get GeoJSON data from the default geometry column\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I accumulate values across multiple categories?","completion":"Yes, you can specify multiple category columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Create a new instance\nconst sdb = new SimpleDB();\n// Create and load data into table\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData(\"./data.csv\");\n// Sort by multiple categories first\nawait table.sort({ columns: [\"region\", \"product\", \"date\"] });\n// Accumulate within each region and product category\nawait table.accumulate(\"revenue\", \"cumulativeRevenue\", {\n  categories: [\"region\", \"product\"]\n});\n// Log the results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\nEnsure sorting by all relevant columns before accumulation."}
{"prompt":"How can I load a GeoJSON file from a URL?","completion":"Here's how you can load a GeoJSON file from a URL:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the URL\nawait table.loadGeoData(\"https://example.com/my-data.geojson\");\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I convert specific columns in my table to different data types?","completion":"You can use the `convert` method to change column data types. Here's an example converting 'column1' to string and 'column2' to integer:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Convert 'column1' to string and 'column2' to integer\nawait table.convert({ column1: \"string\", column2: \"integer\" });\n// Log the converted table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What does the `logTypes` method return?","completion":"The `logTypes` method returns the `SimpleTable` instance itself after logging the column types. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We log the column types\nconst returnedTable = await table.logTypes();\n// We can then use the returnedTable if needed\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I load geospatial data from a URL?","completion":"You can load geospatial data directly from a URL. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load the data from a URL\nawait table.loadGeoData(\"https://example.com/my-geodata.geojson\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table and specify a new name using a string argument?","completion":"Here's how you can clone a table and specify a new name using a string argument:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable(\"tableA\");\nawait tableA.loadData(\"./data.csv\");\nconst tableB = await tableA.cloneTable(\"my_cloned_table\");\nawait sdb.done();\n```"}
{"prompt":"How can I round the correlation values to a specific number of decimal places, like 2?","completion":"Here's how you can compute correlations and round the values to 2 decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute correlations, rounded to 2 decimal places\nawait table.correlations({ decimals: 2 });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use getNbRows inside an if statement to perform actions only when the table is not empty?","completion":"You can use getNbRows in a conditional to run code only when the table has rows:\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\"./data.csv\");\\nconst count = await table.getNbRows();\\nif (count > 0) {\\n  console.log(`Table has ${count} rows, proceeding with analysis.`);\\n} else {\\n  console.warn(\"Table is empty, aborting.\");\\n}\\nawait sdb.done();\\n```"}
{"prompt":"Does the `nbVertices` method modify the original table, or does it return a new table with the added column?","completion":"The `nbVertices` method modifies the original table in place. Here's an example demonstrating this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Add a new column 'vertexCount' with the number of vertices for each geometry\nawait table.nbVertices(\"vertexCount\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What if my latitude and longitude columns have different names?","completion":"You can specify any column names for latitude and longitude. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file containing latitude and longitude columns\nawait table.loadData(\"./data.csv\");\n// We create point geometries using 'latitude' and 'longitude' columns into a new 'geom' column\nawait table.points(\"latitude\", \"longitude\", \"geom\");\n// We log the results to see the new geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I use the `aiVectorSimilarity` method with Ollama?","completion":"Here's how you can use the `aiVectorSimilarity` method with Ollama:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data into the table\nawait table.loadArray([\n  { text: \"This is the first document.\" },\n  { text: \"This is the second document.\" },\n  { text: \"And this is the third one.\" },\n]);\n// Generate embeddings for the 'text' column\nawait table.aiEmbeddings(\"text\", \"embeddings\", { cache: true });\n// Find the 3 most similar texts to \"a new document\" based on embeddings\nconst similarTexts = await table.aiVectorSimilarity(\n  \"a new document\",\n  \"embeddings\",\n  3,\n  {\n    ollama: true, // Use Ollama\n    cache: true, // Cache the embedding of \"a new document\"\n  },\n);\n// Log the results\nawait similarTexts.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I insert rows into a specific table instance?","completion":"Specify the table name when creating the table and then insert rows into that instance:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table with a name\nconst table = sdb.newTable(\"myTable\");\n// Insert rows into the named table\nconst newRows = [\n  { letter: \"h\", number: 9 },\n  { letter: \"i\", number: 10 },\n];\nawait table.insertRows(newRows);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log the total number of rows in my table after loading data?","completion":"Here's how you can log the total number of rows in a table after loading data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We log the number of rows\nawait table.logNbRows();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table to a new table named \"my_cloned_table\" using an options object?","completion":"```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table (source table)\nconst tableA = sdb.newTable(\"sourceTable\");\n// We load data from a file\nawait tableA.loadData(\"./data.csv\");\n// Clone using an options object to set the name\nconst tableB = await tableA.cloneTable({ outputTable: \"my_cloned_table\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to insert tables with mismatched columns without setting unifyColumns?","completion":"If unifyColumns is false and the tables have different columns, insertTables will throw an error.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create two tables with different schemas\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into the tables\nawait tableA.loadData(\"./dataA.csv\"); // columns: id, name\nawait tableB.loadData(\"./dataB.csv\"); // columns: id, age\n// Attempt to insert without unifying columns (will throw)\ntry {\n  await tableA.insertTables(\"tableB\");\n} catch (err) {\n  console.error(\"Insertion failed due to column mismatch:\", err.message);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I associate a table name with my custom query for debugging purposes?","completion":"Use the `table` option in the options object to specify a table name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Run query with table name for debugging\nawait sdb.customQuery(\n  \"SELECT * FROM employees WHERE department = 'Engineering'\",\n  { table: \"engineering_employees\" }\n);\n// Close the connection\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows where the 'city' column has the value 'London'?","completion":"Here's how you can remove rows based on a single value in a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We remove rows where the city is London\nawait table.remove({ city: \"London\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I add a separator when concatenating columns?","completion":"Yes, you can specify a separator using the options parameter. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Let's assume the data has columns \"city\" and \"country\"\nawait table.loadData(\"./my-data.csv\");\n// Concatenate 'city' and 'country' into 'location', separated by a comma and space\nawait table.concatenate([\"city\", \"country\"], \"location\", { separator: \", \" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens to the table reference after calling renameTable?","completion":"The table reference remains the same; you can continue to use the same variable to interact with the renamed table.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"customers\");\n// Load data\nawait table.loadData(\"./customers.csv\");\n// Rename the table to \"clients\"\nawait table.renameTable(\"clients\");\n// The variable 'table' still points to the renamed table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I add text before the data in Google Sheets?","completion":"Use the `prepend` option to add text before your data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We export with prepended text\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  prepend: \"Data exported on:\"\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I use SimpleTable instances instead of names when selecting tables?","completion":"Yes, you can pass the table instances directly:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create multiple tables\nconst table1 = sdb.newTable(\"table1\");\nconst table2 = sdb.newTable(\"table2\");\n// Select using instances\nawait sdb.selectTables([table1, table2]);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use Ollama for generating embeddings instead of cloud services?","completion":"Set `ollama: true` in the options to use Ollama for embedding generation.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n  { food: \"pasta\" },\n  { food: \"salad\" },\n  { food: \"tacos\" },\n]);\nawait table.aiEmbeddings(\"food\", \"embeddings\", { ollama: true });\nawait sdb.done();\n```"}
{"prompt":"Can I combine multiple options when generating a histogram?","completion":"Yes, you can combine multiple options together:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We generate and log a histogram with custom settings for the 'weight' column\nawait table.logHistogram(\"weight\", {\n  bins: 15,\n  formatLabels: (min, max) => `${min.toFixed(1)}kg-${max.toFixed(1)}kg`,\n  compact: true,\n  width: 60,\n});\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I retrieve an existing table by name?","completion":"You can use the `getTable` method to fetch a table.\\n\\n```ts\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// Retrieve the \"employees\" table\\nconst employees = await sdb.getTable(\"employees\");\\n// Do something with the table, e.g., log its contents\\nawait employees.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"If you want to validate data before inserting, you can use the types returned by getTypes. For example, to ensure the \"id\" column is a BIGINT before inserting a new row:","completion":"If you want to validate data before inserting, you can use the types returned by getTypes. For example, to ensure the \\\"id\\\" column is a BIGINT before inserting a new row:\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\\\"users\\\");\\nawait table.loadData(\\\"./users.csv\\\");\\nconst dataTypes = await table.getTypes();\\nif (dataTypes[\\\"id\\\"] === \\\"BIGINT\\\") {\\n  // proceed with insertion logic here\\n  console.log(\\\"id column is BIGINT, safe to insert.\\\");\\n} else {\\n  console.error(\\\"id column is not BIGINT, aborting insertion.\\\");\\n}\\nawait sdb.done();\\n```"}
{"prompt":"How can I view the projections of my geospatial data?","completion":"Here's how you can log the projections of your geospatial data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We log the projections\nawait table.logProjections();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a particular geometry column to get its bounding box?","completion":"Yes, you can specify the geometry column name. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Get the bounding box of geometries in a specific column named 'geom'\nconst bbox = await table.getBoundingBox(\"geom\");\nconsole.log(\"Bounding Box for geom column:\", bbox);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I insert rows from multiple tables into a single table?","completion":"To insert rows from multiple tables, pass an array of table names or instances to insertTables.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create three tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nconst tableC = sdb.newTable(\"tableC\");\n// Load data into the tables\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\nawait tableC.loadData(\"./dataC.csv\");\n// Insert all rows from tableB and tableC into tableA\nawait tableA.insertTables([\"tableB\", \"tableC\"]);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use bins on a column that has missing values?","completion":"Missing values (e.g., null or undefined) will be treated as NaN and may result in a bin label of \"[NaN-NaN]\" or be omitted.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data with missing values\\nawait table.loadData(\"./data-with-missing.csv\");\\n// Assign bins (missing values will be handled by the method)\\nawait table.bins(\"column1\", 10, \"bins\");\\n// Log table to inspect how missing values were binned\\nawait table.logTable();\\n// Close\\nawait sdb.done();\\n```"}
{"prompt":"If my Google API key and email are stored in custom environment variables, how can I specify them when using `toSheet`?","completion":"You can use the `apiKey` and `apiEmail` options to specify the environment variable names for your API key and email. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a Google Sheet with custom API key and email variables\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\", {\n  apiKey: \"MY_CUSTOM_API_KEY\",\n  apiEmail: \"MY_CUSTOM_API_EMAIL\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I verify the resulting geometry after removing the intersection?","completion":"After calling `removeIntersection`, you can log the table or inspect the new column directly:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./my-geodata.geojson\");\nawait table.removeIntersection(\"geomA\", \"geomB\", \"geomA_minus_geomB\");\n// Log the entire table to see all columns\nawait table.logTable();\n// Or log only the new column\nawait table.logColumn(\"geomA_minus_geomB\");\nawait sdb.done();\n```"}
{"prompt":"How can I perform a simple spatial join between two tables, overwriting the first table with the results?","completion":"Here's how you can perform a spatial join, overwriting the first table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into tables (replace with your actual data loading)\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform the spatial join using 'intersect'\nawait tableA.joinGeo(tableB, \"intersect\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I visualize which points are inside polygons?","completion":"Yes, you can use styling to color points based on whether they're inside polygons:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./geodata.geojson\");\n// Check if points are inside polygons\nawait table.inside(\"pointGeom\", \"polygonGeom\", \"isInsidePolygon\");\n// Style points red if inside, blue otherwise\nawait table.setStyle({\n  column: \"isInsidePolygon\",\n  style: {\n    TRUE: { fill: \"red\" },\n    FALSE: { fill: \"blue\" }\n  }\n});\n// We log the styled data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I convert closed linestrings in my geospatial data to polygons?","completion":"Here's how you can transform closed linestrings into polygons using the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We convert closed linestrings to polygons\nawait table.linesToPolygons();\n// We log the first rows to see the transformed data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What happens if the index I provide to `splitExtract` is out of bounds?","completion":"If the index you provide to `splitExtract` is out of bounds, an empty string will be returned for that row in the new column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Assuming you have loaded data with a 'single_value' column\n// await table.loadData(\"./my-data.csv\");\n// Split 'single_value' by comma and extract the second part (index 1) into 'second_value'\nawait table.splitExtract(\"single_value\", \",\", 1, \"second_value\");\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I write a table's data to a CSV file?","completion":"Here's how to write data to a CSV file without any options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We write the data to a CSV file\nawait table.writeData(\"./output.csv\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the linear regression of 'sales' over 'advertising'?","completion":"Here's how you can compute the linear regression of 'sales' (y) over 'advertising' (x) using the x and y options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We compute linear regression with 'advertising' as x and 'sales' as y\nawait table.linearRegressions({ x: \"advertising\", y: \"sales\" });\n// We log the results to see the regression table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I flip the coordinates of geometries in my table?","completion":"Here's how you can flip the coordinates of geometries in a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We flip the coordinates of the default geometry column\nawait table.flipCoordinates();\n// We log the first rows to see the flipped coordinates\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Why should I be cautious when using flipCoordinates?","completion":"Because flipping changes the coordinate order and can break spatial operations and projections stored in table.projections.\n\n```ts\n// Example: after flipping, spatial queries may return incorrect results.\n// Always verify projections and consider reprojecting data if needed.\n```"}
{"prompt":"How can I list all the table names currently stored in the SimpleDB instance?","completion":"Here's how you can log the names of all tables in the database:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Log all table names to the console\nawait sdb.logTableNames();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute the cumulative sum of a single column without categories?","completion":"To compute a simple cumulative sum, use the `accumulate` method with the target column and new column name.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// We load data from a CSV file (assuming it has a 'sales' column)\nawait table.loadData(\"./sales_data.csv\");\n// We compute cumulative sum of 'sales' into 'cumulative_sales'\nawait table.accumulate(\"sales\", \"cumulative_sales\");\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use the cache method to store computations so they only run once unless the function changes?","completion":"Here’s how you can cache a computation so it only runs once unless the function changes.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData('items.csv');\n  await table.summarize({\n    values: 'price',\n    categories: 'department',\n    summaries: ['min', 'max', 'mean'],\n  });\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I assign ranks across multiple categories?","completion":"You can specify multiple category columns as an array:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We assign ranks within 'department' and 'city' categories\nawait table.ranks(\"sales\", \"salesRank\", { categories: [\"department\", \"city\"] });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I create a new table with a specific name?","completion":"Here's how you can create a new table with a specific name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst myTable = sdb.newTable(\"my_data\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I rename a table before loading data?","completion":"Rename a table before loading data to set a meaningful name:\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"temp\");\\nawait table.renameTable(\"sales_data\");\\nawait table.loadData(\"./sales.csv\");\\nawait sdb.done();\\n```"}
{"prompt":"How can I use a regular expression to replace patterns in a column?","completion":"Here's how you can use a regular expression for pattern replacement:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We replace any digit sequence with a hyphen using regex\nawait table.replace(\"id\", { \"\\d+\": \"-\" }, { regex: true });\n// We log the table to see changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute the perimeter of polygon geometries in meters and store it in a new column?","completion":"Here's how to compute perimeters in meters and store in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./land-polygons.geojson\");\n// Compute perimeter in meters and store in 'perimeter_m'\nawait table.perimeter(\"perimeter_m\");\n// Log the results to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the correlation between two specific columns?","completion":"Provide both `x` and `y` options to target two columns:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData(\"./data.csv\");\n// Compute correlation between 'price' and 'quantity'\nawait table.correlations({ x: \"price\", y: \"quantity\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I fill holes in the default geometry column of my table?","completion":"You can simply call `fillHoles()` without any arguments to let the method auto-detect the geometry column.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Fill holes in the default geometry column\nawait table.fillHoles();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I clone a column to a new name that already exists in the table?","completion":"The documentation does not specify behavior for duplicate column names, so it’s safest to choose a unique name. Example of cloning to a new unique name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"people\");\nawait table.loadData(\"./people.csv\");\nawait table.cloneColumn(\"firstName\", \"firstNameCopy\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I aggregate geometries by a category column, e.g., \"country\", using union?","completion":"Pass the category column name in the options object.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Aggregate geometries by the \"country\" column using union\nawait table.aggregateGeo(\"union\", { categories: \"country\" });\n// Log the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I clone an existing column in my table?","completion":"Here's how you can clone an existing column using the `cloneColumn` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Clone the 'name' column as 'copy_name'\nawait table.cloneColumn(\"name\", \"copy_name\");\n// We log the table to see the cloned column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify a starting value for the bins? For example, I want to create bins starting from 0 with an interval of 10 for a column named 'score'.","completion":"You can specify a starting value for the bins using the `options` parameter. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We assign bins for the 'score' column with an interval of 10, starting from 0\nawait table.bins(\"score\", 10, \"score_group\", { startValue: 0 });\n// We log the first rows to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I perform rolling aggregations within specific categories?","completion":"You can use the `categories` option to group the data before computing the rolling aggregation. Here's how:"}
{"prompt":"How can I summarize a timestamp column by converting it to milliseconds first?","completion":"Here's how you can summarize a timestamp column by converting to milliseconds:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Summarize the 'timestamp_column' by converting to milliseconds and taking the mean\nawait table.summarize({\n  values: \"timestamp_column\",\n  toMs: true,\n  summaries: \"mean\",\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax for conditions in getRow?","completion":"Yes, you can use JavaScript operators like === and !==. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get a row where 'id' is 123 using JS syntax\nconst rowById = await table.getRow(`id === 123`);\nconsole.log(rowById);\n// We close everything\nawait sdb.done();\n```\nThis example uses JavaScript strict equality to find the matching row."}
{"prompt":"How do I control the number of small multiples per row?","completion":"Use the smallMultiplesPerRow option to set how many charts appear per row:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date(\"2023-01-01\"), value: 10, category: \"A\" },\n  { date: new Date(\"2023-02-01\"), value: 20, category: \"A\" },\n  { date: new Date(\"2023-03-01\"), value: 30, category: \"A\" },\n  { date: new Date(\"2023-01-01\"), value: 15, category: \"B\" },\n  { date: new Date(\"2023-02-01\"), value: 25, category: \"B\" },\n  { date: new Date(\"2023-03-01\"), value: 35, category: \"B\" },\n];\nawait table.loadArray(data);\nawait table.convert({ date: \"string\" }, { datetimeFormat: \"%x\" });\nawait table.logDotChart(\"date\", \"value\", {\n  smallMultiples: \"category\",\n  smallMultiplesPerRow: 2,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I handle the promise returned by getTables without using async/await?","completion":"You can use then/catch to handle the promise:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nsdb.getTables()\n  .then(tables => {\n    console.log(tables);\n  })\n  .catch(err => {\n    console.error(\"Error retrieving tables:\", err);\n  })\n  .finally(async () => {\n    await sdb.done();\n  });\n```"}
{"prompt":"How can I convert the values in multiple columns to uppercase?","completion":"Here's how you can convert the values in multiple columns to uppercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We convert the 'name' and 'city' columns to uppercase\nawait table.upper([\"name\", \"city\"]);\n// We log the first rows to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select the first 100 rows of a table?","completion":"Here’s how to select the first 100 rows:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Select the first 100 rows\nawait table.selectRows(100);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I limit the number of AI requests per minute to avoid rate limits?","completion":"Set the `rateLimitPerMinute` option to control the request rate.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n  { food: \"pasta\" },\n  { food: \"salad\" },\n  { food: \"tacos\" },\n]);\nawait table.aiEmbeddings(\"food\", \"embeddings\", { rateLimitPerMinute: 15 });\nawait sdb.done();\n```"}
{"prompt":"What file types are supported by `loadDB`?","completion":"The `loadDB` method supports `.db` (DuckDB) and `.sqlite` (SQLite) files. Here's an example loading a DuckDB file:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Load a DuckDB database file\nawait sdb.loadDB(\"./my_database.db\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I load a DuckDB database file into SimpleDB?","completion":"Here is how to load a DuckDB database file:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.loadDB('./my_database.db');\nawait sdb.done();\n```"}
{"prompt":"Can I extract the first part of a string after splitting it by dots?","completion":"Yes, you can overwrite an existing column with the extracted part. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Let's assume the data has a 'fileName' column\nawait table.loadData(\"./data.csv\");\n// Split 'fileName' by dot and extract the first part (index 0), overwriting 'fileName'\nawait table.splitExtract(\"fileName\", \".\", 0, \"fileName\");\n// Log the results to see the updated file names\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I load an array after the table has already been created?","completion":"Yes, you can call loadArray at any time after creating the table.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Some other operations could happen here\nconst data = [\n  { letter: 'c', number: 3 },\n  { letter: 'd', number: 4 },\n];\nawait table.loadArray(data);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I use `getNbValues` to determine the size of my dataset before processing?","completion":"Yes, you can use it to check the dataset size. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the total number of values to determine dataset size\nconst nbValues = await table.getNbValues();\nconsole.log(`Processing dataset with ${nbValues} values.`);\n// Continue with processing...\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I convert a string column to a datetime using a specific format?","completion":"Use the `datetimeFormat` option with DuckDB format specifiers. Example:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Convert 'dateString' column to datetime with format YYYY-MM-DD\nawait table.convert({ dateString: \"datetime\" }, { datetimeFormat: \"%Y-%m-%d\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"What information does `logExtent` provide when I call it?","completion":"`logExtent` outputs the minimum and maximum values of the specified numeric column to the console, helping you understand the data range.\n\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"inventory\");\n// Load data from a CSV file\nawait table.loadData(\"./inventory.csv\");\n// Log the extent of the 'quantity' column\nawait table.logExtent(\"quantity\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use updateWithJS to add a new computed column?","completion":"You can add a new column by returning objects with the new property.\\n\\n````ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"myTable\");\nawait table.loadData('./data.csv');\nawait table.updateWithJS((rows) => {\n  const modifiedRows = rows.map((d) => ({\n    ...d,\n    total: typeof d.price === 'number' && typeof d.quantity === 'number'\n      ? d.price * d.quantity\n      : null,\n  }));\n  return modifiedRows;\n});\nawait table.logTable();\nawait sdb.done();\n````"}
{"prompt":"How can I select the first few rows from my data?","completion":"Here's how you can select the first few rows using `selectRows`:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Select the first 10 rows\nawait table.selectRows(10);\n// Log the selected rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I assign deciles (10 quantiles) to the 'price' column and store the results in a new column named 'decile'?","completion":"Here's how to assign deciles to the 'price' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file containing a 'price' column\nawait table.loadData(\"./data.csv\");\n// Assign deciles (10 quantiles) to the 'price' column, storing in 'decile'\nawait table.quantiles(\"price\", 10, \"decile\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I call sort() with no arguments?","completion":"Calling sort() with no arguments sorts all columns in ascending order from left to right.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nawait table.sort();\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I fill NULL values in a single column using the fill method?","completion":"Here's how to fill NULL values in a single column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file (assuming it has a column named 'column1')\nawait table.loadData(\"./data.csv\");\n// Fill NULL values in 'column1' with the previous non-NULL value\nawait table.fill(\"column1\");\n// Log the table to see the filled data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I trim whitespace from the end of multiple columns, 'description' and 'notes'?","completion":"Here's how you can right-trim whitespace from multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We right-trim whitespace from 'description' and 'notes'\nawait table.trim([\"description\", \"notes\"], { method: \"rightTrim\" });\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I transform closed linestrings in the default geometry column into polygons?","completion":"Here’s how to transform closed linestrings in the default geometry column into polygons:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data (ensure it contains closed linestrings)\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Transform closed linestrings in the default geometry column into polygons\nawait table.linesToPolygons();\n// Log the table to verify the transformation\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geometries to WGS84 and get latitude/longitude order?","completion":"Reproject to WGS84 (EPSG:4326) and the library will output [latitude, longitude] order:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reproject to WGS84\nawait table.reproject(\"WGS84\");\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I round summarized values to two decimal places?","completion":"We set the `decimals` option to 2 to round all summarized values.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Summarize 'price' and 'cost' with rounding to 2 decimal places\nawait table.summarize({ values: [\"price\", \"cost\"], decimals: 2 });\n// Log the summarized table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I filter rows where 'category' is either 'Electronics' OR 'Appliances' using JavaScript syntax?","completion":"You can use the `||` operator for the OR condition. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We filter the table based on the conditions\nawait table.filter(\"category === 'Electronics' || category === 'Appliances'\");\n// We log the table to see the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I split an address column by commas and extract the city (the second part) into a new column?","completion":"Here's how to split an address column by commas and extract the city into a new 'city' column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file (assuming it has an 'address' column)\nawait table.loadData(\"./addresses.csv\");\n// We split the 'address' column by comma and extract the second part (index 1) into a new 'city' column\nawait table.splitExtract(\"address\", \",\", 1, \"city\");\n// We log the table to see the result\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I keep rows that match any of several values in a column?","completion":"You can keep rows that match any of several values in a column by passing an array of values. For example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Keep rows where job is 'accountant' or 'developer'\nawait table.keep({ job: [\"accountant\", \"developer\"] });\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is updateWithJS efficient for large tables?","completion":"updateWithJS can be slow for large tables because data is transferred to JavaScript.\\n\\n````ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"largeTable\");\nawait table.loadData('./large.csv');\n// Using updateWithJS on a large table may be slow\nawait table.updateWithJS((rows) => rows);\nawait table.logTable();\nawait sdb.done();\n````"}
{"prompt":"How can I identify outliers in the 'salary' column within each 'gender' category and store results in 'isSalaryOutlier'?","completion":"Here's how you can identify outliers in 'salary' by gender category:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"genderTable\");\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We identify outliers in 'salary' within 'gender' categories\nawait table.outliersIQR(\"salary\", \"isSalaryOutlier\", { categories: \"gender\" });\n// We log the table to see results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load data from a single CSV file?","completion":"Here's how to load a single CSV file:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I compute the Haversine distance in kilometers and round it to two decimal places?","completion":"Here’s how to compute the Haversine distance in kilometers and round it to two decimal places (geometries must be in EPSG:4326):\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Compute Haversine distance in kilometers, rounded to 2 decimal places\\nawait table.distance(\"point1\", \"point2\", \"distance_km\", {\\n  method: \"haversine\",\\n  unit: \"km\",\\n  decimals: 2,\\n});\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How do I trim a specific character instead of whitespace?","completion":"Use the `character` option to specify the string to trim.\n\n```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Trim leading and trailing asterisks from 'productCode'\nawait table.trim(\"productCode\", { character: \"*\" });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that the column passed to getVar is valid before calculating variance?","completion":"You should verify the column exists and is numeric before calling getVar. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Check if column exists and is numeric\nif (table.schema.hasColumn(\"values\") && table.schema.getColumnType(\"values\") === \"number\") {\n  const variance = await table.getVar(\"values\");\n  console.log(\"Variance:\", variance);\n} else {\n  console.error(\"Invalid column or type\");\n}\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I get the bounding box of the geometries in the default geometry column?","completion":"Here's how to get the bounding box using the default geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./geodata.geojson\");\n// Get the bounding box using the default geometry column\nconst bbox = await table.getBoundingBox();\nconsole.log(bbox);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I compute a rolling median of a column?","completion":"To calculate a rolling median of the `value` column with 4 preceding and 4 following rows, use the following example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"dataTable\");\n// Load the data (assumes a CSV with a `value` column)\nawait table.loadData(\"./data.csv\");\n// Compute a rolling median of `value`\nawait table.rolling(\"value\", \"rollingMedianValue\", \"median\", 4, 4);\n// Log the results to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I fix invalid geometries in a specific column named 'myGeom'?","completion":"Here's how you can fix invalid geometries in a specific column named 'myGeom':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We fix invalid geometries in the 'myGeom' column\nawait table.fixGeo(\"myGeom\");\n// We log the table to verify fixed geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I verify that the coordinates were actually flipped?","completion":"You can log the table before and after calling flipCoordinates to compare the geometry values:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData('./my-geodata.geojson');\n// Log the original coordinates\nconsole.log('Before flip:');\nawait table.logTable();\n// Flip coordinates\nawait table.flipCoordinates();\n// Log the flipped coordinates\nconsole.log('After flip:');\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is there a way to avoid the default 'value' column in my summary?","completion":"Yes, set `noColumnValue` to true. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We summarize without the default 'value' column\nawait table.summarize({\n  values: \"sales\",\n  noColumnValue: true\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What data types are supported by the `setTypes` method?","completion":"The `setTypes` method supports the following data types: `integer`, `float`, `number`, `string`, `date`, `time`, `datetime`, `datetimeTz`, `bigint`, `double`, `varchar`, `timestamp`, `timestamp with time zone`, `boolean`, and `geometry`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We set the data types for the columns\nawait table.setTypes({\n  id: \"integer\",\n  name: \"string\",\n  date: \"date\",\n  price: \"float\",\n  is_active: \"boolean\",\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I compute a cumulative sum within multiple categories?","completion":"Here's how you can compute a cumulative sum within multiple categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Note: Ensure the table is sorted by all category columns and then by the order column before calling accumulate.\nawait table.accumulate(\"revenue\", \"cumulativeRevenue\", { categories: [\"region\", \"product_category\"] });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select multiple columns from a table?","completion":"Here’s how you can select multiple columns from a table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData('./data.csv');\n// Select the 'firstName' and 'lastName' columns\nawait table.selectColumns(['firstName', 'lastName']);\n// Log the table to see the remaining columns\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I use JavaScript syntax for filtering the top rows?","completion":"You can use JavaScript conditions like this:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get top 5 rows where price is greater than 100 using JS syntax\nconst filteredTopRows = await table.getTop(5, { conditions: \"price > 100\" });\nconsole.log(filteredTopRows);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I trim whitespace from the beginning of multiple columns, 'city' and 'state'?","completion":"Here's how you can trim from the beginning of multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We left-trim whitespace from the 'city' and 'state' columns\nawait table.trim(['city', 'state'], { method: 'leftTrim' });\n// We log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify the independent variable (x) for linear regression?","completion":"Provide the column name for `x` in the options object.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Compute linear regressions with 'column1' as the independent variable\nawait table.linearRegressions({ x: \"column1\" });\nawait sdb.done();\n```"}
{"prompt":"How can I write the data from my table to a Google Sheet?","completion":"Here's how you can write the table data to a Google Sheet:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We write the data to a Google Sheet\nawait table.toSheet(\"https://docs.google.com/spreadsheets/d/.../edit#gid=0\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I want to create an index on the new embeddings column to speed up similarity searches. How do I do that?","completion":"You can create an index on the new column by setting the `createIndex` option to `true`. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadArray([{ data: \"example\" }]);\n// Generate embeddings and create an index on the new column\nawait table.aiEmbeddings(\"data\", \"embeddings\", { createIndex: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I omit the column parameter when calling flipCoordinates?","completion":"If you omit the column argument, flipCoordinates will automatically try to find a geometry column in the table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData('./my-geodata.geojson');\n// Flip coordinates in the automatically detected geometry column\nawait table.flipCoordinates();\n// Log the table to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve the last 10 rows of my table while preserving the original order?","completion":"Here's how you can retrieve the last 10 rows of your table in their original order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We get the last 10 rows in their original order\nconst bottom10OriginalOrder = await table.getBottom(10, {\n  originalOrder: true\n});\n// We log the results\nconsole.log(bottom10OriginalOrder);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I merge two tables using a within spatial join with a distance of 10 units (SRS) and store results in a new table?","completion":"Set distance to 10 and outputTable to true to create a new table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"./dataA.csv\");\nconst tableB = sdb.newTable();\nawait tableB.loadData(\"./dataB.csv\");\n// Merge tableA with tableB using within (10 units) and store in new table\nconst tableC = await tableA.joinGeo(tableB, \"within\", { distance: 10, outputTable: true });\nawait sdb.done();\n```"}
{"prompt":"How do I compute distances in kilometers using the Haversine method?","completion":"Here's how to use Haversine with kilometers:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// Load WGS84 geospatial data\nawait table.loadGeoData(\"./wgs84_points.geojson\");\n// Compute Haversine distance in kilometers\nawait table.distance(\"pointA\", \"pointB\", \"distance_km\", {\n  method: \"haversine\",\n  unit: \"km\"\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I trim a specific character from multiple columns?","completion":"Here’s how to trim a custom character (e.g., asterisks) from multiple columns:\\n\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable();\\nawait table.loadData(\\\"./data.csv\\\");\\nawait table.trim(['colA', 'colB'], { character: '*', method: 'trim' });\\nawait sdb.done();\\n```\\n"}
{"prompt":"How can I round the skewness result to a specific number of decimal places?","completion":"Use the `decimals` option in the `getSkew` method to round the result.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Calculate skewness of the \"revenue\" column, rounded to 2 decimals\nconst skewRounded = await table.getSkew(\"revenue\", { decimals: 2 });\nconsole.log(\"Rounded skewness of revenue:\", skewRounded);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use Ollama for generating embeddings?","completion":"Here's how to use Ollama for generating embeddings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load some data into the table\nawait table.loadArray([\n  { text: \"Example 1\" },\n  { text: \"Example 2\" }\n]);\n// Generate embeddings using Ollama\nawait table.aiEmbeddings(\"text\", \"embeddings\", {\n  ollama: true // Enable Ollama\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify data types for certain columns when loading data?","completion":"You can use the `columnTypes` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load data with specified column types\nawait table.loadData(\n  \"./data.csv\",\n  { \n    columnTypes: {\n      \"id\": \"number\",\n      \"name\": \"string\"\n    }\n  }\n);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get GeoJSON data with polygon coordinates rewound for D3.js compatibility?","completion":"Set `rewind: true` in the options object to rewind polygon coordinates for D3.js.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./data.geojson\");\nconst geojson = await table.getGeoData(undefined, { rewind: true });\nconsole.log(geojson);\nawait sdb.done();\n```"}
{"prompt":"How can I convert a single column to lowercase?","completion":"Here's how you can convert a single column to lowercase:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We convert the 'name' column to lowercase\nawait table.lower(\"name\");\n// We log the first rows to see the changes\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I filter the bottom rows using specific conditions?","completion":"Yes, you can use the `conditions` option to filter rows. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the last 10 rows where category is 'Electronics'\nconst filteredBottomRows = await table.getBottom(10, {\n  conditions: \"category === 'Electronics'\"\n});\nconsole.log(filteredBottomRows);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I perform a spatial join where geometries intersect between two tables?","completion":"Use the `intersect` method to merge data based on overlapping geometries:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create left and right tables\nconst tableA = sdb.newTable(\"leftTable\");\nconst tableB = sdb.newTable(\"rightTable\");\n// Load data into both tables\nawait tableA.loadGeoData(\"./left.geojson\");\nawait tableB.loadGeoData(\"./right.geojson\");\n// Perform intersect join\nawait tableA.joinGeo(tableB, \"intersect\");\n// Log the results\nawait tableA.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I specify the number of rows to log?","completion":"You can pass a number to `logTable` to specify how many rows to log:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the first 50 rows\nawait table.logTable(50);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use `getMax` after filtering my data?","completion":"You can chain methods to filter first, then get the maximum. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Filter rows where 'category' is 'Electronics'\nawait table.filter({ category: \"Electronics\" });\n// Get max price from filtered results\nconst maxPrice = await table.getMax(\"price\");\nconsole.log(\"Max price in Electronics:\", maxPrice);\n// We close everything\nawait sdb.done();\n```\nThis finds the maximum price only for Electronics category."}
{"prompt":"How do I format labels to uppercase and values to two decimal places in the bar chart?","completion":"Here's how you can format labels to uppercase and values to two decimal places using the `formatLabels` and `formatValues` options:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadArray([\n  { category: \"A\", value: 10.5 },\n  { category: \"B\", value: 20.75 },\n]);\n// Format labels to uppercase and values to two decimals\nawait table.logBarChart(\"category\", \"value\", {\n  formatLabels: (d) => d.toString().toUpperCase(),\n  formatValues: (d) => d.toFixed(2),\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the data types of all columns in a table?","completion":"Use the `getTypes` method on a `SimpleTable` instance and await its result. This returns an object mapping column names to their data types.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData(\"./data.csv\");\n// Retrieve the data types of all columns\nconst types = await table.getTypes();\nconsole.log(types); // e.g., { id: \"BIGINT\", name: \"VARCHAR\" }\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I find the highest value in a column like 'price' using the Simple Data Analysis library?","completion":"Use the `getMax` method to retrieve the maximum value from a specified column.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the maximum value in the 'price' column\nconst maxPrice = await table.getMax(\"price\");\n// Log the result\nconsole.log(maxPrice);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I add a geometry type column to my table?","completion":"You can add a geometry type column by calling typeGeo after loading your data.\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Add geometry type column\nawait table.typeGeo(\"geometryType\");\n// Log table to verify\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I keep only the rows where the 'country' column is either 'USA' or 'Canada'?","completion":"Here's how you can keep rows based on multiple values in a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We keep only rows where the country is USA or Canada\nawait table.keep({ country: [\"USA\", \"Canada\"] });\n// We log the table to see the filtered results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I iterate over each table and perform an action, such as logging its name?","completion":"You can loop through the array returned by `getTables()` and access each table’s properties. Assuming each `SimpleTable` has a `name` property, here’s how you could log it:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// Create a couple of tables for demonstration\nsdb.newTable(\"table1\");\nsdb.newTable(\"table2\");\n// Retrieve all tables\nconst tables = await sdb.getTables();\n// Iterate and log each table’s name\nfor (const tbl of tables) {\n  console.log(`Table name: ${tbl.name}`);\n}\nawait sdb.done();\n```"}
{"prompt":"How do I reproject all geometries in the default column to EPSG:3347?","completion":"You can reproject all geometries in the default column to EPSG:3347 like this:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Reproject to EPSG:3347\nawait table.reproject(\"EPSG:3347\");\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I get a row where a column equals a specific string value?","completion":"To get a row where a column matches a specific string, use a condition like `column = 'value'`.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We get the row where name is 'John'\nconst johnsRow = await table.getRow(`name = 'John'`);\n// We log the row\nconsole.log(johnsRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I access specific descriptive statistics for a particular column?","completion":"You can access specific statistics by filtering the results. For example, to get the number of null values in a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get descriptive information about the table's columns\nconst description = await table.getDescription();\n// Access null count for a specific column (e.g., 'age')\nconst nullCount = description.find(col => col.name === \"age\")?.nullCount;\nconsole.log(\"Null count in age column:\", nullCount);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I select a percentage of rows randomly from my table?","completion":"Here's how to select 10% of rows randomly from a table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We select 10% of rows randomly\nawait table.sample(\"10%\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the variance of a numeric column using SimpleTable?","completion":"Here’s how you can get the variance of the 'sales' column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./sales.csv\");\n// Get the variance of the 'sales' column\nconst variance = await table.getVar(\"sales\");\nconsole.log(variance); // e.g., 25.5\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I create an index on my embeddings column for faster searches?","completion":"To speed up your searches, you can create an index on the embeddings column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"foodTable\");\n// Load sample data into the table\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n]);\n// Generate embeddings and create an index\nawait table.aiEmbeddings(\"food\", \"embeddings\");\n// Find similar items with index creation enabled\nconst similarItems = await table.aiVectorSimilarity(\n  \"fast food\",\n  \"embeddings\",\n  2,\n  { createIndex: true },\n);\n// Log the results\nawait similarItems.logTable();\n// We close everything\nawait sdb.done();\n```\nThis example creates an index to improve search performance."}
{"prompt":"How can I compute the cumulative sum of a column grouped by multiple categories?","completion":"Here's how you can compute the cumulative sum of 'revenue' grouped by 'region' and 'product_category' and store the results in 'cumulativeRevenue':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We compute the cumulative sum of 'revenue' within 'region' and 'product_category' categories\nawait table.accumulate(\"revenue\", \"cumulativeRevenue\", {\n  categories: [\"region\", \"product_category\"],\n});\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows where the status is 'inactive'?","completion":"Here's how you can remove rows matching a single value in a column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We remove rows where status is 'inactive'\nawait table.remove({ status: \"inactive\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I name the new summary table explicitly?","completion":"Pass a string to `outputTable`. The new table will use that name.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst columns = await table.getColumns();\nconst mySummary = await table.summarize({ values: columns, outputTable: \"mySummary\" });\nawait mySummary.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I sort all columns in ascending order?","completion":"Here's how you can sort all columns in ascending order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We sort all columns in ascending order\nawait table.sort();\n// We log the table to see the sorted data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I replace NULL values in a date column with a specific date?","completion":"Use the `replaceNulls` method with the column name and a Date object as the replacement value.\n\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Replace NULL values in 'dateColumn' with 2023-01-01\nawait table.replaceNulls(\"dateColumn\", new Date(\"2023-01-01\"));\n// We close everything\nawait sdb.done();```"}
{"prompt":"How can I calculate Z-scores for a column within different categories (e.g., by department)?","completion":"Here's how you can compute Z-scores for a column within categories (like department):\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Calculate Z-scores for 'salary' within 'department' categories\nawait table.zScore(\"salary\", \"salaryZScore\", { categories: \"department\" });\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate a rolling sum of 'quantity' grouped by 'product_id', using a window of 4 preceding rows and no following rows?","completion":"Here's how you can calculate a rolling sum with categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We compute a rolling sum of 'quantity' within 'product_id' categories, using 4 preceding rows and no following rows\nawait table.rolling(\"quantity\", \"rollingSumQuantity\", \"sum\", 4, 0, { categories: \"product_id\" });\n// We log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging for cache operations?","completion":"You can enable verbose logging by setting the `cacheVerbose` option when creating the `SimpleDB` instance. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB({ cacheVerbose: true });\n// We create a new table\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What if the tables have different columns? How can I unify them during insertion?","completion":"If tables have different columns, set unifyColumns to true to fill missing columns with NULL values.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create two tables with different schemas\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into the tables\nawait tableA.loadData(\"./dataA.csv\"); // columns: id, name\nawait tableB.loadData(\"./dataB.csv\"); // columns: id, age\n// Insert rows from tableB into tableA, unifying columns\nawait tableA.insertTables(\"tableB\", { unifyColumns: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I group by multiple categories when cloning a column with an offset?","completion":"Here's how you can clone a column with an offset, grouped by both 'stock_symbol' and 'exchange' categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// Clone 'stock_price' as 'prev_price_by_stock_and_exchange', offsetting by 1 row within each 'stock_symbol' and 'exchange' category\nawait table.cloneColumnWithOffset(\n  \"stock_price\",\n  \"prev_price_by_stock_and_exchange\",\n  {\n    offset: 1,\n    categories: [\"stock_symbol\", \"exchange\"],\n  }\n);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log the total execution duration?","completion":"Here's how to enable duration logging:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance with duration logging\nconst sdb = new SimpleDB({\n  logDuration: true\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What does the `normalize` method do?","completion":"Normalize a column and store results in a new column.\n\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Normalize 'score' into 'score_norm'\nawait table.normalize(\"score\", \"score_norm\");\n// Log results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geometries to EPSG:3347 when the original projection is automatically detected?","completion":"Here's how to reproject using automatic detection of the source SRS:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./data.geojson\");\n// Reproject to EPSG:3347 (auto-detects source)\nawait table.reproject(\"EPSG:3347\");\n// Log the results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the median value of a numeric column using SimpleTable?","completion":"To get the median of a column, call `getMedian` on the table instance:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data first (example path)\nawait table.loadData(\"./data.csv\");\n// Get the median of the 'age' column\nconst medianAge = await table.getMedian(\"age\");\nconsole.log(\"Median age:\", medianAge);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I get unique numerical values from a column?","completion":"Yes, `getUniques` works with numerical columns too. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get unique numerical values from the 'age' column\nconst uniqueAges = await table.getUniques(\"age\");\nconsole.log(\"Unique ages:\", uniqueAges);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to get the first row where the 'category' is 'Book' using SQL syntax?","completion":"Here's how you can get the first row matching a condition using SQL syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Get the first row where category is 'Book' using SQL syntax\nconst firstRowBook = await table.getFirstRow({\n  conditions: \"category = 'Book'\",\n});\nconsole.log(firstRowBook);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What happens if I skip more rows than the table contains?","completion":"Skipping more rows than exist results in an empty table:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load a small CSV file\nawait table.loadData(\"./small.csv\");\n// Skip 100 rows, more than the table has\nawait table.skip(100);\n// Log the table to see it is empty\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I remove multiple tables by their names?","completion":"Here's how to remove multiple tables by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.removeTables([\"customers\", \"products\"]);\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to lower a column that doesn’t exist?","completion":"The method will reject the promise, so you should handle it with a try/catch. Example:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load some data\nawait table.loadData(\"./data.csv\");\ntry {\n  // Attempt to lower a non‑existent column\n  await table.lower(\"missingColumn\");\n} catch (err) {\n  console.error(\"Column not found:\", err);\n}\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I clean the column names in my table?","completion":"Here's how you can clean the column names in your table using the `cleanColumnNames` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We clean the column names\nawait table.cleanColumnNames();\n// We log the table to see the cleaned column names\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove duplicate rows based on multiple columns?","completion":"To remove duplicates based on multiple columns, pass an array of column names in options.on.\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load data from CSV\\nawait table.loadData(\"./data.csv\");\\n// Remove duplicates based on 'firstName' and 'lastName'\\nawait table.removeDuplicates({ on: [\"firstName\", \"lastName\"] });\\n// Log the resulting table\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"Can I specify the data types for each column during loading?","completion":"Yes, you can use `columnTypes` to define data types. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Define column types\nconst columnTypes = {\n  id: \"number\",\n  name: \"string\"\n};\n// Load data with specified column types\nawait table.loadData(\"./data.csv\", { columnTypes });\n// Log the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I write JSON data with dates formatted as ISO strings?","completion":"Here's how you can write JSON data with dates formatted as ISO strings:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We write JSON data with dates formatted as ISO strings\nawait table.writeData(\"./output_dates.json\", { formatDates: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I use SQL-like conditions to filter the data?","completion":"Yes, you can use SQL-like conditions within the `conditions` option of the `getData` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./my-data.csv\");\n// We get data filtered by a condition\nconst booksData = await table.getData({ conditions: `category = 'Book'` });\nconsole.log(booksData);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I assign ascending ranks to a column named 'score' and store them in a new column 'rank'?","completion":"Here's how you can assign ascending ranks to the 'score' column without categories.\n\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file (assuming it has a 'score' column)\nawait table.loadData(\"./data.csv\");\n// Assign ascending ranks to 'score' and store in 'rank'\nawait table.ranks(\"score\", \"rank\");\n// Log the table to see the new rank column\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I handle multiple category columns in rolling aggregations?","completion":"You can pass an array of column names to group by multiple categories. Here's how:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"salesTable\");\n// We load data from the file\nawait table.loadData(\"./transactions.csv\");\n// Compute rolling sum within each combination of 'region' and 'customer_id'\nawait table.rolling(\"amount\", \"rollingSumAmount\", \"sum\", 4, 0, {\n  categories: [\"region\", \"customer_id\"]\n});\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"Can I use `logExtent` with geospatial data?","completion":"Yes, you can use `logExtent` with numeric columns in geospatial data. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We log the extent of a numeric column, e.g., 'population'\nawait table.logExtent(\"population\");\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I check if geometries in two columns intersect and store the result in a new column?","completion":"Here’s how to check if geometries in 'geomA' and 'geomB' intersect and store the result in 'doIntersect':\\n```\\nimport { SimpleDB } from \\\"@nshiab/simple-data-analysis\\\";\\n// We start a SimpleDB instance\\nconst sdb = new SimpleDB();\\n// We create a new table\\nconst table = sdb.newTable();\\n// Load geospatial data\\nawait table.loadGeoData(\\\"./my-geodata.geojson\\\");\\n// Perform intersection check\\nawait table.intersect(\\\"geomA\\\", \\\"geomB\\\", \\\"doIntersect\\\");\\n// Log the results\\nawait table.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"What does the `logNbRows` method return?","completion":"`logNbRows` returns the `SimpleTable` instance, allowing further method calls.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Log rows and keep the table instance\nconst tbl = await table.logNbRows();\n// tbl is the same table instance\nconsole.log(tbl === table); // true\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I get the GeoJSON data from a specific geometry column named 'geometry'?","completion":"Here's how to get the GeoJSON from a specific geometry column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./data.geojson\");\n// Get GeoJSON from specific column 'geometry'\nconst geojson = await table.getGeoData(\"geometry\");\nconsole.log(geojson);\nawait sdb.done();\n```"}
{"prompt":"How do I compute correlations between a specific column and all other numeric columns?","completion":"Here's how you can compute correlations between a specific column and all other numeric columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"correlationTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Compute correlations between 'price' and all other numeric columns\nawait table.correlations({ x: \"price\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I rank values in descending order?","completion":"To rank the `score` column in descending order and store the result in a new `descRank` column:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./data.csv\");\n// Assign descending ranks\nawait table.ranks(\"score\", \"descRank\", { order: \"desc\" });\n// Log results\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I buffer geometries in a specific column named 'pointsGeom' with a distance of 10 units and store the result in a new column called 'pointsBuffer'?","completion":"Here's how you can buffer geometries in a specific column named 'pointsGeom' with a distance of 10 units and store the result in a new column called 'pointsBuffer':\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute buffer of 10 units around the 'pointsGeom' column\nawait table.buffer(\"pointsBuffer\", 10, { column: \"pointsGeom\" });\n// Log the table to see the buffered geometries\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I remove multiple tables at once?","completion":"Here's how to remove multiple tables by name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Remove multiple tables by name\nawait sdb.removeTables([\"customers\", \"products\"]);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I rename multiple columns in my table?","completion":"Here's how you can rename multiple columns using the `renameColumns` method:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Rename multiple columns\nawait table.renameColumns({\n  \"How old?\": \"age\",\n  \"Man or woman?\": \"sex\"\n});\n// Log the table to verify changes\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify the geometry column if my GeoJSON data has multiple geometry columns?","completion":"You can use the `column` option in the `writeMap` method to specify the column containing the geometries. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadGeoData(\"./my-geodata.geojson\");\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  // Your map function here\n  return null;\n};\n\nconst outputPath = \"./output/map.png\";\n\nawait table.writeMap(mapFunction, outputPath, { column: \"myGeometryColumn\" });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I rename columns that contain special characters or spaces?","completion":"If your column names contain special characters or spaces, you can still rename them by specifying the exact old name in the mapping.\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData('./data.csv');\n// Rename columns with special characters\nawait table.renameColumns({ 'How old?': 'age', 'Man or woman?': 'sex' });\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I load a Parquet file from a remote URL?","completion":"Here's how you can load a Parquet file from a remote URL using the `loadData` method. This allows you to access data directly from a web server."}
{"prompt":"How to perform a left join using auto-detection of the common column?","completion":"Here's how to perform a left join using auto-detection of the common column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableA.loadData(\"./tableA.csv\");\nawait tableB.loadData(\"./tableB.csv\");\n// Perform left join (auto-detect common column) and overwrite tableA\nawait tableA.join(tableB);\nawait sdb.done();\n```"}
{"prompt":"Can I customize the format of the x and y axis values in the line chart?","completion":"Yes, you can customize the format of the x and y axis values using the `formatX` and `formatY` options. These options accept functions that receive the raw value and return a formatted string."}
{"prompt":"How do I retrieve the very first row of a table without any filtering?","completion":"Here’s how to get the first row of a table without applying any conditions.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get the first row of the table\nconst firstRow = await table.getFirstRow();\nconsole.log(firstRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"I have two tables and I want to compare their column counts. How can I do that?","completion":"You can use `getNbColumns` on each table and compare the results. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two tables\nconst table1 = sdb.newTable(\"table1\");\nconst table2 = sdb.newTable(\"table2\");\n// Load data into both tables\nawait table1.loadData(\"./data1.csv\");\nawait table2.loadData(\"./data2.csv\");\n// Get column counts\nconst nbColumns1 = await table1.getNbColumns();\nconst nbColumns2 = await table2.getNbColumns();\nconsole.log(`Table 1 has ${nbColumns1} columns and Table 2 has ${nbColumns2} columns.`);\n// We close everything\nawait sdb.done();\n```\nThis will show how many columns each table has."}
{"prompt":"How can I change the width of the generated bar chart?","completion":"You can change the width of the chart using the `width` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data\nconst data = [\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n];\n// Load the data\nawait table.loadArray(data);\n// Generate and log the bar chart with a custom width\nawait table.logBarChart(\"category\", \"value\", {\n  width: 60,\n});\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the length of line geometries in kilometers and store the result in a new column?","completion":"Here's how you can calculate the length of line geometries in kilometers and store it in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Compute the length of line geometries in kilometers and store in 'length_km'\nawait table.length(\"length_km\", { unit: \"km\" });\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I extract the last 3 characters from a column named \"productCode\"?","completion":"Here is how to extract the last 3 characters from the 'productCode' column:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData('./sales.csv');\n// Extract last 3 characters from productCode\nawait table.right('productCode', 3);\n// Log table\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I make all string values in my table lowercase without specifying each column?","completion":"You can call `lower` without any arguments to convert all string columns. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Convert all string columns to lowercase\nawait table.lower();\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I log a specific number of rows, for example 50?","completion":"You can specify the number of rows to log by passing that number to `logTable`:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Log the first 50 rows\nawait table.logTable(50);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I specify which columns to use for joining two tables?","completion":"You can specify the common column(s) using the `commonColumn` option. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create two tables and load data into them\nconst tableA = sdb.newTable(\"tableA\");\nawait tableA.loadData(\"./dataA.csv\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform a join using the 'id' column\nawait tableA.join(tableB, {\n  commonColumn: \"id\"\n});\n// Log the joined data\nawait tableA.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I visualize my binned data?","completion":"After creating bins, you can use the `logTable` method to see your binned data:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Create bins for 'temperature' with interval 2 degrees\nawait table.bins(\"temperature\", 2, \"temp_bins\");\n// Log the table to see the new binned column\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```\n"}
{"prompt":"How do I compute proportions within a single category and round to two decimal places?","completion":"Here's how you can compute vertical proportions within a single category and round to two decimal places:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We compute proportions for 'column1' within 'column2' categories, rounded to 2 decimals\nawait table.proportionsVertical(\"column1\", \"perc\", {\n  categories: \"column2\",\n  decimals: 2,\n});\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I use the `rateLimitPerMinute` option to control the number of AI requests per minute?","completion":"Here's how you can use the `rateLimitPerMinute` option to control the number of AI requests per minute.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// Load some data\nawait table.loadArray([ { \"product\": \"apple\" }, { \"product\": \"banana\" }, { \"product\": \"orange\" } ]);\n// Use aiRowByRow with a rate limit\nawait table.aiRowByRow(\n  \"product\",\n  \"description\",\n  \"Write a short description of this product.\",\n  { \n    rateLimitPerMinute: 5, // Limit to 5 requests per minute\n  }\n);\n// Log the table to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I specify a particular column for linesToPolygons?","completion":"If your linestring geometries are stored in a column named \"routeLines\", pass that column name to the method:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Transform closed linestrings in the \"routeLines\" column into polygons\nawait table.linesToPolygons(\"routeLines\");\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I preserve the original order when logging bottom rows?","completion":"Use the `originalOrder` option to maintain the order:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log the last 5 rows in original order\nawait table.logBottom(5, { originalOrder: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify certain columns to check for missing values?","completion":"Yes, you can specify columns to check for missing values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Remove rows with missing values in 'age' or 'income' columns\nawait table.removeMissing({ columns: ['age', 'income'] });\n// Log the cleaned table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I limit the number of characters logged for strings in the table?","completion":"You can limit the number of characters logged for strings using the `nbCharactersToLog` option when creating a SimpleTable. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table with options\nconst table = sdb.newTable(\"myTable\", {}, { nbCharactersToLog: 20 });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What information does getDescription return?","completion":"The getDescription method returns an array of objects, each containing statistics for a column:\n```ts\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst description = await table.getDescription();\n// Print the raw JSON to see the structure\nconsole.log(JSON.stringify(description, null, 2));\nawait sdb.done();\n```"}
{"prompt":"How can I add a new numeric column based on existing columns?","completion":"Here's how to add a new numeric column by adding two existing columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load sample data with columns 'a' and 'b'\nawait table.loadData(\"./data.csv\");\n// Add a new column 'total' as float, sum of 'a' and 'b'\nawait table.addColumn(\"total\", \"float\", \"a + b\");\n// Log the updated table\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I customize the style of my chart?","completion":"You can use the style option to customize your chart's appearance:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Sample data\nconst data = [{ year: 2024, value: 10 }, { year: 2025, value: 15 }];\nawait table.loadArray(data);\n// Chart function using Observable Plot\nconst chartFunction = (plotData: unknown[]) =>\n  plot({\n    marks: [\n      dot(plotData, { x: \"year\", y: \"value\" }),\n    ],\n  });\n// Custom style options\nconst styleOptions = {\n  style: \"background-color: #f0f0f0; padding: 20px;\",\n};\n// Save the chart with custom styles\nconst outputPath = \"output/chart.png\";\nawait table.writeChart(chartFunction, outputPath, styleOptions);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with a default name?","completion":"Here's how you can create a new table with a default name:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst myTable = sdb.newTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I specify which geometry column to use when getting GeoJSON data?","completion":"Yes, you can specify the geometry column. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Get GeoJSON data from a specific geometry column named 'geom'\nconst geojson = await table.getGeoData(\"geom\");\nconsole.log(geojson);\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"How can I use the `longer` method to restructure my table?","completion":"Here's how you can use the `longer` method to transform a wide-format table into a long-format table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from a file\nawait table.loadData(\"./my-data.csv\");\n// We restructure the table by stacking columns '2021', '2022', and '2023'\n// into new columns named 'year' and 'employees'\nawait table.longer([\"2021\", \"2022\", \"2023\"], \"year\", \"employees\");\n// We log the table to see the restructured data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I combine filtering, row count, and type logging in one call?","completion":"Yes, combine the options in a single object:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Log up to 30 rows where age > 30, including column types\nawait table.logTable({ nbRowsToLog: 30, types: true, conditions: `age > 30` });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I exclude a category using NOT in getLastRow?","completion":"Use NOT to exclude a category.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Retrieve the last row where category is not 'Book'\nconst lastNotBookRow = await table.getLastRow({\n  conditions: \"category != 'Book'\",\n});\n// Log the result\nconsole.log(lastNotBookRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I assign ascending ranks to a column without any categories?","completion":"Here's how you can assign ascending ranks without categories:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Assign ascending ranks (default) to the 'score' column, storing in 'rank'\nawait table.ranks(\"score\", \"rank\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I perform a right join?","completion":"Here’s how to perform a right join, keeping all rows from the right table.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create two tables\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\n// Load data into both tables\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform right join\nawait tableA.joinGeo(tableB, \"intersect\", { type: \"right\" });\n// Log the joined table\nawait tableA.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I see the full prompt sent to the AI for debugging?","completion":"Enable verbose mode to log the full prompt sent to the AI:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// We generate and execute a query with verbose logging\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { verbose: true }\n);\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Do I need to load data before calling linesToPolygons?","completion":"Yes, you must load geospatial data into the table before calling linesToPolygons:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load geospatial data first\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// Now you can transform closed linestrings\nawait table.linesToPolygons();\n// Log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do you round values in a single column using the `round` method?","completion":"Here's how to round values in one column to the nearest integer:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Round 'sales' column to nearest integer\nawait table.round(\"sales\");\n// Log the rounded values\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I see the list of columns in my table?","completion":"Here's how you can log the column names of your table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"path/to/your/data.csv\");\n// We log the column names\nawait table.logColumns();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I properly close the database connection and free up memory?","completion":"You should use the `done()` method to close the database connection and free up memory. Here's an example:\n```typescript\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Perform database operations...\n// Close the database connection and clean up resources\nawait sdb.done();\n```"}
{"prompt":"How do I assign ranks within specific categories?","completion":"You can assign ranks within categories by specifying the `categories` option:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We assign ranks within each 'department' category based on 'salary'\nawait table.ranks(\"salary\", \"salaryRank\", { categories: \"department\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n"}
{"prompt":"What if I only want to replace when the entire cell matches the old string?","completion":"Set the `entireString` option to `true`. This will replace only cells that exactly match the old value:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Replace only if the whole cell is \"kilograms\"\nawait table.replace(\"weight\", { \"kilograms\": \"kg\" }, { entireString: true });\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How can I log only rows that meet a certain condition, for example status === 'active'?","completion":"Pass a conditions string using JavaScript syntax:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We log rows where status is 'active'\nawait table.logTable({ conditions: `status === 'active'` });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Is it possible to replace NULL values with a date?","completion":"Yes, you can use dates as replacement values:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start the database\nconst sdb = new SimpleDB();\n// Create table and load data\nconst table = sdb.newTable();\nawait table.loadData(\"projects.csv\");\n// Replace NULLs in 'start_date' with a default date\nawait table.replaceNulls(\"start_date\", new Date(\"2024-01-01\"));\n// Log the updated data\nawait table.logTable();\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How can I validate that all columns have the expected data types using the description?","completion":"Compare the `type` field of each description object to your expected schema.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\nconst description = await table.getDescription();\n// Define expected types\nconst expectedTypes = {\n  id: \"number\",\n  name: \"string\",\n  price: \"number\",\n  category: \"string\"\n};\n// Validate each column\ndescription.forEach(col => {\n  const expected = expectedTypes[col.column];\n  if (expected && col.type !== expected) {\n    console.warn(`Column ${col.column} has type ${col.type} but expected ${expected}`);\n  }\n});\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows that match any of several conditions?","completion":"Use the OR operator. For example, to remove rows where category is 'Electronics' or 'Appliances':\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"products\");\nawait table.loadData(\"./products.csv\");\nawait table.removeRows(`category === 'Electronics' || category === 'Appliances'`);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Can I insert rows from multiple tables into one table?","completion":"Yes, you can insert rows from multiple tables into a single table:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// Create source and destination tables\nconst srcTable1 = sdb.newTable(\"sourceTable1\");\nconst srcTable2 = sdb.newTable(\"sourceTable2\");\nconst destTable = sdb.newTable(\"destTable\");\n// Load data into source tables\nawait srcTable1.loadData(\"./data1.csv\");\nawait srcTable2.loadData(\"./data2.csv\");\n// Insert rows from multiple sources into destination\nawait destTable.insertTables([srcTable1, srcTable2]);\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"What does logNbRows return?","completion":"The method returns the SimpleTable instance, allowing further chaining:\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('metrics');\nawait table.loadData('./metrics.csv');\nawait table.logNbRows(); // returns table\n// You could continue with other operations here\nawait sdb.done();\n```"}
{"prompt":"What does the `latLon` method do?","completion":"The `latLon` method extracts the latitude and longitude coordinates from point geometries in a specified column and stores them in new columns.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We extract latitude and longitude from the 'geom' column\n// and store them in new 'lat' and 'lon' columns\nawait table.latLon(\"geom\", \"lat\", \"lon\");\n// We log the first rows to see the extracted latitude and longitude\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I insert rows from multiple tables while unifying columns?","completion":"Here’s how to insert rows from 'tableB' and 'tableC' into 'tableA' while unifying columns (missing columns will be filled with NULL):\n```\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst tableA = sdb.newTable('tableA');\nconst tableB = sdb.newTable('tableB');\nconst tableC = sdb.newTable('tableC');\n// We load data into tableB and tableC (assuming CSV files)\nawait tableB.loadData(\"./tableB.csv\");\nawait tableC.loadData(\"./tableC.csv\");\n// We insert rows from both tables into tableA, unifying columns\nawait tableA.insertTables([tableB, tableC], { unifyColumns: true });\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I concatenate columns after loading data and then view the result?","completion":"Load the data, concatenate the columns, and then log the table.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data\nawait table.loadData(\"./people.csv\");\n// Concatenate 'firstName' and 'lastName' into 'fullName'\nawait table.concatenate([\"firstName\", \"lastName\"], \"fullName\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I round multiple columns at once with different settings?","completion":"Yes, you can pass an array of column names and specify rounding options. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// We round 'columnA' and 'columnB' to 1 decimal place using ceiling method\nawait table.round([\"columnA\", \"columnB\"], { decimals: 1, method: \"ceiling\" });\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"What is the default behavior of the stringify option?","completion":"By default, stringify is false, so only up to 100 unique values are logged:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Log uniques with default options (stringify is false)\nawait table.logUniques(\"name\");\nawait sdb.done();\n```"}
{"prompt":"What is the purpose of the `addRowNumber` method?","completion":"The `addRowNumber` method adds a new column to your table that contains the row number for each row. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We add a new column named 'lineNumber' with the row number for each row\nawait table.addRowNumber(\"lineNumber\");\n// We log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How can I calculate the perimeter of my polygon geometries in meters and store the result in a new column?","completion":"Here's how you can calculate the perimeter in meters and store it in a new column:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We compute the perimeter in meters and store it in 'perimeter_m'\nawait table.perimeter(\"perimeter_m\");\n// We log the first rows to see the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"Can I select just one column using `selectColumns`?","completion":"Yes, you can pass a single string. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// Start the instance\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"./data.csv\");\n// Select only 'sales' column\nawait table.selectColumns(\"sales\");\n// View the result\nawait table.logTable();\nawait sdb.done();\n```\nThis keeps only the 'sales' column."}
{"prompt":"How can I group the summary by multiple categories, such as 'region' and 'product_type'?","completion":"Explanation: Summarize 'sales' grouped by both 'region' and 'product_type'.\\n```\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"myTable\");\\nawait table.loadData(\"./data.csv\");\\nawait table.summarize({ values: \"sales\", categories: [\"region\", \"product_type\"] });\\nawait table.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"How can I replace NULL values in a single column with the number 0?","completion":"Use the `replaceNulls` method with the column name as a string and 0 as the replacement value.\n\n```import { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from a CSV file\nawait table.loadData(\"./data.csv\");\n// Replace NULL values in 'column1' with 0\nawait table.replaceNulls(\"column1\", 0);\n// We close everything\nawait sdb.done();```"}
{"prompt":"Can I compute Z-scores across multiple categorical dimensions?","completion":"Yes, provide an array of category columns to calculate Z-scores within each combination of categories.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load your data\nawait table.loadData('./data.csv');\n// Compute Z-score for 'salary' within each 'department' and 'region'\nawait table.zScore('salary', 'salaryZScore', { categories: ['department', 'region'] });\n// Close everything\nawait sdb.done();\n```"}
{"prompt":"How do I filter the last row with multiple conditions using AND?","completion":"Filter with multiple conditions using AND.\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data into the table\nawait table.loadData('./data.csv');\n// Retrieve the last row where category is 'Book' and price > 20\nconst lastBookExpensiveRow = await table.getLastRow({\n  conditions: \"category = 'Book' AND price > 20\",\n});\n// Log the result\nconsole.log(lastBookExpensiveRow);\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How do I keep the original table unchanged after joining?","completion":"Here is how you can keep the original table unchanged after joining:\\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\n// We create two tables\\nconst tableA = sdb.newTable(\"tableA\");\\nconst tableB = sdb.newTable(\"tableB\");\\n// Load data into both tables\\nawait tableA.loadData(\"./dataA.csv\");\\nawait tableB.loadData(\"./dataB.csv\");\\n// Perform join and store result in a new table, leaving tableA unchanged\\nconst joinedTable = await tableA.join(tableB, { commonColumn: \"id\", type: \"inner\", outputTable: true });\\n// Log the original tableA\\nawait tableA.logTable();\\n// Log the new joined table\\nawait joinedTable.logTable();\\n// We close everything\\nawait sdb.done();\\n```"}
{"prompt":"How can I add a column with a specific SQL type like varchar?","completion":"Specify the SQL type in the type parameter:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Add a new column 'shortName' as a varchar, taking the first 10 characters of 'name'\nawait table.addColumn(\"shortName\", \"varchar\", \"SUBSTRING(name, 1, 10)\");\n// Log the table to see the new column\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to load multiple local JSON files?","completion":"Here's how to load multiple local JSON files.\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// Load data from multiple local JSON files\nawait table.loadData([\n  \"./data1.json\",\n  \"./data2.json\",\n  \"./data3.json\"\n]);\n// We log the table to see the loaded data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```"}
{"prompt":"How to join two tables on multiple columns?","completion":"Here's how to join two tables on multiple columns:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable(\"tableA\");\nconst tableB = sdb.newTable(\"tableB\");\nawait tableA.loadData(\"./dataA.csv\");\nawait tableB.loadData(\"./dataB.csv\");\n// Perform join on multiple columns \"name\" and \"category\" (left join by default)\nawait tableA.join(tableB, { commonColumn: [\"name\", \"category\"] });\nawait tableA.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I enable caching of embeddings to speed up repeated searches?","completion":"To cache the embedding of the query text, set the `cache` option to true: \\n```\\n// We start a SimpleDB instance\\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\\nconst sdb = new SimpleDB();\\nconst table = sdb.newTable(\"foodTable\");\\nawait table.loadArray([\\n  { food: \"pizza\" },\\n  { food: \"sushi\" }\\n]);\\nawait table.aiEmbeddings(\"food\", \"embeddings\", { cache: true });\\nconst similar = await table.aiVectorSimilarity(\\n  \"quick snack\",\\n  \"embeddings\",\\n  2,\\n  { cache: true }\\n);\\nawait similar.logTable();\\nawait sdb.done();\\n```"}
{"prompt":"Can I get the bottom rows in their original order?","completion":"Yes, by setting `originalOrder` to true:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n// We load data from the file\nawait table.loadData(\"./data.csv\");\n// Get bottom 10 rows in original order\nconst bottomRowsOriginalOrder = await table.getBottom(10, {\n  originalOrder: true\n});\nconsole.log(bottomRowsOriginalOrder);\n// We close everything\nawait sdb.done();\n```"}