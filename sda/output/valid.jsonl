{"prompt":"How do I use getVar in a TypeScript project with SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use getVar to calculate variance of a numeric column\nconst variance = await table.getVar('numericColumn');\nconsole.log(variance);\n\nawait sdb.done();\n```"}
{"prompt":"Can I select tables dynamically based on some condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Select tables where name starts with 'report'\nawait sdb.selectTables(\n  sdb.tables.filter(table => table.name.startsWith('report'))\n);\nawait sdb.done();\n```"}
{"prompt":"Can I specify a table name for debugging or logging purposes when using `customQuery`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.customQuery(\n  \"SELECT * FROM my_table\",\n  { table: \"my_table\" },\n);\nawait sdb.done();\n```"}
{"prompt":"How can I compute the length of geometries from a specific geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute lengths from 'routeGeom' column\nawait table.length('routeLength', { column: 'routeGeom' });\nawait sdb.done();\n```"}
{"prompt":"If I want to summarize 'sales' grouped by 'region', how would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nawait table.summarize({\n  values: \"sales\",\n  categories: \"region\",\n  summaries: \"sum\",\n});\n\nawait sdb.done();\n```"}
{"prompt":"I have a column called 'productCode' with values like 'ABC-123-XYZ'. How can I extract the part after the first hyphen into a new column named 'productId'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.splitExtract(\"productCode\", \"-\", 1, \"productId\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify a geometry column when calling getGeoData?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// If no column is specified, the method will automatically find a geometry column\nconst geojson = await table.getGeoData();\nconsole.log(geojson);\n\nawait sdb.done();\n```"}
{"prompt":"How do I know if cleanColumnNames() has completed?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use .then() to know when cleanColumnNames() is done\nawait table.cleanColumnNames().then(() => {\n  console.log('Column names have been cleaned.');\n});\nawait sdb.done();\n```"}
{"prompt":"Can I still use the SimpleDB instance after calling `done()`?","completion":"No, after calling `done()`, the instance is cleaned up and should not be used further."}
{"prompt":"Can I use different column names for latitude and longitude?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Use 'latitude' and 'longitude' columns to create geometries in 'geom_col'\nawait table.points('latitude', 'longitude', 'geom_col');\nawait sdb.done();\n```"}
{"prompt":"How do I create a copy of an existing column in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Clone the 'age' column as 'originalAge'\nawait table.cloneColumn(\"age\", \"originalAge\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I update a date string to a Date object using `updateWithJS`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'dateString' column to Date objects\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    dateString: typeof row.dateString === 'string' ? new Date(row.dateString) : null\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve the first row of a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Get the first row\nconst firstRow = await table.getTop(1);\nconsole.log(firstRow);\nawait sdb.done();\n```"}
{"prompt":"What happens if I call getExtent on a non-numeric column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempting to get extent of a non-numeric column\ntry {\n  const extent = await table.getExtent('non_numeric_column');\n  console.log(extent);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();"}
{"prompt":"Is it possible to limit the number of rows loaded from each file?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { limit: 100 });\nawait sdb.done();\n```"}
{"prompt":"How can I round the mean value to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n\n// Calculate the mean of the 'salary' column rounded to 2 decimal places\nconst meanSalary = await table.getMean(\"salary\", { decimals: 2 });\nconsole.log(meanSalary); // Outputs the mean value rounded to 2 decimal places\n\nawait sdb.done();\n```"}
{"prompt":"How do I find out the total number of values in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\n\nconst nbValues = await table.getNbValues();\nconsole.log(nbValues); // Output the total number of values\nawait sdb.done();\n```"}
{"prompt":"How can I retrieve a list of all column names in my table using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all column names from the table\nconst columns = await table.getColumns();\nconsole.log(columns); // e.g., ['id', 'name', 'age']\n\nawait sdb.done();\n```"}
{"prompt":"How can I access the description of a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst description = await table.getDescription();\nconst firstColumnDescription = description[0]; // Access the description of the first column\nconsole.log(firstColumnDescription);\nawait sdb.done();\n```"}
{"prompt":"How do I rename multiple columns in a SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rename multiple columns using renameColumns method\nawait table.renameColumns({\n  'oldColumn1': 'newColumn1',\n  'oldColumn2': 'newColumn2'\n});\nawait sdb.done();\n```"}
{"prompt":"How do I reduce the precision of geometries in my table to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Reduce the precision of geometries to 3 decimal places\nawait table.reducePrecision(3);\n\nawait sdb.done();\n```"}
{"prompt":"How do I clear the cache in SimpleDB?","completion":"```ts\n// You can clear the cache by deleting the cache directory.\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  // Your computations here\n});\n\n// Manually delete `./.sda-cache` or use a script\nawait sdb.done();\n```"}
{"prompt":"Can I use this method to extract characters from a column containing numbers as strings, like '12345'? If so, how would I extract the first two digits?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.left(\"numberString\", 2);\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the average value of a numeric column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the mean of a numeric column\nconst averageValue = await table.getMean('numericColumn');\nconsole.log('Average:', averageValue);\n\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to get the sum of a non-numeric column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Attempting to get sum of a non-numeric column will throw an error\ntry {\n  const totalSum = await table.getSum('nonNumericColumn');\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"Is it possible to use `updateWithJS` to modify data types of columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Convert 'quantity' to number if it's a string\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    quantity: typeof row.quantity === 'string' ? parseFloat(row.quantity) : row.quantity\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I disable data type guessing when writing to a Google Sheet?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Disable data type guessing\nawait table.toSheet('https://docs.google.com/spreadsheets/d/.../edit#gid=0', {\n  raw: true,\n});\nawait sdb.done();\n```"}
{"prompt":"How do I add a new column to my table with a simple calculation based on existing columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.addColumn(\"total\", \"float\", \"column1 + column2\");\nawait sdb.done();\n```"}
{"prompt":"How precise are the values returned by getBoundingBox?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get the bounding box with default precision\nconst bbox = await table.getBoundingBox();\nconsole.log('Default Precision:', bbox);\n\n// If higher precision is needed, process the data further if necessary\n\nawait sdb.done();\n```"}
{"prompt":"Can I insert a single row using the insertRows method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Insert a single row by passing an array with one object\nconst newRow = [\n  { name: 'Charlie', age: 35 },\n];\nawait table.insertRows(newRow);\n\nawait sdb.done();```"}
{"prompt":"How do I add a new column with ranks based on the values in an existing column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.ranks(\"score\", \"rank\");\nawait sdb.done();\n```"}
{"prompt":"How can I verify the results of isClosedGeo?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Add the isClosed column\nawait table.isClosedGeo('isClosed');\n// Log the first few rows to verify results\nawait table.logTable({ nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"How do I format the x-axis values when using logDotChart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n];\nawait table.loadArray(data);\nawait table.logDotChart('date', 'value', {\n  formatX: (d) => new Date(d).toLocaleDateString('en-US', { month: 'short' })\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if the column contains non-numeric values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// This will throw an error if 'nonNumericColumn' contains non-numeric values\ntry {\n  const medianValue = await table.getMedian('nonNumericColumn');\n  console.log('Median:', medianValue);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I round the median value to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate median with 2 decimal places\nconst medianRounded = await table.getMedian('numericColumn', { decimals: 2 });\nconsole.log('Median rounded:', medianRounded);\n\nawait sdb.done();\n```"}
{"prompt":"What does the getData method return?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// The getData method returns an array of objects\nconst data = await table.getData();\nconsole.log(data);\n\nawait sdb.done();\n```"}
{"prompt":"How do I compute the proportions for a single column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsHorizontal(['Men']);\nawait sdb.done();\n```"}
{"prompt":"If I want to overwrite the original 'email' column with just the username (the part before the '@' symbol), how would I use `splitExtract`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.splitExtract(\"email\", \"@\", 0, \"email\");\nawait sdb.done();\n```"}
{"prompt":"Do I need to create any tables before calling `logTableNames`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// You can create tables using sdb.newTable() if you haven't already.\n// For example: const table = sdb.newTable(\"my_table\");\n\nawait sdb.logTableNames(); // This will log the names of any tables that exist.\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that the column names are correctly updated after renaming?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rename columns and verify the changes\nawait table.renameColumns({ 'oldColumn': 'newColumn' });\nconsole.log('Updated columns:', table.columns());\nawait sdb.done();\n```"}
{"prompt":"How can I use the right method to extract the last character of a string in a specific column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Extract the last character of the 'description' column\nawait table.right('description', 1);\nawait sdb.done();\n```"}
{"prompt":"How do I log only 3 rows from the bottom?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log the last 3 rows (last row first)\nawait table.logBottom(3);\nawait sdb.done();\n```"}
{"prompt":"How can I specify a different column for aggregation?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Aggregate geometries in the 'regions' column using union\nawait table.aggregateGeo('union', { column: 'regions' });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to skip a certain number of lines at the beginning of each file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.loadDataFromDirectory(\"./my_data_directory\", { skip: 2 });\nawait sdb.done();\n```"}
{"prompt":"What happens to the data in the tables after they are removed?","completion":"The data associated with the removed tables is no longer accessible through SimpleDB and is effectively deleted from the database."}
{"prompt":"How do I calculate the area of geometries in square meters and store it in a new column named 'area_m2'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.area(\"area_m2\");\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometry columns I'm trying to intersect don't have the same projection?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The documentation states that both columns must have the same projection.\n// If they don't, the behavior is undefined and likely an error will occur.\n// You would need to reproject one or both columns before calling intersection.\n\n// Example of what NOT to do (will likely fail):\n// await table.intersection(\"geometry1\", \"geometry2\", \"intersection_result\");\n\nawait sdb.done();\n```"}
{"prompt":"Is there a way to trim all whitespace and specific characters from a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Trim both whitespace and '!' characters from 'text'\nawait table.trim('text', { character: '!', method: 'trim' });\nawait sdb.done();\n```"}
{"prompt":"How do I log all table names in the SimpleDB instance to the console?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nawait sdb.logTableNames();\nawait sdb.done();\n```"}
{"prompt":"What data type will the values returned by `getValues` be?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst values = await table.getValues(\"columnName\");\nconsole.log(values);\n// The values will be an array of (string | number | boolean | Date | null).\nawait sdb.done();\n```"}
{"prompt":"How can I offset a column by 1 row within multiple categories, like stock symbol and exchange, for financial data analysis?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/stocks.csv\");\n// Clone 'stock_price' as 'prev_price_by_stock_and_exchange', offsetting by 1 row within each 'stock_symbol' and 'exchange' category\nawait table.cloneColumnWithOffset(\n  \"stock_price\",\n  \"prev_price_by_stock_and_exchange\",\n  {\n    offset: 1,\n    categories: [\"stock_symbol\", \"exchange\"],\n  },\n);\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I handle asynchronous errors when calling logExtent?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Handle errors using try-catch\ntry {\n  await table.logExtent('invalidColumn');\n} catch (error) {\n  console.error('Error logging extent:', error);\n}\nawait sdb.done();\n```"}
{"prompt":"Is it possible to replace NULL values with a date?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Replace NULL values in 'dateColumn' with a specific date\nawait table.replaceNulls('dateColumn', new Date('2023-01-01'));\nawait sdb.done();\n```"}
{"prompt":"How do I use customQuery to limit the number of results?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst limitedData = await sdb.customQuery(\n  'SELECT * FROM customers LIMIT 10',\n  { returnDataFrom: 'query' }\n);\nconsole.log(limitedData);\nawait sdb.done();\n```"}
{"prompt":"How do I handle joins when there are multiple common columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\n\n// Perform a join on multiple common columns ('year' and 'month')\nawait tableA.join(tableB, {\n  commonColumn: ['year', 'month'],\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I invert the removal to keep only rows with missing values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Keep only rows with missing values in any column\nawait table.removeMissing({ invert: true });\nawait sdb.done();\n```"}
{"prompt":"What happens if I call `addRowNumber` multiple times with different column names?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Add a new column named 'row1' with the row number for each row\nawait table.addRowNumber(\"row1\");\n\n// Add another column named 'row2' with the row number for each row\nawait table.addRowNumber(\"row2\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I compute linear regression for all numeric columns as both x and y?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions for all numeric columns as both x and y\nawait table.linearRegressions();\n\nawait sdb.done();\n```"}
{"prompt":"How can I summarize data in a SimpleTable to count occurrences of values in a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.summarize({ values: \"column_name\", categories: \"category_column\", summaries: [\"count\"] });\nawait sdb.done();\n```"}
{"prompt":"How do I use customQuery to join two tables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst joinedData = await sdb.customQuery(\n  'SELECT e.name, d.department_name FROM employees e JOIN departments d ON e.dept_id = d.id',\n  { returnDataFrom: 'query' }\n);\nconsole.log(joinedData);\nawait sdb.done();\n```"}
{"prompt":"If I have a column named 'temperature' and I want to create bins with an interval of 2.5, storing the results in a column called 'temp_group', how would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.bins(\"temperature\", 2.5, \"temp_group\");\nawait sdb.done();\n```"}
{"prompt":"I have a `SimpleTable` instance called `products`. How can I use `hasTable` to check if this table exists in the database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst products = sdb.newTable(\"products\");\n\nconst existsInstance = await sdb.hasTable(products);\nconsole.log(existsInstance); // Output: true or false\nawait sdb.done();\n```"}
{"prompt":"How do I compute the intersection of two geometry columns using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute intersection of 'geomA' and 'geomB' columns, store in 'intersectGeom'\nawait table.intersection('geomA', 'geomB', 'intersectGeom');\nawait sdb.done();\n```"}
{"prompt":"I know the original projection of my geometries is EPSG:4326. How can I specify this when reprojecting to EPSG:3347?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.reproject(\"EPSG:3347\", { from: \"EPSG:4326\" });\nawait sdb.done();\n```"}
{"prompt":"How can I clone a table with filtered data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Clone with filtered data\nconst clonedTable = await table.cloneTable({\n  conditions: 'column1 > 10'\n});\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Automatically finds and uses the geometry column\nawait table.area('auto_area');\nawait sdb.done();\n```"}
{"prompt":"How can I compute a rolling median with a window size of 5?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute a rolling median of 'values' with 2 preceding and 2 following rows\nawait table.rolling('values', 'rollingMedianValues', 'median', 2, 2);\n\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the column might be empty?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Handle empty column scenario\ntry {\n  const minEmptyColumn = await table.getMin('empty_column');\n  console.log(`Minimum value: ${minEmptyColumn}`);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();```"}
{"prompt":"How do I use the `logProjections` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\"); // Replace with your data\nawait table.logProjections();\nawait sdb.done();\n```"}
{"prompt":"How can I format the values displayed in the bar chart?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n];\nawait table.loadArray(data);\nawait table.logBarChart(\"category\", \"value\", { formatValues: (d) => d.toFixed(1) });\nawait sdb.done();\n```"}
{"prompt":"How do I create a buffer around geometries in a table and store the results in a new column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.buffer(\"bufferedGeom\", 1);\nawait sdb.done();\n```"}
{"prompt":"How do I rename a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Rename the table to 'newTableName'\nawait table.renameTable('newTableName');\nawait sdb.done();\n```"}
{"prompt":"How can I create bins for multiple columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Create bins for 'price' and 'score'\nawait table.bins('price', 10, 'price_bins');\nawait table.bins('score', 5, 'score_bins');\nawait sdb.done();\n```"}
{"prompt":"I want to calculate the Haversine distance in meters between two columns named 'start_point' and 'end_point', and store the result in a new column called 'distance_meters'. How would I do that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.distance(\"start_point\", \"end_point\", \"distance_meters\", { method: \"haversine\" });\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a column name, how does the `getGeoData` method determine which column contains the geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming the table is loaded with data\n\nconst geojson = await table.getGeoData(); // It will attempt to find a geometry column automatically.\nconsole.log(geojson);\nawait sdb.done();\n```"}
{"prompt":"How does the `tolerance` parameter affect the simplification process?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.simplify(0.5);\nawait sdb.done();\n```\n// A higher tolerance value leads to greater simplification of the geometries."}
{"prompt":"How can I use `updateWithJS` to add a fixed value to all rows in a specific column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Add 5 to all values in 'columnA'\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    columnA: typeof row.columnA === 'number' ? row.columnA + 5 : null\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `decimals` option, what is the default behavior?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst defaultSkew = await table.getSkew(\"quantity\");\nconsole.log(defaultSkew);\n// The result will not be rounded.\nawait sdb.done();\n```"}
{"prompt":"What join types are available, and how do I specify one?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\nconst joinedTable = await tableA.joinGeo(tableB, \"intersect\", {\n  type: \"left\",\n});\nawait sdb.done();\n```"}
{"prompt":"Is there a way to get the extent values programmatically instead of logging them?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Currently, logExtent only logs to console. To get values programmatically, use other methods like summarize\nawait table.summarize({\n  values: 'price',\n  summaries: ['min', 'max']\n});\nawait sdb.done();\n```"}
{"prompt":"How can I handle null values when using getUniques?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get unique values including nulls from the 'status' column\nconst uniqueStatuses = await table.getUniques('status');\nconsole.log(uniqueStatuses);\n\nawait sdb.done();\n```"}
{"prompt":"How do I execute a query and retrieve the results as an array of objects?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst results = await sdb.customQuery(\n  \"SELECT * FROM my_table WHERE column_name = 'some_value'\",\n  { returnDataFrom: \"query\" },\n);\nconsole.log(results);\nawait sdb.done();\n```"}
{"prompt":"Does the `union` method modify the original columns containing the geometries?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The union method creates a new column ('newColumn') to store the result.\n// The original columns ('column1' and 'column2') remain unchanged.\nawait table.union(\"column1\", \"column2\", \"newColumn\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I round a column down to the nearest integer using the floor method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Round 'population' column down to nearest integer\nawait table.round(\"population\", { method: \"floor\" });\nawait sdb.done();\n```"}
{"prompt":"How do I sort 'city' in ascending order and 'population' in descending order?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sort({ city: \"asc\", population: \"desc\" });\nawait sdb.done();\n```"}
{"prompt":"How can I calculate a rolling maximum of a column named 'score' and round the result to two decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.rolling(\"score\", \"rollingMaxScore\", \"max\", 2, 2, { decimals: 2 });\nawait sdb.done();\n```"}
{"prompt":"How can I use getNbRows to ensure my data hasn't been altered unintentionally?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Record initial row count\nconst initialRowCount = await table.getNbRows();\nconsole.log(`Initial rows: ${initialRowCount}`);\n// Perform operations that might alter the data...\n// Verify row count remains consistent\nconst finalRowCount = await table.getNbRows();\nconsole.log(`Final rows: ${finalRowCount}`);\nawait sdb.done();\n```"}
{"prompt":"How do I limit the number of characters logged for string columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable('myData', {}, { nbCharactersToLog: 50 });\nawait table.loadData('path/to/data.csv');\n// Log the table with limited string length\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I ensure ranks are assigned without gaps?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign ranks without gaps based on 'salary'\nawait table.ranks('salary', 'denseRank', { noGaps: true });\nawait sdb.done();\n```"}
{"prompt":"How can I handle null or undefined values when updating data with `updateWithJS`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Set 'value' to 0 if null or undefined\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    value: row.value === null || row.value === undefined ? 0 : row.value\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I check if a table named 'customers' exists in the database?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nconst exists = await sdb.hasTable(\"customers\");\nconsole.log(exists); // Output: true or false\nawait sdb.done();\n```"}
{"prompt":"How can I compute linear regression without rounding the results?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Compute linear regressions without rounding\nawait table.linearRegressions({\n  decimals: undefined\n});\n\nawait sdb.done();\n```"}
{"prompt":"What data type should the `columns` parameter be when calling `removeColumns`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// The 'columns' parameter can be a string or a string array.\n// Example with a string:\nawait table.removeColumns(\"columnToRemove\");\n\n// Example with a string array:\nawait table.removeColumns(['column1', 'column2']);\n\nawait sdb.done();\n```"}
{"prompt":"How can I set up caching for aiRowByRow results?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Enable caching for aiRowByRow results\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    cache: true\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How can I remove multiple columns from a table in SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Remove 'column1' and 'column2' from the table\nawait table.removeColumns([\"column1\", \"column2\"]);\\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve all values from a specific column in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get all values from the 'productName' column\nconst productNames = await table.getValues('productName');\nconsole.log(productNames); // e.g., ['Laptop', 'Mouse', 'Keyboard']\n\nawait sdb.done();```"}
{"prompt":"Can I customize the labels of the histogram bins?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Customize labels to show age ranges like '20-30 years'\nawait table.logHistogram('age', {\n  formatLabels: (min, max) => `${min}-${max} years`,\n});\nawait sdb.done();\n```"}
{"prompt":"Is there a way to insert data from multiple tables at once?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData('data/tableA.csv');\nconst tableB = sdb.newTable();\nawait tableB.loadData('data/tableB.csv');\nconst tableC = sdb.newTable();\nawait tableC.loadData('data/tableC.csv');\n\n// Insert rows from 'tableB' and 'tableC' into 'tableA'\nawait tableA.insertTables([tableB, tableC]);\n\nawait sdb.done();\n```"}
{"prompt":"Does logProjections() affect the data in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Log projections without modifying the data\nawait table.logProjections();\nawait sdb.done();\n```"}
{"prompt":"What data type does the `getTables()` method return?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\n// The getTables() method returns a Promise that resolves to an array of SimpleTable instances.\nconst tablesPromise = await sdb.getTables();\n\n// You can then await the promise to get the array.\nconst tables = await tablesPromise;\n\n// tables is now an array of SimpleTable instances.\n\nawait sdb.done();\n```"}
{"prompt":"How do I clone a table and include only specific columns in the new table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nawait tableA.loadData(\"data/sample.csv\");\n// Clone tableA with only specific columns\nconst tableB = await tableA.cloneTable({ columns: [\"name\", \"age\", \"city\"] });\nawait sdb.done();\n```"}
{"prompt":"How can I use Ollama with aiRowByRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Use Ollama with aiRowByRow\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    ollama: true,\n    model: 'your-ollama-model'\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How do I compute the cumulative sum of a column in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sales.csv\");\n// Compute cumulative sum of 'sales' in a new 'cumulativeSales' column\nawait table.accumulate(\"sales\", \"cumulativeSales\");\nawait table.logTable();\nawait sdb.done();\n```"}
{"prompt":"Does `logTypes` return any value?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst result = await table.logTypes(); // result is the table itself\nawait sdb.done();\n```"}
{"prompt":"What happens if I call fill on a column with all NULL values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If 'data' column has all NULLs, they remain NULL after fill\nawait table.fill('data');\nawait sdb.done();\n```"}
{"prompt":"Can I specify multiple category columns for the correlation calculation?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.correlations({ categories: [\"region\", \"year\"] });\nawait sdb.done();\n```"}
{"prompt":"Is it possible to format date columns when writing to a JSON file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.writeData(\"./output_dates.json\", { formatDates: true });\nawait sdb.done();\n```"}
{"prompt":"How can I split a string in a column and extract a specific part into a new column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Split 'address' by comma and extract the second part (index 1) into a new 'city' column\nawait table.splitExtract('address', ',', 1, 'city');\n\nawait sdb.done();\n```"}
{"prompt":"Can I compute the union of geometries from different tables?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nconst table2 = sdb.newTable();\nawait table1.loadData('path/to/table1.csv');\nawait table2.loadData('path/to/table2.csv');\n// Compute the union within each table separately\nawait table1.union('geomA', 'geomB', 'union1');\nawait table2.union('geomC', 'geomD', 'union2');\nawait sdb.done();\n```"}
{"prompt":"Does `renameTable` affect any existing data in the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming the table already has data loaded...\n// Renaming the table does not affect the data itself.\nThe data remains associated with the table, even after the rename.\nawait table.renameTable(\"renamed_table\");\nawait sdb.done();\n```"}
{"prompt":"What happens if the geometry column doesn't exist in my table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// This will likely throw an error if the 'my_geometry' column doesn't exist.\n// It's important to ensure the column name is correct.\nawait table.latLon(\"my_geometry\", \"lat\", \"lon\");\n\nawait sdb.done();\n```"}
{"prompt":"How do I use the `intersect` method to check for intersections between two geometry columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Check if geometries in 'shape1' and 'shape2' intersect, storing results in 'intersected'\nawait table.intersect(\"shape1\", \"shape2\", \"intersected\");\n\nawait sdb.done();\n```"}
{"prompt":"Can I sample a specific number of rows and also use a seed for reproducibility?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.sample(20, { seed: 7 }); // Selects 20 rows with seed 7\nawait sdb.done();\n```"}
{"prompt":"I have a column called 'product_name'. How can I convert all the values to uppercase?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.updateColumn(\"product_name\", `UPPER(product_name)`);\nawait sdb.done();\n```"}
{"prompt":"Can I specify a different AI model to use for generating embeddings?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n// await table.loadData(\"your_data.csv\");\n\nawait table.aiEmbeddings(\"text_column\", \"embeddings\", { model: \"my-custom-model\" });\n\n// This will use the \"my-custom-model\" for generating embeddings.\n\nawait sdb.done();\n```"}
{"prompt":"What type of data should the objects in the array have?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { id: 1, value: \"hello\" },\n  { id: 2, value: 123 },\n];\n\nawait table.loadArray(data);\nawait sdb.done();\n```"}
{"prompt":"If I have a column named 'name' with values like 'John Doe', how can I extract only the first character?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.left(\"name\", 1);\nawait sdb.done();\n```"}
{"prompt":"What information is included in each column's description?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst description = await table.getDescription();\nconst firstColumnDescription = description[0];\nconsole.log(Object.keys(firstColumnDescription)); // Show the keys of the first column's description\nawait sdb.done();\n```"}
{"prompt":"If I have loaded data into the table, what information does `logDescription` provide about each column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logDescription(); // This will log data types, number of null values, and number of distinct values for each column.\nawait sdb.done();\n```"}
{"prompt":"How can I round the skewness value to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst skew = await table.getSkew(\"numericColumn\", { decimals: 2 });\nconsole.log(skew);\nawait sdb.done();\n```"}
{"prompt":"Is the `getExtensions` method synchronous or asynchronous?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nasync function getExtensionsList() {\n  const extensions = await sdb.getExtensions();\n  console.log(extensions);\n}\n\ngetExtensionsList();\nawait sdb.done();\n```"}
{"prompt":"Is it possible to sample more rows than are present in the table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// If you sample more rows than exist, it will return all available rows\nawait table.sample(1000); // If the table has fewer than 1000 rows, it will return all\nawait sdb.done();\n```"}
{"prompt":"How do I reproject geometries to WGS84 using the default geometry column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Reproject geometries to WGS84 using the default geometry column\nawait table.reproject('WGS84');\nawait sdb.done();\n```"}
{"prompt":"How can I ensure that quantiles are assigned correctly when there are duplicate values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign quantiles with duplicate values handled appropriately\nawait table.quantiles('valueColumn', 10, 'quantileResult');\nawait sdb.done();\n```"}
{"prompt":"How can I include data types when logging a table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable({\n  types: true,\n});\nawait sdb.done();\n```"}
{"prompt":"Can I specify the order (ascending or descending) when calculating ranks?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.ranks(\"score\", \"descRank\", { order: \"desc\" });\nawait sdb.done();\n```"}
{"prompt":"Can I use a percentage string to sample a portion of my data instead of a fixed number?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample_data.csv\");\n// Sample 25% of the data using a percentage string\nawait table.sample(\"25%\");\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't call `sdb.done()` after using the `cache` method?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.cache(async () => {\n  await table.loadData(\"items.csv\");\n  await table.summarize({\n    values: \"price\",\n    categories: \"department\",\n    summaries: [\"min\", \"max\", \"mean\"],\n  });\n});\n\n// If you don't call sdb.done(), the cache will not be cleaned up,\n// and it may grow indefinitely.\n// await sdb.done(); // Important to call this to clean up the cache.\n```"}
{"prompt":"What is the purpose of the `extraInstructions` option, and how can I use it to provide more context to the AI?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load some data\nawait table.loadArray([{ product: \"Laptop\" }, { product: \"Phone\" }]);\n\n// Use aiRowByRow with extra instructions\nawait table.aiRowByRow(\n  \"product\",\n  \"description\",\n  \"Describe this product.\",\n  {\n    extraInstructions: \"Focus on the key features and benefits.\",\n  },\n);\n\nawait sdb.done();\n```"}
{"prompt":"I have a column named 'category' with values like 'Electronics', 'Clothing', 'Books'. How can I change all values to lowercase?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.updateColumn(\"category\", `LOWER(category)`);\nawait sdb.done();\n```"}
{"prompt":"How does getMedian handle null or undefined values in the column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Null or undefined values are ignored in the calculation\nconst medianWithNulls = await table.getMedian('columnWithNulls');\nconsole.log('Median with nulls:', medianWithNulls);\n\nawait sdb.done();\n```"}
{"prompt":"Does removeDuplicates change the order of rows?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove duplicates and note that the order might change\nawait table.removeDuplicates();\nawait sdb.done();\n```"}
{"prompt":"How can I customize the appearance of a dot chart by adjusting its width and height?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nconst data = [\n  { date: new Date('2023-01-01'), value: 10 },\n  { date: new Date('2023-02-01'), value: 20 },\n];\nawait table.loadArray(data);\nawait table.logDotChart('date', 'value', {\n  width: 80,\n  height: 20\n});\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the Z-score for a specific column and store it in a new column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate Z-score for 'age' and store in 'ageZScore'\nawait table.zScore('age', 'ageZScore');\nawait sdb.done();\n```"}
{"prompt":"How do I create bins for a column named 'age' with an interval of 5, storing the results in a new column called 'age_group'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.bins(\"age\", 5, \"age_group\");\nawait sdb.done();\n```"}
{"prompt":"How can I limit the rate of API requests when generating embeddings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Limit API requests to 10 per minute\nawait table.aiEmbeddings('text_column', 'embeddings', {\n  rateLimitPerMinute: 10, // Set rate limit\n  cache: true // Cache results locally\n});\n\nawait sdb.done();\n```"}
{"prompt":"How can I log a specific number of rows, say 30?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logTable(30);\nawait sdb.done();\n```"}
{"prompt":"Can I convert multiple columns to lowercase at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nawait table.lower([\"col1\", \"col2\", \"col3\"]); // Converts multiple columns\nawait sdb.done();\n```"}
{"prompt":"If I don't specify a column, will it replace `NULL` values in all columns?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// The documentation does not mention replacing NULL values in all columns at once.\n// You must specify the column(s) to replace NULL values in.\nawait sdb.done();\n```"}
{"prompt":"What happens if the AI returns fewer items than expected, or if the `test` function fails? How does the `retry` option come into play?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load some data\nawait table.loadArray([{ value: 10 }, { value: 20 }]);\n\n// Use aiRowByRow with retry and test\nawait table.aiRowByRow(\n  \"value\",\n  \"category\",\n  \"Classify this number as 'high' or 'low'.\",\n  {\n    test: (dataPoint: unknown) => {\n      if (typeof dataPoint !== \"string\" || ![\"high\", \"low\"].includes(dataPoint)) {\n        throw new Error(`Invalid response: ${dataPoint}`);\n      }\n    },\n    retry: 3, // Retry the request up to 3 times if the test fails or the AI returns invalid data\n  },\n);\n\nawait sdb.done();\n```"}
{"prompt":"How can I remove rows where a specific column has missing values or a custom value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows where 'age' is missing or equal to -1\nawait table.removeMissing({ columns: 'age', missingValues: [-1] });\nawait sdb.done();\n```"}
{"prompt":"How do I replace `NULL` values with a date?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.replaceNulls(\"dateColumn\", new Date(\"2024-01-01\"));\nawait sdb.done();\n```"}
{"prompt":"Can I get a list of table names instead of the actual table instances?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get all tables and extract their names\nconst tables = await sdb.getTables();\nconst tableNames = tables.map(table => table.name);\nconsole.log('Table names:', tableNames);\nawait sdb.done();\n```"}
{"prompt":"How can I enable verbose logging for aiRowByRow?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Enable verbose logging for aiRowByRow\nawait table.aiRowByRow(\n  'inputColumn',\n  'outputColumn',\n  'Please provide a brief summary of the following text: {{value}}',\n  {\n    verbose: true\n  }\n);\n\nawait sdb.done();\n```"}
{"prompt":"How do I log the names of all tables in the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Log table names to the console\nawait sdb.logTableNames();\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript's `&&` operator within the `conditions` parameter?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst bottom5Condition = await table.getBottom(5, { conditions: \"category === 'Books' && price > 50\" });\nconsole.log(bottom5Condition);\nawait sdb.done();\n```"}
{"prompt":"Can I compute the length of geometries without specifying the column name if the table has only one geometry column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// If there is only one geometry column, the method will automatically detect it.\nawait table.length(\"length_m\");\nawait sdb.done();\n```"}
{"prompt":"How can I reproject geometries from EPSG:4326 to EPSG:3347 while specifying the original projection?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Reproject geometries from EPSG:4326 to EPSG:3347, specifying the original projection\nawait table.reproject(\"EPSG:3347\", { from: \"EPSG:4326\" });\nawait sdb.done();\n```"}
{"prompt":"How do I create a new SimpleTable instance with specific debug settings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Create a table with debug mode enabled and log 5 rows when displaying data\nconst table = sdb.newTable('myTable', {}, { debug: true, nbRowsToLog: 5 });\nawait sdb.done();\n```"}
{"prompt":"Can I compute centroids for multiple geometry columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute centroid for 'geom1' and store in 'centroid1'\nawait table.centroid('centroid1', { column: 'geom1' });\n// Compute centroid for 'geom2' and store in 'centroid2'\nawait table.centroid('centroid2', { column: 'geom2' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass a non-string column to the upper method?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Non-string columns will remain unchanged\nawait table.upper('nonStringColumn');\nawait sdb.done();\n```"}
{"prompt":"How do I enable caching for aiVectorSimilarity?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Enable caching for the input text embedding\nconst similarResults = await table.aiVectorSimilarity(\n  'machine learning',\n  'embeddings',\n  5,\n  {\n    cache: true\n  }\n);\n\n// Log the results\nawait similarResults.logTable();\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where categories have very few data points?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Calculate Z-scores for 'testScore' within each 'class'\nawait table.zScore('testScore', 'testScoreZ', { categories: 'class' });\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't provide a seed when sampling?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Using no seed will result in a random sampling each time\nawait table.sample(100);\nawait sdb.done();\n```"}
{"prompt":"How do I assign quantiles to a column and then sort the data by these quantiles?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Assign quartiles and sort by them\nawait table.quantiles('sales', 4, 'salesQuartile');\nawait table.sort({ salesQuartile: 'asc' });\nawait sdb.done();\n```"}
{"prompt":"How do I remove multiple tables by name from the database?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nawait sdb.removeTables(['customers', 'products']);\nawait sdb.done();\n```"}
{"prompt":"How can I create a new table with the results of the spatial join?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst tableA = sdb.newTable();\nconst tableB = sdb.newTable();\n\n// Assuming tableA and tableB are loaded with data\nconst joinedTable = await tableA.joinGeo(tableB, \"intersect\", {\n  outputTable: true,\n});\nawait sdb.done();\n```"}
{"prompt":"Is it possible to concatenate columns with different data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Concatenating different data types will convert them to strings and combine them\nawait table.concatenate(['numberCol', 'stringCol'], 'combinedCol');\nawait sdb.done();\n```"}
{"prompt":"Can I use a custom function to format both x and y-axis values in a dot chart?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Custom formatting for both axes\nawait table.logDotChart(\"date\", \"value\", {\n  formatX: (d) => new Date(d).getFullYear(),\n  formatY: (d) => `${d} units`\n});\nawait sdb.done();\n```"}
{"prompt":"How do I get the minimum and maximum values of a column using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst extent = await table.getExtent(\"temperature\");\nconsole.log(extent); // Outputs [min, max] for the 'temperature' column\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the median of a numeric column using getQuantile?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the median (50th percentile) of 'age' column\nconst medianAge = await table.getQuantile('age', 0.5);\nconsole.log('Median Age:', medianAge);\n\nawait sdb.done();\n```"}
{"prompt":"How would I retrieve the maximum date from a column named 'date_of_birth'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst maxDate = await table.getMax(\"date_of_birth\");\nconsole.log(maxDate);\nawait sdb.done();\n```"}
{"prompt":"How do I round the computed proportions to a specific number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.proportionsHorizontal(['Men', 'Women'], { decimals: 3 });\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the condition might have special characters?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Escape special characters if needed\nconst top5Special = await table.getTop(5, { conditions: `name === 'O'Connor'` });\nconsole.log(top5Special);\nawait sdb.done();\n```"}
{"prompt":"If I don't specify the `decimals` option, how many decimal places will the result have?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nconst varianceWithoutDecimals = await table.getVar(\"price\");\nconsole.log(varianceWithoutDecimals);\n// The result will not be rounded, and will have the default precision of the number type.\nawait sdb.done();\n```"}
{"prompt":"How do I calculate the median of a numeric column using SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate the median of a numeric column\nconst medianValue = await table.getMedian('numericColumn');\nconsole.log('Median:', medianValue);\n\nawait sdb.done();\n```"}
{"prompt":"How can I ensure the latitude and longitude values are valid before creating geometries?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Validate latitude and longitude ranges before creating geometries\nawait table.filterRows(\n  (row) => Number(row.lat) >= -90 && Number(row.lat) <= 90 && \n           Number(row.lon) >= -180 && Number(row.lon) <= 180\n);\nawait table.points('lat', 'lon', 'geom');\nawait sdb.done();\n```"}
{"prompt":"Can I specify which geometry column to check for validity?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Check validity of geometries in a specific column named 'myGeom'\nawait table.isValidGeo('isValidMyGeom', { column: 'myGeom' });\nawait sdb.done();\n```"}
{"prompt":"How do I convert a column named 'date_string' to a datetime type?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.convert({\n  date_string: \"datetime\"\n}, {\n  datetimeFormat: \"%Y-%m-%d\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I chain getSum with other operations in SimpleTable?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Chain getSum with other operations\nconst totalSum = await table.getSum('quantity');\nconsole.log(totalSum);\n\nawait sdb.done();\n```"}
{"prompt":"Can I compute the area without specifying a unit?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Default unit is 'm2'\nawait table.area('default_area');\nawait sdb.done();\n```"}
{"prompt":"How does the IQR method work in identifying outliers?","completion":"The IQR method calculates the first (Q1) and third (Q3) quartiles, then defines outliers as values below Q1 - 1.5*IQR or above Q3 + 1.5*IQR."}
{"prompt":"Can I reproject geometries without specifying a column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Reproject geometries in the default column to WGS84\nawait table.reproject('WGS84');\n// The method will automatically attempt to find a geometry column\nawait sdb.done();\n```"}
{"prompt":"How do I execute a simple SQL query that doesn't return any data?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n\nawait sdb.customQuery(\n  \"CREATE TABLE test_table AS SELECT * FROM existing_table WHERE some_condition = true\",\n);\nawait sdb.done();\n```"}
{"prompt":"How do I multiply all values in a column named 'sales' by 1.1?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.updateColumn(\"sales\", `sales * 1.1`);\nawait sdb.done();\n```"}
{"prompt":"How do I ensure the data is sorted before generating a line chart?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nconst data = [\n  { date: new Date('2023-04-01'), value: 40 },\n  { date: new Date('2023-02-01'), value: 20 },\n  { date: new Date('2023-03-01'), value: 30 },\n  { date: new Date('2023-01-01'), value: 10 },\n];\n\nawait table.loadArray(data);\n// Sort the data by date before generating the chart\nawait table.sort({ date: 'asc' });\nawait table.logLineChart('date', 'value');\n\nawait sdb.done();\n```"}
{"prompt":"How do I enable verbose logging for cache-related messages?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB({\n  cacheVerbose: true\n});\n// Verbose cache messages will be logged.\nawait sdb.done();\n```"}
{"prompt":"How do I filter rows where a specific column is greater than a certain value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Filter rows where 'price' is greater than 100\nawait table.filter(`price > 100`);\nawait sdb.done();\n```"}
{"prompt":"How do I get all unique values from a specific column in my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get unique values from the 'category' column\nconst uniqueCategories = await table.getUniques('category');\nconsole.log(uniqueCategories);\n\nawait sdb.done();\n```"}
{"prompt":"Can I use `updateWithJS` to conditionally update a column based on another column's value?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Update 'status' to 'active' if 'isActive' is true\nawait table.updateWithJS((rows) => {\n  return rows.map(row => ({\n    ...row,\n    status: row.isActive === true ? 'active' : row.status\n  }));\n});\n\nawait sdb.done();\n```"}
{"prompt":"How do I ensure that all string columns are converted to lowercase?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Convert all string columns to lowercase\nconst stringColumns = ['column1', 'column2'];\nawait table.lower(stringColumns);\nawait sdb.done();\n```"}
{"prompt":"What happens if some rows have missing latitude or longitude values?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Handle missing values before creating geometries\nawait table.fillMissingValues('lat', 0);\nawait table.fillMissingValues('lon', 0);\nawait table.points('lat', 'lon', 'geom');\nawait sdb.done();\n```"}
{"prompt":"Can I rename multiple columns at once?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.renameColumns({\n  \"oldColumn1\": \"newColumn1\",\n  \"oldColumn2\": \"newColumn2\",\n  \"oldColumn3\": \"newColumn3\"\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use `getMedian` with a column that contains non-numeric values?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// This will likely throw an error if the 'name' column contains non-numeric values.\n// You should ensure the column contains only numbers before calling getMedian.\nconst medianName = await table.getMedian(\"name\");\nconsole.log(medianName);\nawait sdb.done();\n```"}
{"prompt":"What happens if I pass an empty array to the `columns` parameter in `longer`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Passing an empty array will not modify the table\nawait table.longer([], 'year', 'employees'); // No changes made\n\nawait sdb.done();\n```"}
{"prompt":"How do I disable the coordinate rewinding?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson');\n\nconst mapFunction = (geoJsonData: { features: unknown[] }) => {\n  return plot({\n    marks: [geo(geoJsonData, { fill: 'lightgreen' })]\n  });\n};\n\nawait table.writeMap(mapFunction, './output/no_rewind_map.png', { rewind: false });\nawait sdb.done();\n```"}
{"prompt":"Is there a confirmation prompt when removing a table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// No confirmation prompt, so be careful!\nawait table.removeTable();\nawait sdb.done();\n```"}
{"prompt":"How do I compute a rolling sum with a window size of 10 rows (5 preceding and 5 following)?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sales.csv\");\n// Compute a rolling sum with 5 preceding and 5 following rows\nawait table.rolling(\"sales\", \"rollingSumSales\", \"sum\", 5, 5);\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript's logical AND operator to filter rows based on multiple conditions?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\n// Keep rows where 'price' is greater than 100 AND 'quantity' is greater than 0\nawait table.filter(\"price > 100 && quantity > 0\");\n\nawait sdb.done();\n```"}
{"prompt":"How can I set a custom context window size for Ollama models?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\nawait table.aiQuery(\n  \"Give me the average salary by department\",\n  { contextWindow: 2048 },\n);\nawait sdb.done();\n```"}
{"prompt":"How do I specify custom values to be considered as missing values? For example, I want to treat -1 as a missing value in the 'score' column.","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeMissing({ columns: \"score\", missingValues: [-1] });\nawait sdb.done();\n```"}
{"prompt":"Can I use isClosedGeo on a table without any geometry data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// This will throw an error if no geometry data is found\nawait table.isClosedGeo('isClosed');\nawait sdb.done();\n```"}
{"prompt":"What happens if I don't specify the number of decimal places?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.round(\"myColumn\");\nawait sdb.done();\n```\n// The values in 'myColumn' will be rounded to the nearest integer (0 decimal places)."}
{"prompt":"How do I retrieve all the tables in my SimpleDB instance?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Get all tables in the database\nconst tables = await sdb.getTables();\nawait sdb.done();\n```"}
{"prompt":"How do I handle null or empty values when concatenating columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Null or empty values will be treated as empty strings in the concatenated result\nawait table.concatenate(['col1', 'col2'], 'combinedCol');\nawait sdb.done();\n```"}
{"prompt":"How can I enable debug mode when creating a SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable(\"debug_table\", undefined, undefined, { debug: true });\n// This creates a SimpleTable named 'debug_table' with debug mode enabled.\nawait sdb.done();\n```"}
{"prompt":"How do I access the GeoJSON features returned by getGeoData?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Access the features array in the GeoJSON object\nconst geojson = await table.getGeoData();\nconsole.log(geojson.features);\n\nawait sdb.done();\n```"}
{"prompt":"How can I use hasTable to conditionally create a new table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Check if the table exists\nconst exists = await sdb.hasTable('my_table');\nif (!exists) {\n  // Create the table if it doesn't exist\n  const myTable = sdb.newTable('my_table');\n  console.log('Created new table: my_table');\n} else {\n  console.log('Table my_table already exists.');\n}\nawait sdb.done();\n```"}
{"prompt":"How can I format the x-axis values in a dot chart to display dates in 'YYYY-MM-DD' format?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Format x-axis values to 'YYYY-MM-DD'\nawait table.logDotChart(\"date\", \"value\", {\n  formatX: (d) => new Date(d).toISOString().slice(0, 10)\n});\nawait sdb.done();\n```"}
{"prompt":"How do I create a new table with a default name?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst myTable = sdb.newTable();\n// myTable will be created with a default name like 'table1'\nawait sdb.done();\n```"}
{"prompt":"What if I need to calculate the mean of multiple columns?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Calculate mean for multiple columns\nasync function calculateMeans() {\n  const mean1 = await table.getMean('column1');\n  const mean2 = await table.getMean('column2', { decimals: 1 });\n  console.log('Column 1 Mean:', mean1);\n  console.log('Column 2 Mean:', mean2);\n}\n\nawait calculateMeans();\nawait sdb.done();\n```"}
{"prompt":"Is it possible to set a bigint data type?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.setTypes({\n  large_number: 'bigint'\n});\nawait sdb.done();\n```"}
{"prompt":"What happens to the rest of the string after capitalizing the first letter in SimpleTable?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\n// Capitalize 'description' column\nawait table.capitalize(\"description\");\n// The rest of the string is converted to lowercase\nawait sdb.done();\n```"}
{"prompt":"How do I use customQuery to filter data with a condition?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst filteredData = await sdb.customQuery(\n  'SELECT * FROM sales WHERE amount > 1000',\n  { returnDataFrom: 'query' }\n);\nconsole.log(filteredData);\nawait sdb.done();\n```"}
{"prompt":"How can I filter the top rows to only include entries where the category is 'Books'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/data.csv\");\nconst top5Books = await table.getTop(5, { conditions: `category === 'Books'` });\nconsole.log(top5Books);\nawait sdb.done();\n```"}
{"prompt":"Is there a way to ignore errors while loading data from multiple files?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory('./data/', { ignoreErrors: true });\nawait sdb.done();\n```"}
{"prompt":"How can I summarize data in a SimpleTable to count occurrences of values in a specific column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/mydata.csv\");\nawait table.summarize({ values: \"column_name\", categories: \"category_column\", summaries: [\"count\"] });\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax for filtering conditions instead of SQL?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\nconst filteredData = await table.getData({ conditions: `category === 'Book'` });\nconsole.log(filteredData);\nawait sdb.done();```"}
{"prompt":"How can I specify a specific column to use for joining two tables?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable();\nconst table2 = sdb.newTable();\n\n// Assuming table1 and table2 are loaded with data\n\nawait table1.join(table2, { commonColumn: \"id\" });\n```"}
{"prompt":"How do I remove all rows with any missing values from my table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Remove rows with missing values in any column\nawait table.removeMissing();\nawait sdb.done();\n```"}
{"prompt":"How do I retrieve values from a boolean column named 'isActive'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst isActives = await table.getValues(\"isActive\");\nconsole.log(isActives);\nawait sdb.done();\n```"}
{"prompt":"What happens if I call getUniques on a column with mixed data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get unique values from a mixed-type column\nconst uniqueValues = await table.getUniques('mixedColumn');\nconsole.log(uniqueValues);\n\nawait sdb.done();\n```"}
{"prompt":"How can I specify a starting value for binning to control the bin ranges?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Assign bins starting at 0 with interval 10, store in 'value_bins'\nawait table.bins(\"value\", 10, \"value_bins\", { startValue: 0 });\nawait sdb.done();\n```"}
{"prompt":"How does the fill method handle different data types?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Fill NULLs in numeric 'price' and string 'name' columns\nawait table.fill(['price', 'name']);\nawait sdb.done();\n```"}
{"prompt":"Can I use JavaScript syntax for conditions in `getRow`?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Get a row where 'id' is 123 using JS syntax\nconst rowById = await table.getRow(`id === 123`);\nconsole.log(rowById);\n\nawait sdb.done();\n```"}
{"prompt":"Can I load a GeoJSON file and specify that it should be reprojected to WGS84?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadGeoData('./data.geojson', { toWGS84: true });\n// Do your magic here!\nawait sdb.done();\n```"}
{"prompt":"What happens if the files I'm loading have different columns? Can I handle that?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load data from multiple files and unify columns\nawait table.loadData([\n  \"./data1.csv\",\n  \"./data2.csv\",\n], { unifyColumns: true });\n\nawait sdb.done();\n```"}
{"prompt":"How do I skip the first 10 rows of a table using SimpleDB?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"data/sample.csv\");\n// Skip the first 10 rows of the table\nawait table.skip(10);\nawait sdb.done();\n```"}
{"prompt":"Can I use logTableNames() to check if tables exist?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\n// Log table names to verify existence\nawait sdb.logTableNames();\nawait sdb.done();\n```"}
{"prompt":"How do I handle cases where the data types are not strings?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\nawait table.logBarChart('category', 'value', {\n  formatLabels: (d) => String(d),\n  formatValues: (d) => Number(d).toLocaleString(),\n});\nawait sdb.done();\n```"}
{"prompt":"If I have a table loaded with data, how can I see a list of all the column headers?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n\nconst columnNames = await table.getColumns();\nconsole.log(columnNames); // Prints the array of column names\nawait sdb.done();\n```"}
{"prompt":"What should I be careful about when using `flipCoordinates`?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.flipCoordinates(); // Be cautious as it can affect the accuracy of geospatial operations if not used correctly, and messes up with the projections stored in `table.projections`.\nawait sdb.done();\n```"}
{"prompt":"Is it possible to chain getSkew with other operations?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// Chain getSkew with other operations\ntry {\n  const skewness = await table.getSkew('numericColumn');\n  console.log('Skewness:', skewness);\n} catch (error) {\n  console.error('Error:', error);\n}\n\nawait sdb.done();\n```"}
{"prompt":"Can I remove a mix of tables by name and using `SimpleTable` instances in a single call?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table1 = sdb.newTable(\"table_a\");\n// ... load data into table1 ...\nawait sdb.removeTables([\"table_b\", table1]);\nawait sdb.done();\n```"}
{"prompt":"How do I load an array of objects and then perform operations on the loaded data?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Load the array into the table\nconst data = [\n  { letter: 'a', number: 1 },\n  { letter: 'b', number: 2 },\n];\nawait table.loadArray(data);\n\n// Perform operations on the loaded data, e.g., summarize\nawait table.summarize({\n  values: 'number',\n  categories: 'letter',\n  summaries: ['count', 'sum'],\n});\n\nawait sdb.done();"}
{"prompt":"How can I fill holes in a specific geometry column named 'polygonGeom'?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\n// Fill holes in the 'polygonGeom' column\nawait table.fillHoles(\"polygonGeom\");\nawait sdb.done();\n```"}
{"prompt":"How do I remove rows with missing values from all columns in the table?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.removeMissing();\nawait sdb.done();\n```"}
{"prompt":"What happens if I call setTypes on an existing table?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n// If the table already exists, it will be replaced\nawait table.setTypes({\n  id: 'integer',\n  date: 'date'\n});\nawait sdb.done();\n```"}
{"prompt":"Can I use `logNbRows` after loading data from a file?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData(\"path/to/your/data.csv\");\nawait table.logNbRows();\nawait sdb.done();\n```"}
{"prompt":"Is there a way to compute the union of all geometries in a single column?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n// Compute the union of all geometries in 'geomA'\nawait table.aggregate({\n  column: 'geomA',\n  operation: 'unionAll',\n  newColumn: 'allUnion'\n});\nawait sdb.done();\n```"}
{"prompt":"If my geometries are in a column named 'location', how do I get the bounding box?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\n\n// Assuming you have loaded data into the table\n\n// Get the bounding box using the 'location' column\nconst locationBbox = await table.getBoundingBox(\"location\");\nconsole.log(locationBbox);\nawait sdb.done();\n```"}
{"prompt":"What happens if I try to use both entireString and regex options?","completion":"```ts\nimport { SimpleDB } from '@nshiab/simple-data-analysis';\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadData('path/to/your/data.csv');\n\n// This will throw an error as they cannot be used together\n// await table.replace('columnName', { 'oldString': 'newString' }, { entireString: true, regex: true });\n\nawait sdb.done();\n```"}
{"prompt":"How can I load only JSON files from a directory and include the file name as a column?","completion":"```ts\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\nconst table = sdb.newTable();\nawait table.loadDataFromDirectory(\"./data/\", { fileType: \"json\", fileName: true });\nawait sdb.done();\n```"}