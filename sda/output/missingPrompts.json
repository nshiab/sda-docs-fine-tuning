[
  {
    "model": "gemma3:27b",
    "prompt": "Your task is to generate a list of relevant questions and answers based on the provided section of documentation. The documentation is for the Simple Data Analysis library, a TypeScript library. The questions should be those a junior developer might have.\n\nThe questions must be directly related to the documentation section provided and must not ask about topics outside its scope. Your list of questions should cover all key aspects of the documentation section.\n\nFor each question, you must provide a code example as your answer. You must add comments to the code to explain the steps. You must also add a brief, one-sentence explanation before the code example.\n\nThe answer should be grounded in the documentation provided. Do not make assumptions. Do not invent features or methods that do not exist.\n\nWrite simple and straightforward code examples. Don't create functions to encapsulate your code.\n\nYour code examples should always be wrapped in triple backticks (``` at the beginning and ``` at the end) for code blocks.\n\nIf the documentation section is about SimpleDB, make sure to wrap your code example with:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the documentation section is about SimpleTable, make sure to wrap your code example with:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the example requires data, load it using `await table.loadData(\"path/to/your/data.csv\");` or `await table.loadGeoData(\"path/to/your/geodata.geojson\");` for geospatial data.\n\nDo not forget to add `await sdb.done();` at the end of your code.\n\nHere are a few complete question-and-answer examples.\n\nQuestion: How can I open my file sales.csv and see the first few rows?\nAnswer example:\nHere's how you can load a CSV file and log the first rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to aggregate my data. Which method should I use?\nAnswer example:\nYou should use the `summarize` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\n// Let's assume the data has columns \"price\" and \"product\"\nawait table.loadData(\"./my-data.csv\");\n// We summarize to count the number of items sold\n// and sum up the total sales for each product\nawait table.summarize({\n  values: \"price\",\n  categories: \"product\",\n  summaries: [\"count\", \"sum\"],\n  decimals: 2,\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to simplify my geospatial data.\nAnswer example:\nYou can use the `simplify` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify the geospatial data with a tolerance of 0.01\nawait table.simplify(0.01);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nReturn the questions and answers as a JSON object with the following structure:\n{ \"data\": [ { \"question\": \"question1\", \"answer\": \"answer1\" }, { \"question\": \"question2\", \"answer\": \"answer2\" }, ... ] }\n\nMake extra sure to return a valid JSON object. Return the JSON object only. Do not add any other text.\n\nKeep it simple and straightforward. Do not think too much.\n\nHere's the documentation section you need to work from:\n\n\n#### `logTable`\n\nLogs a specified number of rows from the table to the console. By default, the\nfirst 10 rows are logged. You can optionally log the column types and filter the\ndata based on conditions. You can also use JavaScript syntax for conditions\n(e.g., `&&`, `||`, `===`, `!==`).\n\n##### Signature\n\n```typescript\nasync logTable(options?: \"all\" | number | { nbRowsToLog?: number | \"all\"; types?: boolean; conditions?: string }): Promise<void>;\n```\n\n##### Parameters\n\n- **`options`**: - Either the number of rows to log (a specific number or\n  `\"all\"`) or an object with configuration options:\n- **`options.nbRowsToLog`**: - The number of rows to log. Defaults to 10 or the\n  value set in the SimpleDB instance. Use `\"all\"` to log all rows.\n- **`options.types`**: - If `true`, logs the column types along with the data.\n  Defaults to `false`.\n- **`options.conditions`**: - A SQL `WHERE` clause condition to filter the data\n  before logging. Defaults to no condition.\n\n##### Returns\n\nA promise that resolves when the table data has been logged.\n\n##### Examples\n\n```ts\n// Log the first 10 rows (default behavior)\nawait table.logTable();\n```\n\n```ts\n// Log the first 50 rows\nawait table.logTable(50);\n```\n\n```ts\n// Log all rows\nawait table.logTable(\"all\");\n```\n\n```ts\n// Log the first 20 rows and include column types\nawait table.logTable({ nbRowsToLog: 20, types: true });\n```\n\n```ts\n// Log rows where 'status' is 'active' (using JS syntax for conditions)\nawait table.logTable({ conditions: `status === 'active'` });\n```"
  },
  {
    "model": "gemma3:27b",
    "prompt": "Your task is to generate a list of relevant questions and answers based on the provided section of documentation. The documentation is for the Simple Data Analysis library, a TypeScript library. The questions should be those a data analyst might have.\n\nThe questions must be directly related to the documentation section provided and must not ask about topics outside its scope. Your list of questions should cover all key aspects of the documentation section.\n\nFor each question, you must provide a code example as your answer. You must add comments to the code to explain the steps. You must also add a brief, one-sentence explanation before the code example.\n\nThe answer should be grounded in the documentation provided. Do not make assumptions. Do not invent features or methods that do not exist.\n\nWrite simple and straightforward code examples. Don't create functions to encapsulate your code.\n\nYour code examples should always be wrapped in triple backticks (``` at the beginning and ``` at the end) for code blocks.\n\nIf the documentation section is about SimpleDB, make sure to wrap your code example with:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the documentation section is about SimpleTable, make sure to wrap your code example with:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the example requires data, load it using `await table.loadData(\"path/to/your/data.csv\");` or `await table.loadGeoData(\"path/to/your/geodata.geojson\");` for geospatial data.\n\nDo not forget to add `await sdb.done();` at the end of your code.\n\nHere are a few complete question-and-answer examples.\n\nQuestion: How can I open my file sales.csv and see the first few rows?\nAnswer example:\nHere's how you can load a CSV file and log the first rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to aggregate my data. Which method should I use?\nAnswer example:\nYou should use the `summarize` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\n// Let's assume the data has columns \"price\" and \"product\"\nawait table.loadData(\"./my-data.csv\");\n// We summarize to count the number of items sold\n// and sum up the total sales for each product\nawait table.summarize({\n  values: \"price\",\n  categories: \"product\",\n  summaries: [\"count\", \"sum\"],\n  decimals: 2,\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to simplify my geospatial data.\nAnswer example:\nYou can use the `simplify` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify the geospatial data with a tolerance of 0.01\nawait table.simplify(0.01);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nReturn the questions and answers as a JSON object with the following structure:\n{ \"data\": [ { \"question\": \"question1\", \"answer\": \"answer1\" }, { \"question\": \"question2\", \"answer\": \"answer2\" }, ... ] }\n\nMake extra sure to return a valid JSON object. Return the JSON object only. Do not add any other text.\n\nKeep it simple and straightforward. Do not think too much.\n\nHere's the documentation section you need to work from:\n\n\n#### `logBarChart`\n\nGenerates and logs a bar chart to the console.\n\n##### Signature\n\n```typescript\nasync logBarChart(labels: string, values: string, options?: { formatLabels?: (d: unknown) => any; formatValues?: (d: unknown) => any; width?: number }): Promise<void>;\n```\n\n##### Parameters\n\n- **`labels`**: - The name of the column to be used for the labels (categories).\n- **`values`**: - The name of the column to be used for the values.\n- **`options`**: - An optional object with configuration options:\n- **`options.formatLabels`**: - A function to format the labels. Defaults to\n  converting the label to a string.\n- **`options.formatValues`**: - A function to format the values. Defaults to\n  converting the value to a string.\n- **`options.width`**: - The width of the chart in characters. Defaults to 40.\n\n##### Returns\n\nA promise that resolves when the chart has been logged to the console.\n\n##### Examples\n\n```typescript\nconst data = [\n  { category: \"A\", value: 10 },\n  { category: \"B\", value: 20 },\n];\nawait table.loadArray(data);\nawait table.logBarChart(\"category\", \"value\");\n```"
  },
  {
    "model": "deepseek-r1:32b",
    "prompt": "Your task is to generate a list of relevant questions and answers based on the provided section of documentation. The documentation is for the Simple Data Analysis library, a TypeScript library. The questions should be those a data journalist might have.\n\nThe questions must be directly related to the documentation section provided and must not ask about topics outside its scope. Your list of questions should cover all key aspects of the documentation section.\n\nFor each question, you must provide a code example as your answer. You must add comments to the code to explain the steps. You must also add a brief, one-sentence explanation before the code example.\n\nThe answer should be grounded in the documentation provided. Do not make assumptions. Do not invent features or methods that do not exist.\n\nWrite simple and straightforward code examples. Don't create functions to encapsulate your code.\n\nYour code examples should always be wrapped in triple backticks (``` at the beginning and ``` at the end) for code blocks.\n\nIf the documentation section is about SimpleDB, make sure to wrap your code example with:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the documentation section is about SimpleTable, make sure to wrap your code example with:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the example requires data, load it using `await table.loadData(\"path/to/your/data.csv\");` or `await table.loadGeoData(\"path/to/your/geodata.geojson\");` for geospatial data.\n\nDo not forget to add `await sdb.done();` at the end of your code.\n\nHere are a few complete question-and-answer examples.\n\nQuestion: How can I open my file sales.csv and see the first few rows?\nAnswer example:\nHere's how you can load a CSV file and log the first rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to aggregate my data. Which method should I use?\nAnswer example:\nYou should use the `summarize` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\n// Let's assume the data has columns \"price\" and \"product\"\nawait table.loadData(\"./my-data.csv\");\n// We summarize to count the number of items sold\n// and sum up the total sales for each product\nawait table.summarize({\n  values: \"price\",\n  categories: \"product\",\n  summaries: [\"count\", \"sum\"],\n  decimals: 2,\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to simplify my geospatial data.\nAnswer example:\nYou can use the `simplify` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify the geospatial data with a tolerance of 0.01\nawait table.simplify(0.01);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nReturn the questions and answers as a JSON object with the following structure:\n{ \"data\": [ { \"question\": \"question1\", \"answer\": \"answer1\" }, { \"question\": \"question2\", \"answer\": \"answer2\" }, ... ] }\n\nMake extra sure to return a valid JSON object. Return the JSON object only. Do not add any other text.\n\nKeep it simple and straightforward. Do not think too much.\n\nHere's the documentation section you need to work from:\n\n\n#### `aiVectorSimilarity`\n\nCreates an embedding from a specified text and returns the most similar text\ncontent based on their embeddings. This method is useful for semantic search and\ntext similarity tasks, computing cosine distance and sorting results by\nsimilarity.\n\nTo create the embedding, this method supports Google Gemini, Vertex AI, and\nlocal models running with Ollama. Credentials and model selection are determined\nby environment variables (`AI_KEY`, `AI_PROJECT`, `AI_LOCATION`,\n`AI_EMBEDDINGS_MODEL`) or directly via `options`, with `options` taking\nprecedence.\n\nFor Ollama, set the `OLLAMA` environment variable to `true`, ensure Ollama is\nrunning, and set `AI_EMBEDDINGS_MODEL` to your desired model name. You can also\npass your instance of Ollama to the `ollama` option.\n\nThe `cache` option enables local caching of the specified text's embedding in\n`.journalism-cache` (from the `getEmbedding` function in the\n[journalism library](https://github.com/nshiab/journalism)). Remember to add\n`.journalism-cache` to your `.gitignore`.\n\nIf `createIndex` is `true`, an index will be created on the embeddings column\nusing the [duckdb-vss extension](https://github.com/duckdb/duckdb-vss) to speed\nup processing. If the index already exists, it will not be recreated.\n\n##### Signature\n\n```typescript\nasync aiVectorSimilarity(text: string, column: string, nbResults: number, options?: { createIndex?: boolean; outputTable?: string; cache?: boolean; model?: string; apiKey?: string; vertex?: boolean; project?: string; location?: string; ollama?: boolean | Ollama; contextWindow?: number; verbose?: boolean }): Promise<SimpleTable>;\n```\n\n##### Parameters\n\n- **`text`**: - The text for which to generate an embedding and find similar\n  content.\n- **`column`**: - The name of the column containing the embeddings to be used\n  for the similarity search.\n- **`nbResults`**: - The number of most similar results to return.\n- **`options`**: - An optional object with configuration options:\n- **`options.createIndex`**: - If `true`, an index will be created on the\n  embeddings column. Defaults to `false`.\n- **`options.outputTable`**: - The name of the output table where the results\n  will be stored. If not provided, the current table will be modified. Defaults\n  to `undefined`.\n- **`options.cache`**: - If `true`, the embedding of the input `text` will be\n  cached locally. Defaults to `false`.\n- **`options.model`**: - The AI model to use for generating the embedding.\n  Defaults to the `AI_EMBEDDINGS_MODEL` environment variable.\n- **`options.apiKey`**: - The API key for the AI service. Defaults to the\n  `AI_KEY` environment variable.\n- **`options.vertex`**: - If `true`, uses Vertex AI. Automatically set to `true`\n  if `AI_PROJECT` and `AI_LOCATION` are set in the environment. Defaults to\n  `false`.\n- **`options.project`**: - The Google Cloud project ID for Vertex AI. Defaults\n  to the `AI_PROJECT` environment variable.\n- **`options.location`**: - The Google Cloud location for Vertex AI. Defaults to\n  the `AI_LOCATION` environment variable.\n- **`options.ollama`**: - If `true`, uses Ollama. Defaults to the `OLLAMA`\n  environment variable. If you want your Ollama instance to be used, you can\n  pass it here too.\n- **`options.verbose`**: - If `true`, logs additional debugging information.\n  Defaults to `false`.\n- **`options.contextWindow`**: - An option to specify the context window size\n  for Ollama models. By default, Ollama sets this depending on the model, which\n  can be lower than the actual maximum context window size of the model.\n\n##### Returns\n\nA promise that resolves to the SimpleTable instance containing the similarity\nsearch results.\n\n##### Examples\n\n```ts\n// New table with a \"food\" column.\nawait table.loadArray([\n  { food: \"pizza\" },\n  { food: \"sushi\" },\n  { food: \"burger\" },\n  { food: \"pasta\" },\n  { food: \"salad\" },\n  { food: \"tacos\" },\n]);\n\n// Generate embeddings for the \"food\" column.\nawait table.aiEmbeddings(\"food\", \"embeddings\", { cache: true });\n\n// Find the 3 most similar foods to \"italian food\" based on embeddings.\nconst similarFoods = await table.aiVectorSimilarity(\n  \"italian food\",\n  \"embeddings\",\n  3,\n  {\n    createIndex: true, // Create an index on the embeddings column for faster searches\n    cache: true, // Cache the embedding of \"italian food\"\n  },\n);\n\n// Log the results\nawait similarFoods.logTable();\n```"
  },
  {
    "model": "deepseek-r1:32b",
    "prompt": "Your task is to generate a list of relevant questions and answers based on the provided section of documentation. The documentation is for the Simple Data Analysis library, a TypeScript library. The questions should be those a senior developer might have.\n\nThe questions must be directly related to the documentation section provided and must not ask about topics outside its scope. Your list of questions should cover all key aspects of the documentation section.\n\nFor each question, you must provide a code example as your answer. You must add comments to the code to explain the steps. You must also add a brief, one-sentence explanation before the code example.\n\nThe answer should be grounded in the documentation provided. Do not make assumptions. Do not invent features or methods that do not exist.\n\nWrite simple and straightforward code examples. Don't create functions to encapsulate your code.\n\nYour code examples should always be wrapped in triple backticks (``` at the beginning and ``` at the end) for code blocks.\n\nIf the documentation section is about SimpleDB, make sure to wrap your code example with:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the documentation section is about SimpleTable, make sure to wrap your code example with:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the example requires data, load it using `await table.loadData(\"path/to/your/data.csv\");` or `await table.loadGeoData(\"path/to/your/geodata.geojson\");` for geospatial data.\n\nDo not forget to add `await sdb.done();` at the end of your code.\n\nHere are a few complete question-and-answer examples.\n\nQuestion: How can I open my file sales.csv and see the first few rows?\nAnswer example:\nHere's how you can load a CSV file and log the first rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to aggregate my data. Which method should I use?\nAnswer example:\nYou should use the `summarize` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\n// Let's assume the data has columns \"price\" and \"product\"\nawait table.loadData(\"./my-data.csv\");\n// We summarize to count the number of items sold\n// and sum up the total sales for each product\nawait table.summarize({\n  values: \"price\",\n  categories: \"product\",\n  summaries: [\"count\", \"sum\"],\n  decimals: 2,\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to simplify my geospatial data.\nAnswer example:\nYou can use the `simplify` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify the geospatial data with a tolerance of 0.01\nawait table.simplify(0.01);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nReturn the questions and answers as a JSON object with the following structure:\n{ \"data\": [ { \"question\": \"question1\", \"answer\": \"answer1\" }, { \"question\": \"question2\", \"answer\": \"answer2\" }, ... ] }\n\nMake extra sure to return a valid JSON object. Return the JSON object only. Do not add any other text.\n\nKeep it simple and straightforward. Do not think too much.\n\nHere's the documentation section you need to work from:\n\n\n#### `getMin`\n\nReturns the minimum value from a specific column.\n\n##### Signature\n\n```typescript\nasync getMin(column: string): Promise<string | number | boolean | Date | null>;\n```\n\n##### Parameters\n\n- **`column`**: - The name of the column from which to retrieve the minimum\n  value.\n\n##### Returns\n\nA promise that resolves to the minimum value of the specified column.\n\n##### Examples\n\n```ts\n// Get the minimum value from the 'price' column\nconst minPrice = await table.getMin(\"price\");\nconsole.log(minPrice); // e.g., 10.50\n```"
  },
  {
    "model": "deepseek-r1:32b",
    "prompt": "Your task is to generate a list of relevant questions and answers based on the provided section of documentation. The documentation is for the Simple Data Analysis library, a TypeScript library. The questions should be those a data analyst might have.\n\nThe questions must be directly related to the documentation section provided and must not ask about topics outside its scope. Your list of questions should cover all key aspects of the documentation section.\n\nFor each question, you must provide a code example as your answer. You must add comments to the code to explain the steps. You must also add a brief, one-sentence explanation before the code example.\n\nThe answer should be grounded in the documentation provided. Do not make assumptions. Do not invent features or methods that do not exist.\n\nWrite simple and straightforward code examples. Don't create functions to encapsulate your code.\n\nYour code examples should always be wrapped in triple backticks (``` at the beginning and ``` at the end) for code blocks.\n\nIf the documentation section is about SimpleDB, make sure to wrap your code example with:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the documentation section is about SimpleTable, make sure to wrap your code example with:\n```\n// We start a SimpleDB instance\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable();\n[PUT YOUR CODE EXAMPLE HERE]\n// We close everything\nawait sdb.done();\n```\n\nIf the example requires data, load it using `await table.loadData(\"path/to/your/data.csv\");` or `await table.loadGeoData(\"path/to/your/geodata.geojson\");` for geospatial data.\n\nDo not forget to add `await sdb.done();` at the end of your code.\n\nHere are a few complete question-and-answer examples.\n\nQuestion: How can I open my file sales.csv and see the first few rows?\nAnswer example:\nHere's how you can load a CSV file and log the first rows:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\nawait table.loadData(\"./sales.csv\");\n// We log the first rows\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to aggregate my data. Which method should I use?\nAnswer example:\nYou should use the `summarize` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"myTable\");\n// We load data from the file\n// Let's assume the data has columns \"price\" and \"product\"\nawait table.loadData(\"./my-data.csv\");\n// We summarize to count the number of items sold\n// and sum up the total sales for each product\nawait table.summarize({\n  values: \"price\",\n  categories: \"product\",\n  summaries: [\"count\", \"sum\"],\n  decimals: 2,\n});\n// We log the results\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nQuestion: I want to simplify my geospatial data.\nAnswer example:\nYou can use the `simplify` method. Here's an example:\n```\nimport { SimpleDB } from \"@nshiab/simple-data-analysis\";\n// We start a SimpleDB instance\nconst sdb = new SimpleDB();\n// We create a new table\nconst table = sdb.newTable(\"geoTable\");\n// We load geospatial data from a file\nawait table.loadGeoData(\"./my-geodata.geojson\");\n// We simplify the geospatial data with a tolerance of 0.01\nawait table.simplify(0.01);\n// We log the first rows to see the simplified data\nawait table.logTable();\n// We close everything\nawait sdb.done();\n```\n\nReturn the questions and answers as a JSON object with the following structure:\n{ \"data\": [ { \"question\": \"question1\", \"answer\": \"answer1\" }, { \"question\": \"question2\", \"answer\": \"answer2\" }, ... ] }\n\nMake extra sure to return a valid JSON object. Return the JSON object only. Do not add any other text.\n\nKeep it simple and straightforward. Do not think too much.\n\nHere's the documentation section you need to work from:\n\n\n#### `getMedian`\n\nReturns the median value from a specific numeric column.\n\n##### Signature\n\n```typescript\nasync getMedian(column: string, options?: { decimals?: number }): Promise<number>;\n```\n\n##### Parameters\n\n- **`column`**: - The name of the numeric column from which to retrieve the\n  median value.\n- **`options`**: - An optional object with configuration options:\n- **`options.decimals`**: - The number of decimal places to round the result to.\n  Defaults to `undefined` (no rounding).\n\n##### Returns\n\nA promise that resolves to the median value of the specified column.\n\n##### Examples\n\n```ts\n// Get the median of the 'age' column\nconst medianAge = await table.getMedian(\"age\");\nconsole.log(medianAge); // e.g., 30\n```\n\n```ts\n// Get the median of the 'salary' column, rounded to 2 decimal places\nconst medianSalary = await table.getMedian(\"salary\", { decimals: 2 });\nconsole.log(medianSalary); // e.g., 50000.00\n```"
  }
]